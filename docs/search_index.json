[["index.html", "VisionEval User Guide Welcome About VisionEval Why Use VisionEval? How to Use this Guide", " VisionEval User Guide Last updated 2022-03-07 Welcome This guide contains documentation for users and developers of the VisionEval modeling system. About VisionEval VisionEval is a collaborative project to build a family of strategic tools for performance-based transportation planning into a single open-source programming framework. Strategic tools are designed to evaluate many alternative futures and policies to help state and metropolitan area governments address pressing issues, despite uncertainty. Why Use VisionEval? Strategic planning is becoming increasingly important as a means to help state and metropolitan area governments select policies and actions to address pressing issues that are fraught with uncertainty. More specifically, Federal direction has challenged state, regional, and local transportation agencies with measuring the outcomes of decisions through performance-based planning, including considering how transportation solutions may impact future goals such as sustainability, health, and mobility. Further complicating matters, plans need to be resilient to changing transportation and land use trends and the implications of emerging technologies and constraints. VisionEval is an open source common framework building on the successful GreenSTEP family of strategic planning tools that is intended to address these needs. VisionEval merges this family of tools into an open-source project with a supporting community forum of partner agencies and others sharing in its use and enhancement. The goal is to support a broad array of potential tool uses and enable pooled enhancements expanding the types of outcomes measured or refine the specificity of transportation and land use solutions considered. The work to date draws from successful past and interested future users nationally, who will both define the policy needs and uses of these tools, and set their direction moving forward. How to Use this Guide This guide contains a diversity of information intended for different audiences interacting with the VisionEval system. Use the list below to try to identify what kind of user you are and the sections of this guide that will serve the best starting points. Decision-maker &amp; semi-technical planner: You are interested in applying the VisionEval system but want a high-level overview and not the technical details. Concept Primer: An introduction to the concepts underlying the VisionEval modeling system and how it can be used to support transportation planning efforts, intended for a non-technical audience Model applier: You are wanting to learn about the VisionEval system and implement a model application. Concept Primer: An introduction to the concepts underlying the VisionEval modeling system and how it can be used to support transportation planning efforts, intended for a non-technical audience Getting Started: Instructions on how to get VisionEval installed and running Tutorials: Comprehensive tutorial materials on the VERSPM, VERPAT, and VE-State models Developer: You are a developer or researcher and interested in making contributions to the VisionEval system. Developer Documentation "],["conceptprimer.html", "Chapter 1 Concept Primer 1.1 Introduction 1.2 Typical applications 1.3 Scenario analyses 1.4 Building blocks 1.5 Adjustments 1.6 Processing 1.7 Lexicon", " Chapter 1 Concept Primer 1.1 Introduction VisionEval differs from traditional travel demand models both in how it works and what kind of planning concerns it helps to address. This chapter provides a quick introduction approach to the unique features and applications of VisionEval. It reviews the main model components and key concepts at a high level, to assist new users in understanding concepts they will apply as they set up scenarios, develop inputs and evaluate outputs. Links to more detailed documentation will allow the reader to delve further into each topic, as they choose. 1.1.1 What can I do with VisionEval? Structurally, VisionEval may be described as a disaggregate demand/aggregate supply model. That is, it combines rich demographic and socioeconomic detail from a synthetic population with aggregate treatments of travel (multi-modal VMT and congestion without explicit trips, or transport networks). The implication of the aggregate supply model is that VisionEval cannot be used to evaluate performance of specific projects or corridors. What VisionEval can do, and even makes especially simple, is to evaluate large numbers of scenarios and explore how combinations of alternative future conditions might affect performance measures. Travel demand models, whether built using traditional trip-based or more contemporary activity-based techniques, sacrifice flexibility for network detail. It is difficult in such models to capture novel behaviors such as an increased propensity to use inexpensive ride-hailing services, or to express shifts in vehicle ownership and occupancy that may be influenced by multiple factors some of which have not yet been observed. Yet these potential shifts are often very important for assessing the potential of pricing, investment strategies or other policy priorities. VisionEval also makes it relatively simple to explore risks and opportunities that may eventually be realized as new transportation options mature. VisionEval wont help us determine if a particular highway segment should be built or upgraded, or what kind of transit service improvements should be extended into new areas. But it can help us look at the market for new technologies, and explore future scenarios that are based both on changed circumstances (altered demographics, increased congestion, or alternate road pricing strategies) as well as on changed behaviors (including behaviors that might happen, but that we have not yet observed because the key enabling technologies are too early in their deployment). VisionEval results can be explored in detail by market segment, asking questions about how benefits might be distributed regionally, and what overall system performance might look like. Ultimately, VisionEval is a system for asking a very broad range of what if questions about how the transportation system might perform, and how its benefits and costs might be distributed over the community. It can efficiently process hundreds of scenarios looking at many different types of interventions, alternative policies, and hypothetical future conditions and travel behaviors. The results can inform strategic questions, helping decision makers answer questions such as What are our options for achieving this performance result? or What are our risks if new transportation technologies develop in these different ways? Using VisionEval to answer such questions does not make other types of modeling obsolete (such as travel demand models or corridor microsimulations). Instead, it helps to determine what is worth the effort to code into these more detailed models, and also to explore and document novel assumptions about the future that may require extra effort to implement, and that would be prohibitively expensive to explore through traditional planning models. 1.1.2 Strengths and limitations VisionEval operates at broad geographic levels and without explicit network representations to enable very fast analyses across scores of different assumptions and inputs. It is especially well suited for quickly evaluating several different combinations of policies or assessing the range of impacts when uncertainty exists in several key inputs. Because much of the travel behavior is asserted based on observed travel patterns the latter can be changed to reflect expected changes due to new technologies, services, and expected changes in behavior over time. Thus, VisionEval is better suited than traditional travel modeling approaches for certain pursuits: Screening a wide range of policy actions, especially in the face of uncertainties where ranges of expected responses or effects must be considered Resilience testing under uncertainties (e.g., population growth, household size, fuel prices) Directly comparing and contrasting broad ranges or combinations of policies (e.g., ITS, transit service, active transport, demand management) Analysis of broad policy or technology changes (e.g., carbon taxes, low-carbon fuels) Evaluating fuel consumption, particulate emissions, and greenhouse gas emissions impacts of proposed policies However, VisionEval is not well suited for detailed geographic analyses, to include the effects of congestion on individual trips or tours. Thus, examining the effects of localized land use (e.g.Â parcel or block) or network assumptions cannot be carried out using VisionEval. Improvements in network capacity, efficiency, or safety can only be indirectly incorporated in VisionEval. 1.1.3 VisionEval geographies Traditional travel forecasting models divide a study area into thousands of traffic analysis zones in order to facilitate highly granular spatial analyses. This allows trip (tour segment) origins and destinations to enter and exit a detailed representation of the multimodal transportation network in order to study network flows, congestion, and efficiency outcomes. VisionEval operates at a much broader spatial scale, using several levels of geography: A region defines the entire area covered by the VisionEval analyses Azones are large areas such as cities, counties, or Census Public Use Microdata Areas (PUMAs) Bzones are subdivisions of Azones that represent neighborhoods, Census tracts or block groups, or other relatively homogenous areas Metropolitan areas (Marea) are defined as groups of Azones that define them The location type of each household is also coded as urban, town, or rural areas. A place type is also defined in terms of urban density and its mix of jobs and housing. Both are usually defined for each Bzone used in the model. Watch a video presentation with more information about VisionEval geographies 1.1.4 Performance metrics The following table summarizes many of the possible performance metrics that can be summarized at the region level. The ability to easily export the data enables the analyst to construct new or different performance measures easily. Mobility Daily VMT per capita Annual walk trips per capita Daily Bike trips per capita Economy Annual all vehicle delay per capita (hours) Daily household parking costs Annual household vehicle operating cost (fuel, taxes, parking) Annual household [auto ownership costs][auto_own_cost] (depreciation, vehicle maintenance, tires, finance charge, insurance, registration) Land Use Number or percent of residents living in mixed use areas Number of dwelling by housing type (e.g., single family [SF], multi-family [MF]) Environmental Annual greenhouse gas emissions per capita Household vehicle greenhouse gas/mile Commercial vehicle greenhouse gas/mile Transit vehicle greenhouse gas/mile Energy Annual per capita fuel consumption for all vehicles (gallons) Average fuel efficiency (net miles per gallon) for all vehicles Annual external social costs per households (total/percent paid) 1.2 Typical applications VisionEval can be used to inform planning in several different realms, as described in the following sections. 1.2.1 Strategic modeling VisionEval is a strategic modeling system. It differs from traditional travel demand and microsimulation models principally in that it is applied earlier in the planning process, and it is used for different purposes. Rather than examining the detailed performance of specific facilities (assessing individual projects), VisionEval estimates regional and small area performance metrics that reflect overarching policy goals such as emission reduction, regional VMT, or mode share. Traditional travel models used for planning purposes are applied to estimate outcomes under a small number of alternate input scenarios that vary land use characteristics (e.g.Â type and density of land uses), socioeconomic characteristics (e.g.Â population, ages, incomes), and/or transportation characteristics (e.g.Â road alignments, lane configurations, tolls, etc.). In these models, the response to the changed inputs is estimated based on parameters typically derived from household surveys and other related data sources: that is, the behavior in the model is presumed to be what we see today. Even though such models are often behaviorally complex (e.g., activity-based models), the effort required to assess many alternative scenarios is often prohibitive, and because such models are built using complex estimation procedures rooted in detailed data about existing behavior, it can be technically difficult or impossible to reliably encode possible future shifts in behavior, or to explore alternative possible future behaviors. VisionEval is typically set up to run many scenarios that explore a broad set of alternative policies and investment priorities that may result from a variety of possible categories of policy and project interventions, or from a range of possible future conditions (strong or weak economic growth, demographics that shift at different rates), or from uncertain deployment of new technologies such as app-based ridesharing (Transportation Network Companies or TNCs). A full application of VisionEval may examine hundreds or even thousands of permutations of inputs representing many possible future outcomes. The outputs allow planners and decision-makers to explore the outcomes of each scenario compared to the others, so they can visualize and discuss the relative impact and cross-influences, as well as the unintended consequences, of factors represented across the scenarios. VisionEval allows planners to assess alternative assumptions about uncertain phenomena such as autonomous vehicle (AV) deployment, it is a very effective tool for identifying risks and opportunities, as well as for formulating effective strategic responses to new challenges for which little current data exists or for which many outcomes are possible yet none are certain. The most interesting of the resulting strategic plans can be refined with more detailed models. Based on the strategic modeling findings, uncertainties can be confidently simplified into a smaller number of scenarios to explore in detail. Notwithstanding its typical application as a strategic model, VisionEval does allow detailed investigation of certain phenomena such as fleet composition and vehicle ownership in relation to Greenhouse Gas Analysis. It also is unique in its ability to explore budget constraints on travel. Its simulation of individual households enables it to assess policies that would be difficult or impossible to model successfully with traditional models. 1.2.2 Local policy actions VisionEval is well suited for evaluating a wide range of local policies at varying levels of geography: Demographics (Azone) Population by age (households &amp; non-institutional group quarters) Average household size and percent of single-person households Driver licensing rates (optional) Average per capita Income LandUse (Bzone) Employment by type (Total, Retail, Service) Dwelling units by type (SF, MF) Income quartiles (for allocating households to neighborhoods and Dwelling units) Share of households in Urban Mixed Use areas (optional) 5D built form measures (Design &amp; Transit) Developable area Parking pricing policies Transportation Operations Actions Road lane-miles (freeways, arterials) (Marea) Transit Service (service miles by transit mode) (Marea) Short SOV Trips Diversion (to bikes, personal electrics, etc.) (Azone) ITS Operations (Ramp metering, Incident response, (Marea) ITS speed smoothing (Freeway ATM, Art Signal optimization) (Marea) VMT covered by Drivers in Eco-Drive programs (Marea) EV Charging infrastructure (residential) (Azone) Pricing Fuel and electricity costs (Azone) Road Cost Recovery  Registration Fee, gas taxes, VMT fee (Azone) Carbon Pricing and other environmental impact fees(social cost recovery) (Region) Congestion Fees (Marea) PAYD insurance participation (Azone) Vehicle, Fuels, &amp; Emissions Electricity carbon intensity (Azone) Fuel carbon intensity (composites by vehicle group) (Region) LDV-HH percent Light Trucks (stock) (Azone) LDV-HH vehicle age average (Azone) LDV CarService, vehicle mix (stock) (Region) Transit vehicles &amp; fuels mix (Marea) LDV CommService vehicle mix, %Light Trucks (stock) (Region) Heavy truck vehicle mix (stock) (Region) 1.3 Scenario analyses A key value of VisionEval is how it facilitates running many scenarios or possible futures. In practice, the user typically starts by setting up the model with a reference scenario (i.e.Â a scenario that represents current policies and extrapolation of current trends). The model can be validated for current and past years at this point. This Reference scenario then serves as a pivot point for the development of alternative scenarios that modify one or more policy assumptions or other assumptions about the future (e.g.Â assumptions about urban area expansion, assumptions about future light-duty vehicle fleet composition). Because VisionEval models address a large number of factors that are specified by dozens of input files, and because each set of inputs could have many different values, the potential number of alternate scenarios that could be defined is probably uncountable. For this reason, the scenario generation process is simplified by defining categories of inputs that are related in how they affect behavior or are related in how policies are likely to be deployed. An example of the former would be the definition of a pricing category that groups all inputs affecting the price/cost of operating light-duty vehicles (e.g.Â fuel price, congestion price, carbon price). An example of the latter would be the definition of a land use category which in addition to including land use inputs such as development density, also includes transportation inputs that are associated with land use such as transit service frequency. For each category of inputs, several levels of change from the reference scenario assumptions are defined. Alternate scenarios can then be developed by swapping out reference scenario inputs in each category with different level inputs for the category. This is typically done in two ways: Sensitivity tests that change a single category of inputs for each run. Such tests are useful for exploring the relative effects of each category. Combinatorial tests which compose scenarios from combinations of all categories and all levels. Note that the number of combinatorial scenarios is a function of the number of categories and the number of levels in each category. For example, if inputs are grouped into 5 categories and each category has 3 levels, at total of 243 scenarios (3x3x3x3x3) would be generated by all combinations. For this reason, automated processes are typically developed to aid in the set-up and running of these scenarios, and analysis of the results. 1.4 Building blocks 1.4.1 Household synthesis and land use One of the strengths of VisionEval is the rich detail on individual households. This allows for household specific policies, travel behavior can respond to specific household costs and attributes, and outputs can be mined for differences by population groups. The approach of building on a synthesized population borrows from the state of the practice in activity-based travel demand models. Watch a short video on household synthesis VisionEval creates simulated households in each AZone from user-supplied projections of persons by age group and average per capita income. Each simulated household has the characteristics of the number of persons in each of 6 age groups, number of workers in each of 5 age groups, lifecycle category, and household income. The simulated households are assigned a dwelling unit type (single family or multi-family) using a model that is sensitive to the household characteristics and the number of units of each type assigned to the Azone (based on user inputs). Each simulated household is assigned to a BZone based on the number of dwelling units of their assigned type in each Bzone and the households income compared to the relative income distribution by BZone. Separately, BZones are attributed with employment and land use attributes (location type, built form D values, urban mixed use, and employment by type). Household members who are workers are assigned a BZone work location as a function of the distribution of jobs in the model area. Each home and work location is tied to a specific Bzone with its associated attributes. Policies are added to each household as a function of their home and work Bzones: Parking restrictions (work and non-work) Travel demand management (TDM) programs (home and work-based) CarService program availability The following sections describe each module that contributes to this concept. 1.4.1.1 Synthesize households Household synthesis is carried out in several steps: Create customized PUMS dataset: This is done prior to setting up a model in VisionEval. A household dataset is prepared from Census PUMS data for the modeled region. The default data included with VisionEval is for Oregon. PUMS data for other regions may be used instead, rebuilding the package to reflect Census households for the region of interest. Create Households: The identified types of PUMS households are expanded to meet user control totals and other demographic inputs. Census PUMS data are used define probabilities that a person by age group would be found in each of hundreds of household types. A matrix balancing process is used to allocate persons by age to each of the PUMS household types in a way that matches input control totals and optional constraints. The sampled households are expanded to meet user control totals and other demographic inputs. Predict Workers: The number of workers by age group within each simulated household is predicted using Census PUMS probabilities. The user may optionally specify changes in employment rates by age group and Azone to simulate changes in labor force participation over time and/or differences in employment rates by location. Assign LifeCyle: Categorizes households are categorized by six lifecycle categories given the household age mix and employment status. Predict Income: The annual income for each simulated household is predicted as a function of the households worker count by age group, the average per capita income where the household resides (AZone), and interactions between neighborhood income and age (all and seniors). The models are estimated with Census PUMS data. 1.4.1.2 Household drivers and autos The number of drivers and autos in each household are calculated in two steps: Assign Drivers: Drivers by age group are assigned to each household as a function of the numbers of persons and workers by age group, the household income, land use characteristics, and transit availability. Metropolitan areas are also sensitive to transit service level and urban mixed use indicators at the home location. Optional restriction on drivers by age group can be used in calibration or to address trends such as lower millennial licensure rates. Assign Vehicle Ownership: The number of vehicles owned or leased by each household are determined as a function of household characteristics, land use characteristics, and transportation system characteristics. Households in metropolitan areas are also sensitive to transit service level and urban mixed use indicators at the home location. The model first predicts zero-auto households and then the number of vehicles owned (up to 6), if any. 1.4.1.3 Land use attributes Two steps are required to add land use attributes to the synthetic population: Calculate 4D Measures: Several land use 5D built form measures are calculated for each Bzone. The density, diversity, and destination accessibilities are based on Bzone population, employment, dwelling units, and developable land area inputs. The design variable is a user input. Calculate Urban Mixed Use Measure: An urban mixed measure for the household is calculated based on population density of the home Bzone and dwelling unit type. The model is based on 2001 NHTS data. The model iterates to match an optional input target on the share of households to locate in urban mixed-use areas. 1.4.1.4 Land use-household linkages Several land use attributes are added to each household: Assign Location Types: Households are assigned to land use location types  urban, town, or rural  by random allocation based on the households dwelling unit type and input proportions on the mix of dwelling types in its enclosing Bzone. Predict Housing: Dwelling unit types are assigned to regular and group quarter households based on the input Bzone supply of dwelling units by type. Residential households also consider the relative costliness of housing within the Azone (logged ratio of the households income relative to mean income in their Azone), household size, oldest age person, and the interaction of size and income ratio. Locate Employment: The number of input jobs by Bzone and employment type (retail, service, total) are scaled so that total jobs equals total household workers within the Marea. A worker table is developed and each worker is assigned to a work Bzone. The assignment essentially uses a gravity-type model with tabulations of workers and jobs by Bzone (marginal controls) and distance between residence and employment Bzones (IPF seed, inverse of straight-line distances between home and all work Bzone centroids). 1.4.1.5 Policy levers Several assumptions about parking, demand management, and mobility services can also be coded: Assign Parking Restrictions: Households are assigned specific parking restrictions and fees for their residence, workplace(s), and other places they are likely to visit based on parking inputs by BZone (within Bzones coded as within metropolitan areas [Marea] only). Residential Parking Restrictions &amp; Fees: The number of free parking spaces available at the households residence is set based on input value that identify the average residential parking spaces by dwelling type in each Bzone. For household vehicles that cannot be parked in a free space a residential parking cost (part of auto ownership costs) is identified as a function of input parking rates for the home Bzone (if any). Employer Parking and Fees: Which workers pay for parking is set by inputs that define the proportion of workers facing parking fees in each Bzone. Whether their payment is part of a cash out/buy back program is similarly set by input proportions by Bzone and associated fees set by input parking rates for the work Bzone. Non-work Parking Fees: The cost of parking for other activities such as shopping is estimated as the likelihood that a household would visit each Bzone and the parking fee in that Bzone. The likelihood is calculated with a gravity-type model, given the relative amount of activity in the Bzone (numbers of households by Bzone and the scaled retail and service job attractions by Bzone as marginals) and the proximity to each destination (inverse distance matrix from home Bzone seed matrix). The average daily parking cost is a weighted average of the fee faced in each destination bzone and the likelihood of visiting that Bzone. Assign Demand Management: Households are assigned to individualized marketing programs based on input participation levels within their home Bzone. Each worker in the household can also be assigned to an employee commute options program based on input participation levels for workers within their assigned work Bzone. A simple percentage reduction in household VMT is applied based on the households participation in one or more of these program (maximum of multiple program participation, to avoid double-counting). Worker reductions are only applied to that workers work travel portion of overall household VMT, and summed if multiple workers in the household participate in such programs. Caution: The model assumes high-caliber TDM programs are in place that produce significant VMT savings. Inputs should reflect this. Assign CarSvc Availability: A car service level is assigned to each household based on the input car service coverage for where the household resides (Bzone). High Car Service availability can have an impact on auto ownership (households may own fewer vehicles where high level car service is available) and auto operating cost (see the discussion in the next chapter on household costs and budgets). 1.4.2 Household multimodal travel Watch a video overview of the Household Multimodal Travel module Travel of various modes by households (vehicle, transit, bike, and walk modes) is estimated as a simple function of the rich demographic and land use attributes of the household. In metropolitan areas travel is also influenced by inputs on transport supply on a per capita basis, such as available roadway capacity and bus-equivalent transit service levels. Transit, bike, and walk trips are also influenced by household VMT (i.e.Â if household VMT decreases, trips by these modes increase, and vise verse). Traditional travel models incorporate behavioral dynamics in choice models to build tours and trips for each synthetic person. VisionEval, by contrast, uses simple regression equations that directly estimate average per capita trips and miles by mode, linked by average trip lengths. After adjusting VMT for household budget limitations it is further adjusted for household participation in TDM programs (home &amp; work-based) and short-trip SOV diversion before calculating household trips for all modes. The households bike miles are also adjusted to reflect SOV diversion input. The following sections describe each module, which are implemented in sequence: The households daily VMT is calculated without household budget adjustments The households vehicle operating costs are calculated The households vehicle operating cost budget is calculated and daily VMT is adjusted to fit within the budget if necessary Daily VMT reductions due to TDM measures and short-trip SOV diversions are calculated and applied Vehicle and non-vehicular (AltMode) trips are calculated for each household 1.4.2.1 Transport supply Transport supply variables are defined in two steps. Note that these calculations are only carried out within metropolitan areas (Mareas) only: Assign Transit Service: Transit service levels are input for each metropolitan areas and neighborhood (Bzone). Annual revenue-miles (i.e.Â transit miles in revenue service) by eight transit modes are read from inputs for each metropolitan area. A Bzone-level Transit D attribute defines access to transit (not yet work access) for each household based on inputs on relative transit accessibility. Using factors derived from the National Transit Database (NTD), input annual transit revenue miles for each of the eight transit modes are converted to bus-equivalent miles by three transit vehicle types (van, bus, and rail). Per capita relative transit supply and bus-equivalent service-miles are calculated. Assign Road Miles: Stores input on the numbers of freeway lane-miles and arterial lane-miles by metropolitan area and year. Computes the relative roadway supply, arterial and freeway lane-miles per capita. 1.4.2.2 Household travel calculations Household travel by vehicles are calculated in three steps: Calculate Household Daily VMT (Dvmt): Household average daily vehicle miles traveled (VMT) is estimated as a function of household characteristics(income, workers, children, drivers), vehicle ownership, and attributes of the neighborhood (population density) and metropolitan area (urban mixed-use, transit service level, freeway lane-miles) where the household resides. It also calculates household VMT percentiles which are used by other modules to calculate whether a household is likely to own an electric vehicle (EV) and to calculate the proportions of plug-in hybrid electric vehicles (PHEV) VMT powered by electricity. These values are derived from the 2001 NHTS data. CalculateVehicleTrips: This module calculates average daily vehicle trips for households consistent with the household VMT. Average length of household vehicle trips is estimated as a function of household characteristics (drivers/non-driers, income), vehicle ownership (auto sufficiency), and attributes of the neighborhood (population density) and metropolitan area (urban mixed-use, freeway lane-miles) where the household resides, and interactions among these variables. The average trip length is divided into the average household VMT to get an estimate of average number of daily vehicle trips. Calculate AltMode Trips: This module calculates household transit trips, walk trips, and bike trips. The models are sensitive to household VMT so they are run after all household VMT adjustments (e.g., to account for cost on household VMT) are made. Twelve models estimate trips for the three modes in metropolitan and non-metropolitan areas, in two steps each. The first step determines whether a household has any AltMode trips and the second part determines the number of trips. All of the models include terms for household characteristics (size, income, age mix) and the households overall VMT. Neighborhood factors (population density) factors into all but the bike trip models. For households in metropolitan areas transit service level has an impact as well, with transit ridership also sensitive to when residents live in urban mixed-use neighborhoods. 1.4.2.3 SOV diversion Household single-occupant vehicle (SOV) travel is reduced to achieve bike and micro-transportation input policy goals, i.e., for diverting a portion of SOV travel within a 20-mile tour distance (round trip distance). This allows evaluating the potential for light-weight vehicles (e.g.Â bicycles, electric bikes, electric scooters) and infrastructure to support their use, in reducing SOV travel. First, the amount of the households VMT that occurs in SOV tours having round trip distances of 20 miles or less is estimated. Then the average trip length within those tours is estimated. Both models are sensitive to household characteristics(drivers, income, kids), vehicle ownership (auto sufficiency), and attributes of the neighborhood (population density, dwelling type) and metropolitan area (urban mixed-use, freeway lane-miles) where the household resides, and the households overall VMT. The diversion of these short trips is assumed to only apply in urban and town location types. The VMT reductions are allocated to households as a function of the households SOV VMT and (the inverse of) SOV trip length. In other words, it is assumed that households having more qualifying SOV travel and households having shorter SOV trips will be more likely to divert SOV travel to bicycle-like modes. The estimates of the households share of diverted VMT, average trip length of diverted VMT are applied elsewhere to reduce DMVT and increase bike trips. Zero vehicle households are not allowed to divert SOV travel. Census PUMS data is used to estimate the models. 1.4.2.4 DVMT reductions Each households VMT is adjusted for their TDM program(s) participation, if any, as well as input from metropolitan area short-trips SOV diversion goals. The SOV diversion also increases bike trips (diverted SOV VMT divided by SOV average trip length). 1.4.3 Vehicles, fuels and emissions The powertrains, fuels, and associated emissions datasets for all modeled vehicle groups are among the most complex inputs used in VisionEval. Default datasets are included in the VisionEval installer to simplify this for the user. The user can use these defaults or develop their own data that matches the VisionEval input requirements. It is anticipated that different datasets will be developed by users that can be shared with the VisionEval community. For example, one package may represent a base scenario of federal vehicle, fuel, and emission standards, while another package represents the California zero-emissions vehicle (ZEV) rules and low carbon fuel for the home locations CarService. The model looks in household vehicle sales tables indexed by vehicle type and age to determine the probability of each powertrain in that sales year, along with its associated fuel efficiency and other attributes. Each household vehicle is assigned attributes consistent with these probabilities. In some cases electric vehicles (EVs) are replaced by plug-in hybrid electric vehicles (PHEVs) if household VMT and residential charging limitations exist. The powertrain mix of non-household vehicle groups  car service, commercial service, transit, and heavy trucks  is applied to VMT (rather than individual vehicles) in the scenario year (rather than sales year). There is some input adjustment for average vehicle age and commercial vehicle type share. Fuels for each vehicle groups can rely on the package defaults, or use one of two input options. The user can either provide a composite carbon intensity representing all gallons of fuel used for that vehicle group, or provide fuel mix shares (base fuel mix, biofuel blend proportions), combined with package default lifecycle (well-to-wheels) carbon intensity for the individual fuels. The resulting carbon intensity per gallon are applied to gallons generated from VMT and vehicle fuel efficiency assumptions. Adjustments to fuel efficiency due to reduced speeds due to congestion as well as ITS operational programs (e.g., speed smoothing) and EcoDrive programs. The table below summarizes the vehicle and fuel options available within VisionEval. Vehicle Group Vehicle Types Powertrain Options Veh Input Adjustments Fuel Options Household Vehicles automobile, light truck ICE, HEV, EV, PHEV (default veh mix), age, %LtTrk gas/ethanol, diesel/biodiesel, CNG/RNG Car Service VMT automobile, light truck ICE, HEV, EV veh mix, age (HH %LtTrk) gas/ethanol, diesel/biodiesel, CNG/RNG Commercial Service VMT automobile, light truck ICE, HEV, EV veh mix, age, %LtTrk gas/ethanol, diesel/biodiesel, CNG/RNG Heavy Truck VMT heavy truck ICE, HEV, EV veh mix gas/ethanol, diesel/biodiesel, CNG/LNG Public Transit VMT van, bus, rail ICE, HEV, EV veh mix gas/ethanol, diesel/biodiesel, CNG/RNG Note that individual vehicles are modeled for households, based on sales year default datasets and age of the owned vehicle. Other groups vehicle and fuel attributes apply to VMT in the scenario modeled year. As a result, PHEVs do not exist other than household vehicles, instead PHEVs are represented as miles driven in HEVs and miles in EVs. Watch a video overview of vehicles, fuels, and emissions 1.4.3.1 Household vehicle table The household vehicle table is generated in two steps: Create Vehicle Table: A vehicle table is created with a record for every vehicle owned by the household, and additional vehicle records are added to reach the households number of driving age persons. Each vehicle record is populated with household ID and geography fields (Azone, Marea) and access time attributes. Each vehicle record is either own or (driving-age person without a vehicle) assigned access to a CarService level, depending upon coverage in the households home Bzone. Assign Vehicle Type:. Identifies how many household vehicles are light trucks and how many are automobiles as a function of number of vehicles, person-to-vehicle and vehicle-to-driver ratios, number of children, dwelling unit type, income, density, and urban mixed use data (in metropolitan areas only). 1.4.3.2 Powertrains and fuels defaults These values are defined in two steps: Load Default Values:. This script, run before the rest of VisionEval is started, reads and processes the default powertrains and fuels files in the package and creates datasets used by other modules to compute fuel and electricity consumption, and well as associated fuel and electricity carbon intensity emissions from vehicle travel. An Initialize step is run by VisionEval as part of its initialization on each run. Optional user-supplied vehicle and fuel input files, if any, are processed (including input data checks). When available, modules that compute carbon intensities of vehicle travel will use the user-supplied data instead of the package default datasets. 1.4.3.3 Assign household powertrains and fuels The powertrain and fuel type is assigned to each vehicle in each household in three steps: Assign Vehicle Age: Assigns vehicle ages to each household vehicle and CarService vehicle used by the household as a function of the vehicle group (household vehicles only), household income, and assumed mean vehicle age by vehicle type and Azone. The age model starts with an observed vehicle age distribution and relationship between vehicle age and income. These data are currently based on summaries of the 2001 NHTS. Adjustments are made based on user average vehicle age inputs (household by vehicle type, car service overall). Assign Household Vehicle Powertrain: This module assigns a powertrain type to each household vehicle. The age of each vehicle is used with default tables by vehicle type that identify the powertrain mix of vehicles sold in each sales year. Other default tables identify vehicle characteristics tied to powertrain that include battery range, fuel efficiency, and emissions rate. Assignments of EVs may be changed to PHEVs if the battery range is not compatible with estimated day-to-day trip lengths, or the home dwelling lacks vehicle charging availability. Calculate Carbon Intensity: This module calculates the average carbon intensity of fuels (grams CO2e per megajoule) by vehicle group and, if applicable, vehicle type. Average fuel carbon intensities for transit vehicle modes are calculated by metropolitan area, other vehicles are calculated for the entire model region. The module also reads the input average carbon intensity of electricity at the Azone level. 1.4.3.4 Assign non-household powertrains and fuels The assignment of powertrain and fuel characteristics is carried out in two steps: Calculate Transit Energy And Emissions: This module calculates the energy consumption and carbon emissions from transit vehicles in urbanized areas. Assumptions (package default or user input) on powertrain mix and fuels for three transit vehicle types by metropolitan area are applied to associated Marea transit service miles for these types. Assumptions (package default or user input) on average carbon intensity of fuel and electricity by transit vehicle types are then applied to Marea fuel and electricity usage across types to calculate carbon emissions. Calculate Commercial Energy And Emissions: The energy consumption and carbon emissions of heavy trucks and commercial service VMT (no vehicles) are calculated by on-road (not sales) year. VMT shares of Commercial Service powertrains by vehicle type and heavy truck powertrains are calculated (per package default or user input). Any fuel efficiency (MPG and MPKWH) adjustments are then applied, due to policies (EcoDriving, speed smoothing and/or congestion (including effects of any ITS operational and congestion fee policies). Ecodriving applies only to internal combustion engine (ICE) vehicles and ITS operational policies and congestion apply only in metropolitan areas. Both vary by powertrain and for commercial vehicles, vehicle type. Combining fuel efficiency and VMT (from the Household Multimodal Travel Model) results in estimates of energy usage (fuel and electricity). Fuel carbon intensity for these modes is calculated by metropolitan area and/or region and applied to fuel and electricity usage to estimate CO2e emissions. 1.5 Adjustments 1.5.1 Congestion adjustments Congestion, only calculated on urbanized roads (a subset of metropolitan area roads, requires estimating and combining together the VMT of all vehicle groups. For non-household vehicles, base year VMT is calculated directly from inputs and model parameters, while future year is a function of the input growth basis. Initial allocations of DMVT across road class is based on input values. Light duty vehicle (LDV) VMT is allowed to re-allocate between freeways and arterials to balance demand (VMT) and roadway supply (lane-miles) through a generalized cost framework (including roadway speed and congestion fees, if any). Roadway supply (i.e., capacity) is adjusted by delay-reducing ITS operations policies based on fuel-speed curves by powertrain, the resulting congested speeds impact vehicle fuel efficiency. Further adjustments are applied to reflect any speed smoothing and EcoDrive programs that may not affect delay but reduce acceleration and deceleration with associated impacts on fuel efficiency. No fuel efficiency adjustments for congestion or policies are made to non-urban roadway VMT. The delays faced by each household and associated fuel economy impacts are applied to each individual households VMT and vehicles. Resulting overall average speeds, delays, and DMVT proportions, by road class at each congestion level on urbanized and other roads are also tabulated along with the resulting average per mile congestion fees paid, if any, and overall vehicle hours of delay (VHD) by vehicle group. Watch a video summary of VisionEvals congestion adjustment 1.5.1.1 Initialize roadway conditions The roadway conditions in the model are calculated in three steps: Load Default Road VMT Values: These calculations are completed before the model run starts. The base year roadway VMT is processed, including light duty vehicle and heavy truck VMT by state and urbanized area as well as VMT proportions by urbanized area, vehicle group (light duty vehicle, heavy truck, bus), and road class. The user can either provide direct inputs for these values or specify a state and/or urbanized area and the model will use default data from the 20xx USDOT Highway Statistics, where available. Initialize:. This step is run when the model run is initialized. User inputs used by several modules are read and checked (many with several valid options, proportions sum to 1, consistency, congestion fees increase with congestion level). Some of these values are optional, using default data where not specified. This includes various assumptions on base year VMT within both urbanized area(s) and the full model region, by vehicle group, allocation among road class, growth basis, and assumptions for freight vehicle groups. It also checks inputs on ITS operational policies and EcoDriving programs, including any user-specified other ops programs and congestion fees (by road class and congestion level). Calculate Road VMT: Adds together metropolitan area VMT of all vehicle groups (Households, CarService, Commercial Service, Heavy Truck, Transit) and allocates it across road classes (freeway, arterial, other), limiting it to urbanized area roadways for use in congestion calculations. To do so, several factors are established in the base year. One uses the input growth basis (population, income, household VMT) to estimate future year freight vehicle group (commercial service and heavy truck) VMT (using input base year VMT values by region and Marea, if provided, model-estimates otherwise). A second base year factor identifies the urban and non-urban allocation of VMT from metropolitan area households and related commercial service vehicles. For Heavy Trucks VMT an input specifies the proportion of VMT on urbanized roads while transit VMT (of all transit service modes) is assumed to only occur on urbanized roads. Base year allocations of urban VMT by vehicle group among road classes are based on input shares, subject to adjustment during subsequent congestion calculations. Finally, to assess delay faced by each household and associated fuel efficiency impacts, each individual households VMT is split between miles on urbanized and other road miles. 1.5.1.2 Congestion model and adjustments Three adjustments are made based on congestion levels: Calculate Road Performance: Congestion level by road class and the associated amounts of VMT are iteratively estimated. Light duty vehicle (LDV) VMT is allowed to re-allocate between freeways and arterials to balance demand and roadway supply (lane-miles) through a generalized cost framework (including roadway speed and congestion fees, if any and an estimated base year urbanized area lambda parameter based on the areas population and freeway-arterial lane-mile ratio). DMVT allocation at different aggregate demand-supply ratios relies on data from the 2009 Urban Mobility Study (UMS) for 90 urbanized areas, where the model chooses the 5-10 cities with most similar congestion ratios. The supply calculation considers the delay-reduction effects of deploying urban area ITS operations programs (freeway ramp metering, freeway incident management, arterial signal coordination, arterial access control or user-defined other ops programs. The standard ITS-operations program impacts are based on research (Bigazzi &amp; Clifton 2011). Non-urban speeds are also calculated, using a simple ratio of rural-to-urban travel volumes. The resulting average speeds, delay and DMVT proportions, by road class at each congestion level on urbanized and other metropolitan area roads are calculated, as is the resulting average per mile congestion fees paid, if any, and overall VHD by vehicle group. Calculate Mpg Mpkwh Adjustments: Adjustments to fuel efficiency (MPG and MPKwhr) for all vehicle groups resulting from traffic congestion, congestion fees, ITS speed smoothing (i.e.Â active traffic management which reduces speed variation), and EcoDriving are calculated. The fuel-speed curves vary by road class, congestion powertrains (LdIce, LdHev, LdEv, HdIce) and, where applicable, vehicle type relative to reference speeds by road class. The adjustments are based on drive-cycle level simulation research (Bigazzi &amp; Clifton 2011). Note that no adjustments are made for ITS policies (standard and speed smoothing policies) or EcoDrive programs on other road classes (non-freeway or arterials) and non-urbanized roads, which are assumed to be uncongested. Adjust Household Vehicle MPg Mpkwh: Implements the fuel efficiency (MPG and MPKwh) adjustments of household vehicles (including Car Service VMT), reflecting the effects of congestion, congestion fees, ITS speed smoothing, and eco-driving that were calculated elsewhere. These adjustments vary by vehicle powertrain, vehicle type, and the proportion of the households travel that is driven on urban and non-urban roads within the metropolitan area. Joint effects are calculated as the product of congestion speed effects and the maximum of implemented speed-smoothing policies (eco-driving &amp; ITS-speed smoothing). 1.5.2 Household costs and budgets Two adjustments are made in response to household budgets. Auto ownership costs are calculated and an adjustment is made to the number of household owned autos if the costs are greater than switching to a High level Car Service, where available (subject to input limits on Car Service substitutability). Vehicle ownership costs include financing, depreciation, insurance (unless in PAYD program), annual registration fees, and residential parking fees. Additionally, in order to respond to pricing policies and energy costs, VisionEval imposes an operating cost budget limitation. Household VMT is constrained such that annual vehicle operating costs must stay below a maximum share of annual household income, or budget limit. A household-specific average annual vehicle operating costs is first calculated, including out-of-pocket per mile costs for each household owned and Car Service vehicles used by the household, as well as time-equivalent cost (input access times, estimates of VMT at congested speeds, and value of time input). Vehicle operating costs determine the proportional split of VMT across household vehicles. Out-of-pocket costs include the energy, maintenance, repair, &amp; tires, road use taxes (including EV surcharge and optional calculation of fee to fully recover road costs), work/non-work parking, PAYD insurance, input share of carbon and other social costs, as well as CarService fees by the household. Note that time-equivalent costs are only used to allocate travel between household vehicles (including car services used by the household). Time-equivalent cost is not used in the balancing of household vehicle operating cost and budget. The following sections describe each module that contributes to this concept. Watch a video overview of costs and budgets 1.5.2.1 Auto Ownership Cost &amp; Adjustment Two steps are required to calculate and adjust auto ownership costs: Calculate Vehicle Own Cost: Average vehicle ownership costs are calculated for each vehicle based on the vehicle type, age, and annual VMT (financing, depreciation, and insurance), annual registration fees (flat and ad valorum), combined with any residential parking fees (if household exceeds free parking limits). To do so, PAYD insurance participation is assigned based on household characteristics (drivers by age, annual mileage, income, location type, vehicle type and age) and input PAYD insurance program participation. The ownership cost is converted into an average vehicle-specific ownership cost per mile by dividing by estimated household VMT per vehicle. Note that PAYD insurance does not affect the cost of vehicle ownership when determining whether a household will substitute car services for one or more of their vehicles. It does affect the out-of-pocket operating cost used in budget limitations on household VMT. Adjust Vehicle Ownership: Household vehicle ownership is adjusted based on a comparison of the cost of owning versus high car service per mile rates, where available. The module identifies all household vehicles in a High car service area, where the car service mileage rate exceeds the households estimated vehicle ownership cost per annual household VMT. The households vehicle table entry changes from Own to HighCarSvc for these vehicles, limited by input assumptions regarding the average likelihood that an owner would substitute car services for a household vehicle (separate values are specified by vehicle type). Other auto ownership values are also updated (e.g., insurance, total vehicles). 1.5.2.2 Auto Operating Cost &amp; Adjustment Three primary adjustments adjustments to auto operating cost are carried out in VisionEval: Calculate Vehicle Operating Cost: A composite per mile cost is calculated as an out-of-pocket cost for various household and Car Service vehicle VMT (see below), combined with cost equivalent of travel time (access time and travel time at congested speeds times value of time (VOT)). Total costs result from applying this vehicle-specific cost rate to each vehicles VMT, where VMT is split among household vehicles (including car services used by household members) as a (reciprocal) function of this vehicle-specific composite cost rate: Vehicle maintenance, repair, and tire cost (MRT) costs are calculated as a function of the vehicle type, powertrain and vehicle age based on data from the American Automobile Association (AAA) and the Bureau of Labor Statistics (BLS). Fuel and energy costs are calculated as energy rates time average fuel efficiency (miles per gallon or Kwhr electricity). Gas taxes are federal, state and local per gallon taxes to cover road costs. For Electric vehicles, an equivalent per mile cost is calculated and can be applied to some or all electric vehicles ($/gallon or EV vehicle surcharge tax). Other Road Cost Recovery taxes (i.e.Â VMT tax) is a user input. If the (optional) BalanceRoadCostsAndRevenues module is run, an extra VMT tax is calculated that recovers household share of road costs, consistent across all model households. Congestion fees are calculated average congestion price ($/mile) for travel on urbanized roads in the Marea multiplied by the proportion of household travel occurring on those roads. Carbon fee and other social cost fees are carbon cost per mile is calculated as the input carbon price times the average household emissions rate (grams/mile), a VMT-weighting of all vehicles in the household. Of the other social costs, some are per gallon (non-EV vehicle miles) others per mile (regardless of powertrain). The full per mile costs are discounted to only reflect the input proportion of social cost paid by user. Daily parking costs from work parking costs (workers who pay for parking) and other parking cost (cost of parking for shopping, etc.) are summed and divided by the household DMVT. Note that residential parking costs are included in the vehicle ownership not per mile cost calculations. Pay-as-you-drive (PAYD) insurance is defined for participating households as the sum of the annual insurance cost for all the household vehicles is divided by the annual household VMT. Car-service costs are the cost of using a car service (dollars/mile) is a user input by car service level (Low, High). Balance Road Costs And Revenues: Optionally, an extra mileage tax ($/mile) for household vehicles needed to make up any difference in the cost of constructing, maintaining, and operating roadways and the revenues from total road cost fees including fuel, VMT, and congestion charges. Optionally, an additional mileage fee ($/mile) on household travel is calculated that would fully pay for roadway costs attributable to household vehicle travel. The cost of existing and new freeway and arterial lane-miles by Marea is calculated from the difference in input lane-miles relative to the base year and input unit road costs (constructing, maintaining, and operating). Reductions in lane-miles are ignored. The proportion of road costs attributable to households is set as the ratio of household VMT divided by the sum of household (including CarService), commercial service, and car-equivalent heavy truck VMT (multiply by PCE). Average road taxes collected per household vehicle mile are calculated as a weighted average of the average road tax per mile of each household (calculated by the CalculateVehicleOperatingCost module) using the household VMT (calculated by the BudgetHouseholdDvmt module) as the weight. Currently no annual fees contribute to road cost recovery. Budget Household Dvmt: Household VMT is adjusted to keep within the households vehicle operating cost budget, based on the historic maximum proportion of income the household is willing to pay for vehicle operations. This proportions varies with income. The households DMVT is then reduced as needed to keep annual out-of-pocket vehicle operating cost within that share of the households annual income. Annual vehicle operating costs include the households VMT times their out-of-pocket per mile vehicle costs, adding credits for selected annual payments (annual work parking fee if in a work parking cash-out-buy-back program, annual vehicle insurance if in a PAYD insurance program, and annual auto ownership costs if car service program reduced auto ownership). The module relies on aggregate survey data from the U.S. Bureau of Labor Statistics (BLS) Consumer Expenditure Survey (CES) for years 2003-2015. 1.6 Processing VisionEval is designed to be easy to install, run, and summarize, even when comparing scores of different scenarios. It produces consistent and detailed performance metrics. The user can modify the metrics produced by the model or define their own from data exported from the model. There are also several ways to think about validation of the model within the VisionEval mindset. These topics are explored in this chapter. 1.6.1 Running VisionEval VisionEval is implemented entirely in the R statistical language and operates on recent versions of Microsoft Windows. All development work is done there, although macOS and Linux versions are usually distributed. A fully self-contained installer for the more recent production release of VisionEval can be found on the download page. It permits installation of the full VisionEval platform, to include example data, even behind firewalls that prevent access to R Project and GitHub repositories. Once installed the user assembles data into a standard directory structure. Once the model run script is customized by the user it is typically run from a command prompt. Running it in this manner allows several different scenarios to be run at the same time with minimal user interaction. The results can then be mined or visualized using a variety of VisionEval and third-party products. Some users use R Shiny or similar interactive environments for summarizing and visualizing the output from VisionEval. Such an environment is especially useful when comparing key metrics from a large number of scenarios. 1.6.2 Typical outputs VisionEval generates a large set of performance metrics at varying summary levels. Several pre-defined metrics are compiled for mobility, economic, land use, environmental, and energy categories in each model run. They can be tabulated for individual scenarios or compared to other scenarios, as well as visualized using a variety of tools. The intermediate data generated during the various VisionEval module steps can be compiled as performance metrics, both in absolute and per-capita terms and at various geographies. Traditional transportation network metrics such as VMT, vehicle and person hours of travel, and total delay are easily compiled by overall or focused areas within the model. Likewise, emission estimates and fuel consumption are tabulated. These can be viewed in standard reports or in VEScenarioManager files, especially when comparing such values between scenarios. One example of a set of region-wide performance metrics used by Oregon DOT includes: Mobility Daily per capita VMT Annual walk trips per capita Daily Bike trips per capita Economy Annual all vehicle delay per capita (hours) Daily household parking costs Annual HH vehicle operating cost (fuel, taxes, parking) Annual HH ownership costs (depreciation, vehicle maintenance, tires, finance charge, insurance, registration) Land Use Residents living in mixed use areas Housing type (SF: MF) Environmental Annual GHG emissions per capita HH vehicle GHG/mile Commercial vehicle GHG/mile Transit Vehicle GHG/mile Energy Annual all vehicle fuel consumption per capita (gallons) Average all vehicle fuel efficiency (net miles per gallon) Annual external social costs per households (total/% paid) 1.6.3 Exporting data Most of the data generated during a VisionEval model run can be exported (using exporter.R) if desired for further analyses. The user can then mine and visualize the data using a variety of open source and proprietary tools. This provides the user with considerable flexibility for creating more detailed statistics than those provided by the program. These VisionEval outputs might further serve as inputs to other models (e.g., emissions models, economic impact models) and visualization tools, and compilation of additional performance metrics. 1.6.4 Validation Setting up the model includes the steps required to apply the model for a given study. It is somewhat related to validation, both for informing what types of studies that VisionEval are appropriately sensitive to and interpreting the results. See the Getting Started page on the wiki for an overview of getting started initially. Validation is the assessment of a models suitability for its intended purpose, often informed by comparisons against information not used in its original development. In traditional transportation planning models the comparison of observed versus modeled link flows is often a key component of validation. VisionEval is a data-driven model in that most of its inputs values are exogenously defined rather than emergent behavior from complex mathematical equations. Its aggregate representation of travel demand dictates that it be validated at the same level, with an emphasis on a wider number of comparisons than many traditional models. The metric used in validation can range from relatively few, such as per-capita mobility estimates (e.g., VMT and VHT by mode), to a large number of more detailed targets. Examples of the latter include comparisons to external sources (e.g., HPMS data, DMV data), sensitivity tests of key variables, and comparison to comparable communities. An example of detailed validation criteria used by the Oregon DOT provides examples of these targets. There are several options for making adjustments in order to calibrate and validate the models. These adjustments vary in difficulty, and the most appropriate approach varies by module. From easiest to most difficult the options for making adjustments are: Self-calibration: Several of the modules are self-calibrating in that they automatically adjust calculations to match input values without intervention by the user.[Selected value should be validated to confirm the calculations are done correctly] Adjustment of model inputs: Some modules allow the user to optionally enter data that can be used to adjust the models to improve their match to observed conditions. Model estimation data: Several modules use data specific to the region where the model is deployed, such as household synthesis. Functions within each module generate cross-tabulations required from these data. Census PUMSCensus PUMS data from Oregon were used to develop the original models, and should be replaced with PUMS data for the modeled area. Model estimation scripts: An advanced user or developer can make adjustments to the model code itself in order to facilitate better matching observed local behavior or patterns. This, of course, is the most difficult option and opens up potential for significant errors, but it is possible for users that know what they are doing. The main validation targets have historically included household income, vehicle ownership, vehicle miles of travel, and fuel consumption. The number of workers and drivers within each geography have recently become more widely used. These statistical comparisons can be made for the modeled area as a whole or for large geographies nested within them (e.g., Azones, Mareas). Sensitivity tests should be performed to evaluate the reasonableness (eg. correct direction and magnitude) of the VisionEval output estimates. Comparable community applications of VisionEval may also provide a reasonableness check that the model is functioning appropriately. Note that HPMS definition of VMT differs from that used in VisionEval. VisionEval reports on all household travel regardless of where it occurs, and adds Commercial vehicle and Heavy Duty Truck and Bus travel on MPO roads. HPMS reports vehicular travel of all modes on roads within the MPO boundary. Additional detail on validation can be found in this validation document 1.7 Lexicon 5D built form measures The five dimensions considered in designing efficient and sustainable cities include density, design, destination access, distance to transit, and diversity of the built environment. The five dimensions build upon the original 3Ds (density, diversity, and design) advanced by Cervero &amp; Kockelman (1997). These measures are calculated in the Calculate4DMeasures module during household synthesis. access time The time required to get from the origin to the vehicle (or in the case of CarService, the time for the vehicle to get to the traveler) and the time to get from the vehicle to the destination (including time to park the vehicle). These values are defined for vehicles owned by the household and for two levels of CarService (low and high availability levels) in each Bzone. These factors are defined in azone_vehicle_access_times.csv and used by the CalculateVehicleOperatingCost module in the VETravelPerformance package. Additional details age group VisionEval uses the same age groups used in the U.S. Census0-14, 15-19, 20-29, 30-54, 55-64, and 65+ years old. The number of persons in each age group are defined for each synthetic household. Additional details auto operating cost The out-of-pocket costs used to estimate the cost per mile of operating an automobile. These costs include fuel (energy), maintenance, tires, and repairs for all households. In addition, pollution or carbon taxes, parking charges, pay-as-you-drive (PAYD) insurance costs, and road use cost or VMT taxes are included where coded for the households enclosed Bzone. For car service use, the operating cost is the assumed fare per mile. The costs are calculated in the CalculateHhVehicleOperatingCosts module of the VETravelPerformance package. Additional details auto ownership costs The average cost of auto ownership is calculated based upon vehicle type (automobile, light truck) and age using typical cost figures from AAA data. The cost per mile is estimated by dividing the average cost by the household daily VMT estimates produced by the model. A depreciation model is used to adjust this cost based upon the vehicle type, age, and annual miles driven (daily VMT converted into annual miles). The ownership costs represent the full costs of ownership, to include depreciation, financing, insurance, etc. They also include any residential parking cost the household may have. Auto ownership is adjusted when the per-mile cost of owning a car is higher than car service (mobility services) when the latter has high availability. This adjustment is made in the AdjustVehicleOwnership module. Additional details on auto ownership and auto ownership adjustments auto sufficiency Auto sufficiency is achieved when the number of vehicles available to a household is equal to or greater than the number of licensed drivers in a household. A household in auto insufficient when that is not true. Zero-auto households are cases where the household has access to a vehicle. In the age of ubiquitous mobility services this definition may become less important in describing mobility options open to the household. bus-equivalent-miles The total bus revenue miles for a transit system are divided by the assumed transit vehicle type capacities to arrive at bus-equivalent miles of service. The total bus revenue miles for a transit system are divided by the population of the enclosing Marea(s) to compute per capita bus-equivalent miles. Additional details carbon intensity A emissions measure in grams of carbon dioxide equivalents per megajoule of energy. VisionEval uses a well-to-wheels estimate that takes into account not only the emissions resulting from the use of the fuel (tank-to-wheels measures) but also the carbon emissions required to produce and transport the fuel it where it is purchased by consumers. Default values are estimated from various sources in VisionEval. The user can specify different values. These values are used in several places in the VEPowertrainsAndFuels package. Additional details carbon price A carbon price in dollars per ton is used to estimate part of the social cost of emissions in the CalculateVehicleOperatingCost module of the VETravelPerformance package. Additional details CarService This is a synonym for popular ride-sharing services provided by mobility-as-a-service (MaaS) companies. They are also more commonly referred to as mobility services. cash-out/buy-back program Parking cash-out schemes are an employee benefit that enables them to accept taxable cash income in lieu of paid or subsidized parking at the workplace. The cash-out is sometimes combined with discounted transit passes in some places. It is used as an inducement to reduce commuting by auto, especially in single-occupant vehicles. FHWA has an excellent primer on the topic, while many consider Donald Shoups online book a definitive resource on the topic. Census PUMS The Public Use Microsample (PUMS) data are anonymized long form responses from the American Community Survey (ACS) that enable custom tabulations, summaries, and visualizations. The PUMS were formerly associated with each dicennial Census of Households and Population. The samples are anonymized by assigning each to a Public Use Microdata Area (PUMA) of 100,000 or more households. Several multi-dimensional summaries used in model estimation are gleaned from the PUMS that cannot be obtained from other Census data. Data indexed along these multiple dimensions permit the PUMS data to be fused with travel survey data and to create synthetic populations. ACS PUMS data from 2005-19 in annual increments can be accessed from the PUMS website. Data from 1996-2004 can be accessed separately. commercial service The use of vehicles by firms and government agencies for non-personal travel other than the delivery of freight. (e.g., parcel delivery, business meetings, sales calls). Both automobiles and light trucks can be used for commercial services, and are defined both in terms of powertrain and fuel type (gasoline, diesel, or compressed natural gas). Additional details congestion fee The average amount paid per mile in congestion pricing fee. This is an input to the CalculateRoadPerformance module in the VETravelPerformance package. Additional details congestion level Five levels of congestion  none, moderate, heavy, severe, and extreme  are estimated within each Marea by comparing [relative roadway supply] with the aggregate level of daily VMT (demand). Lookup tables are then used to estimate average speeds and delay for freeways and arterials. The effects of four standard operations programs (freeway ramp metering and incident management, arterial signal progression and access control) and optional user-defined programs are included in the calculations. The calculations are carried out in the CalculateRoadPerformance module of the VETravelPerformance package. Additional details dwelling unit type Each household inhabits a dwelling unit that is either a single-family dwelling, a multi-family dwelling, or group quarters. Additional details EcoDrive A term used to describe energy efficient use of vehicles in order to reduce fuel consumption and emissions. Primarily a European pursuit, EcoDriving involves changes to vehicular technology, vehicle navigation and automation systems, and driving techniques. Factors expressing the degree of EcoDriving adoption are applied in the CalculateMpgMpkwhAdjustments module of the VETravelPerformance package. Additional details employee commute options program A voluntary employer-based program aimed at reducing solo commutes by automobile using strategies and incentive tailored towards each specific organization. Strategies range from providing information and management encouragement to use alternative modes of transportation to cash incentives. Cash-out/buy-in programs are one example of the latter. A massDOT guidebook provides extensive information about such programs. In some states such programs are mandatory for large employers. Information on Oregons Employee Commute Options program includes information about conducting employee surveys to demonstrate progress towards commuting trip reduction targets. employment type Zonal employment estimates in VisionEval are made for retail, service, and total employment categories. The delineation of retail and service employment is typically by the two-digit sectors in the North American Industrial Classification System (NAICS). The NAICS system is widely used in most governmental reporting systems. EV surcharge Some states impose a tax on electric vehicles beyond sales tax and vehicle registration fees to make up for the shortfall in gasoline sales tax revenue they might otherwise contribute towards the costs of roadway infrastructure. The methods and rates vary considerably, with some EV owners paying more in sales tax and EV surcharges than most owners of conventional autos. The EV surcharge can be accounted for in the CalculateVehicleOperatingCosts module in the VETravelPerformance package. Additional details freeway lane-miles The sum of the number of lanes multiplied by the length of each freeway segment within a metropolitan area (Marea). The lane-miles of arterials are calculated separated (see roadway lane-miles). Both are created in the AssignRoadMiles module of the VETransportSupply package. Additional details freight vehicle groups see vehicle groups fuel efficiency VisionEval does not simulate driving cycles so uses measures of relative fuel efficiency derived from the USEPAs Physical Emission Rate Estimator (PERE) for different vehicle powertrains during congested conditions. The user-supplied values in congestion_efficiency.csv define the congestion performance of each powertrain relative to best (1.0) and worst (0.0) values. The data are used in the LoadDefaultValues module in the VEPowertrainsAndFuels package. Additional details fuel-speed curves A set of exogenously calculated adjustments to the average fuel economy of vehicles as a function of the vehicle type (light-duty or heavy-duty), powertrain, and roadway type. The curves and their derivation are described by Bigazzi &amp; Clifton (2011). growth basis The growth in commercial and heavy truck travel over time increase at the same rate as the population does, as firms and establishments are not explicitly modeled in VisionEval. Future year daily VMT is calculated as a function of population or income from heavy trucks or population, income, or household daily VMT for commercial service. Additional details heavy truck A single class of heavy trucks are used to represent all commercial vehicles larger than the light duty trucks included in the commercial service vehicles. The same vehicle operating and emissions parameters specified for other vehicle groups are defined for heavy trucks, and their impacts are calculated in several VisionEval packages. individualized marketing programs Education and public outreach efforts designed to encourage voluntary travel behavior changes. Rather than using broad messages for the entire population this approaches targets specific groups of travelers with information more relevant to them. A concise fact sheet describes its implementation in Oregon. Dill &amp; Mohr (2010) investigate the long-term effectiveness of such programs. intelligent transportation systems (ITS) Systems that integrate information, communications, and advanced vehicular technologies into transportation infrastructure, maintenance, and operations programs to improve mobility and safety. ITS programs are typically centrally controlled by transportation agencies rather than individually autonomous solutions like personal navigation systems. Examples of ITS systems include traveler information systems (e.g., 511 systems, variable message signs), adaptive traffic signal systems, ramp metering, and electronic toll collection. ITS see intelligent transportation systems lambda parameter The assumed split of light-duty household and commercial service vehicles between freeways and arterials is calculated dynamically as the ratio of the respective average travel speeds and an urbanized area specific factor (lambda). The latter adjusts the raw ratio of speeds to match observed percentages using data from 90 urbanized areas. The calculation is carried out in the CalculateRoadPerformance module. Additional details lifecycle A label used to describe the stage of life that a households members are at. This is guessed at in VisionEval as a function of the number of adults, children, and workers in the household. This is assigned in the AssignLifeCycle module. It assumes one of 10 values defined in the 2009 NHTS LIF_CYC variable Additional details location type Each household is classified by whether its enclosing Bzone is located in an urban, town, or rural area. The location_type variable is defined for each Bzone. Additional details metropolitan area (Marea) A select set of Azones that are used in VisionEval to define a common metropolitan area (Marea). Separate VisionEval functions are often applied for metropolitan areas, making use of information on road, transit, and urban mixed used variables only present in the urbanized portion of the metropolitan area. Metropolitan areas in VisionEval are typically equivalent to Census urbanized areas. Additional details mixed use see urban mixed-use National Household Travel Survey (NHTS) The NHTS collects household and traveler information and travel diaries from a random sample of U.S. households. The 2017 survey collected data from 26,000 households selected nationwide and an additional 103,112 additional add-on samples purchased by nine states and four regional and metropolitan planning agencies. The information collected is comparable to the data collected in bespoke household travel surveys. The latest year for which NHTS data are available is 2017, with seven prior surveys dating to 1969 conducted before it. Publicly available data are available with reduced geographic detail (i.e., households only coded to state and place size ranges) for 2017 and prior years. VisionEval was developed using the public use NHTS data from 2001, while the Multimodal Travel package was developed using confidential 2009 NHTS data. NHTS see National Household Travel Survey Non-institutional group quarters Persons living in non-institutional group dwellings (e.g., college dormitories, halfway houses). Persons living in institutional group dwellings are not included in VisionEval, and include hospital patients, prison inmates, and military barracks. out-of-pocket cost The variable costs of automobile usage are considered out-of-pocket costs. They are often considered the perceived cost of using automobiles. In VisionEval they include the cost of fuel and parking or the cost of using CarService. The out-of-pockets are a subset of the auto operating costs. parking fee Parking fees are a subset of parking restrictions. Parking fees can be paid for residential, workplace, or other destinations. parking restrictions Parking restrictions and fees affect households at their places of residence and work, as well as other places they travel to within the modeled area. This information is coded at the Bzone level and typically includes the average number of free parking spaces by dwelling unit type (single family, multi-family, and group quarters), the average daily parking cost, and proportion of workers who pay for parking or participate in a cash out-buy back program. Parking restrictions are used for Azones that are members of a defined metropolitan area (Marea) within the model. Additional details Pay-as-you-drive (PAYD) An insurance program, also known as usage-based insurance, whose premiums are based on actual usage of the insured vehicle as well as how well you drive. It is viewed by some as the emerging standard in insurance. Using a PAYD assumption in VisionEval enables the analyst to more precisely calculate auto ownership cost based on household daily VMT estimates. The proportion of households using PAYD are included in the calculations carried out by the CalculateVehicleOwnCost module. Additional details Passenger car equivalents (PCE) A factor that indicates the number of light-duty vehicles that a heavy truck is equivalent to in terms of vehicle length and lane usage when calculating roadway capacity. It is used in the BalanceRoadCostsAndRevenues module of the VETravelPerformance package. Additional details powertrain VisionEval uses detailed operating and emissions characteristics from several different types of vehicular powertrains, enabling scenarios to be quickly assembled with different assumptions about their mix in future years. Four powertrain types are presently defined in VisionEvalinternal combustion engines (ICE), hybrid electric vehicles (HEV), plug-in hybrid electric vehicles (PHEV), and battery electric vehicles (BEV). The powertrain is assigned to each household vehicle in the AssignHhVehiclePowertrain module. regular households Related and unrelated persons living in the same dwelling unit, but not including persons living in non-institutional group quarters relative roadway supply A synthetic measure that divides the total arterial and freeway lane-miles (i.e., the sum of the length in miles times the number of lanes for each distinct roadway segment) by the sum of the estimated trip lengths for all households. This calculation is carried out for each Marea and year. Thus, it is a measure that only applies in metropolitan areas defined in the model. This value is calculated in the AssignRoadMiles module and is used in several other modules. Additional details road class The vehicle miles of travel (VMT) calculated for households, commercial service, and heavy trucks is split between three classes of roadways  freeways, arterials, and other roadways  in the LoadDefaultRoadDvmtValues module of the VETravelPerformance package. Additional details road costs VisionEval calculates an average mileage tax for household vehicles needed to make up any differences in the cost of constructing, maintaining, and operating roadways from the revenues from fuel taxes and pricing schemes (e.g., VMT taxes, congestion taxes). The latter are calculated based on assumptions about fuel consumption (a function of total daily VMT) and fuel efficiency, although this information can be both an input (default) and optional calculation with user-supplied data. While VisionEval adds this to the auto operating costs of households it is important to note that such costs might not be passed on by governments in future years as assumed by VisionEval. The road costs and revenues are reconciled in the BalanceRoadCostsAndRevenue module in the VETravelPerformance package. Additional details road lane-miles The sum of the number of lanes multiplied by the length of each arterial roadway segment within a metropolitan area (Marea). The lane-miles of freeways are calculated separated (see freeway lane-miles. Both are created in the AssignRoadMiles module of the VETransportSupply package. Additional details road use taxes see road costs short-trip SOV diversion The DivertSovTravel module reduces travel in single-occupant vehicles (SOVs) to account for assumed availability of solo travel alternatives such as bicycles (traditional and electric) and scooters. The user inputs a goal for diverting a proportion of SOV travel within a 20-mile round-trip distance (i.e., for trips longer than 10 miles in one direction). Additional details social costs Present and future generations bear costs due to the impact of transportation that are not fully recouped through auto operating costs or auto ownership costs, such as the costs of abating pollution, security and safety costs, and noise. VisionEval includes these costs in their full-cost accounting approach to calculating costs and benefits. The social cost parameters are defined as inputs to the CalculateVehicleOperatingCost module in the VETravelPerformance package. Additional details speed smoothing A traffic management action or design that reduces the speed variation on freeways and arterials. Note that the introduction of autonomous vehicles will likely achieve this effect even when they only constitute a quarter or more of all vehicles on the roadway (Levin &amp; Boyles 2015, Mahmassani 2016). Thus, speed smoothing might become an important property of future traffic systems that analysts should include in future years even in spite of current local interest in such programs. Additional details transit modes VisionEval includes eight transit modes, which are also called transit service modes in some places in the documentation. The eight modes include demand-responsive (DR), vanpool and similar (VP), standard motor bus (MB), bus rapid transit and commuter bus (RB), monorail or other automated guideway (MG), streetcar or trolley bus (SR), light or heavy rail (HR), and commuter rail (CR) services. The latter includes specialized CR services such as hybrid rail, cable cars, and aerial tramways. Additional details transit service level User-supplied annual revenue miles of service for each of the eight transit modes are translated into bus-equivalents, revenue miles, and ultimately, vehicle miles. The transit service levels are set in the AssignTransitService module in the VETransportSupply package. Additional details transit service miles Bus-equivalent-miles used to compute transit service levels are summed to calculate transit miles by each transit mode. The calculations are carried out in the AssignTransitService module in the VETransportSupply package. Additional details transit vehicle type Different energy consumption and emissions characteristics are defined for vans, buses, and rail transit modes. Additional details travel demand management (TDM) Policies and programs used to discourage travel in single-occupant vehicles in order to achieve safer and more efficient multimodal transportation systems. TDM encompasses a wide variety of initiatives, to include promotion of active transport, public transportation modes, car and bike sharing, and telecommuting. Adjustments in household VMT due to TDM actions are coded in the BudgetHouseholdDvmt module in the VETravelPerformance package. Additional details urban mixed-use A mixed use development or neighborhood is one that includes residential and non-residential land uses in close proximity to one another, allowing for pedestrian access to many desired goods and services. Such places are walkable,bikeable, and encourage a local economy and strong social connections. From a transportation perspective such places are distinguished by their high degree of accessibility using non-motorized modes (active transport). In VisionEval the proportion of each Bzone that falls into this category can either be specified by the user or calculated by the program. If the latter a random sampling from an asserted distribution is used to define whether a household is in a mixed-use area. The density of the enclosing Bzone weights the probability of a household being so classified (i.e., the higher the density the higher probability of being assigned to a mixed-use neighborhood). These calculations are carried on in the CalculateUrbanMixMeasure module of the VEHouseholds package. Additional details urbanized area Collectively the urban location type portion of the metropolitan area (Marea) set of zones. The road, transit and urban mixed use variables only cover this portion of the Marea, which is typically equivalent to a Census urbanized area. value of time (VOT) The opportunity cost of the time that a person spends traveling rather than engaged in other activities. In theory it represents what the traveler would be willing to pay in order to reduce their time traveling. It is a surrogate for the value of travel times savings, which attempts to place a monetary value on the benefits of more efficient travel. While often an important parameter along with the equally influential value of reliability in pricing studies (Kockelman et al.Â 2013, Parsons Brinckerhoff et al.Â 2013) VOT is an average value in VisionEval. It is used in TimeCost calculations in the CalculateVehicleOperatingCost module. Additional details vehicle age The age of each household vehicle is estimated as a function of vehicle type (auto or light truck), household income, and the assumed average vehicle age coded for each vehicle type and Azone. The vehicle age is assigned in the AssignVehicleAge module in the VEHouseholdVehicles package. Additional details vehicle groups Different groups of vehicles are used in VisionEval by different types of users. Automobiles and light trucks are used by households, car service, and commercial service, and are assigned in the VEHouseholdVehicles package. Heavy trucks are treated separately, and three types of vehicles  vans, buses, and rail  are used for transit. Additional details vehicle hours of delay (VHD) An aggregate performance measure usually calculated by subtracting vehicle hours of travel under uncontested conditions from total vehicle hours of travel (VHT). Both measures are approximated for each metropolitan area in VisionEval in the CalculateRoadPerformance module of the VETravelPerformance package. Additional details vehicle operating costs see auto operating costs vehicle ownership costs see auto ownership costs vehicle table A vehicle table is a list of every vehicle owned by a household in VisionEval. It includes the vehicle characteristics, household ID, and the Azone and Marea the household is allocated to. It is created in the CreateVehicleTable module in the VEHouseholdVehicles package. Additional details vehicle type see vehicle groups "],["getting-started.html", "Chapter 2 Getting Started 2.1 Overview 2.2 Installation and Setup 2.3 Running VisionEval 2.4 Requirements", " Chapter 2 Getting Started 2.1 Overview The VisionEval software framework is written in the R programming language for statistical computing and graphics. The purpose of the model system and framework is to enable models be created in a plug-and-play fashion from modules that are also distributed as R packages. A simple R script is used to implement a model by initializing the model environment and then calling modules successively. Video Description of Tool installation, setup, and basic usage This 45 minute video was recorded during a VisionEval Training at Portland State University in September 2019: 2.2 Installation and Setup There are two paths to getting VisionEval running: Install from stand-alone Windows installerDownload a zipped folder with all dependencies include, for a specific version of R. This is the simplest way to quickly get VisionEval on your computer. This uses the installers on the Releases page and further details are available on the Downloads page of visioneval.org. This currently is designed for the Windows operating system. This path is described first. Clone or fork repository If you area a Mac/Linux user, or if you are interested in contributing to the development of VisionEval modules, models, framework, or visualizer, choose this path. Instructions for setting up the VisionEval development environment can be found in the VE-Installer repository. Install for Windows:Get VisionEval Here Note: 583 Mb download! Packaged for R 3.6.1 See this page for other R versions, 3.4.4 - 3.6.0 After installing R 3.6.1 and downloading the VE Installer from the link above, unzip the folder to the destination folder of your choice. The link above will download a .zip file containing the following: - The VisionEval framework code - VE-RSPM, VE-RPAT, VE-GUI, VE-State and VE-ScenarioViewer - All necessary R packages To complete the installation and start VisionEval, simply: - Double-click VisionEval.bat 2.3 Running VisionEval Once you have been welcomed to VisionEval, you can follow the instructions under Running VE Models on the Getting Started page. Your destination folder contains everything you need from the VisionEval sources folder. The installation also creates some convenience functions which will run the model test scenarios or start the VE GUI: - vegui() to start the GUI (navigate to your destination folder to find the scenario run scripts) - verpat() for the VERPAT test model - verpat(scenarios=TRUE) to run multiple scenarios in VERPAT - verpat(baseyear=TRUE) to run the alternate VERPAT sample scenario - verspm() for the VERSPM test model - verspm(scenarios=TRUE) to run multiple scenarios in VERSPM 2.4 Requirements If the above installation steps did not succeed, ensure that you have downloaded the appropriate version of VisionEval to match the version of R that you have installed. 2.4.1 R The current version of VisionEval is built for the latest version of R, 3.6.1. If you currently have another version of R installed, you can go to the GitHub release page to download VisionEval for R. You can find the R 3.6.1 installer for Windows here. 2.4.2 RStudio (optional) Many users find that RStudio is a more user-friendly version of the standard R interface. RStudio is particularly recommended if you plan to clone and explore the Visioneval source code from GitHub. See the VERPAT tutorial for more information on running models. 2.4.3 Running VEGUI to then run a model After installing from the stand-alone installer (path 1, above), you can run the VEGUI using the helper functions vegui(). 2.4.4 Running Multiple Scenarios of a Model After installing from the stand-alone installer (path 1, above), you can run the multiple scenarios examples using the helper functions verpat(scenarios = T) and verspm(scenarios = T). After you run the multiple scenarios tests, you can explore the relationship between input scenarios and results using VEScenarioViewer. You can try the example interactive VERPAT and VERSPM scenario viewers (visualizers) online. See the VERPAT tutorial for more information regarding the visualizers. "],["visioneval-models.html", "Chapter 3 VisionEval Models 3.1 Models 3.2 Definitions 3.3 Model System Objectives 3.4 Model System Layers 3.5 Model Layer Description 3.6 Modules 3.7 Software Framework", " Chapter 3 VisionEval Models VisionEval is a collaborative project to merge the successful GreenSTEP family of strategic planning tools into an open-source framework. The GreenSTEP model was originally developed to assist the Oregon Department of Transportation (ODOT) and its partners in analyzing alternate transportation and land use strategies for reducing greenhouse gas emissions from light-duty vehicles. ODOT made this model and all of the model estimation files available under an open source license. Subsequently several other modeling tools were built from the original GreenSTEP models and code, with various modifications to serve new purposes. These models include: 3.1 Models VERSPM - The RSPM (Regional Strategic Planning Model) was developed by ODOT as an offshoot of the GreenSTEP model to support the preparation of metropolitan area scenario plans. The name reflects a broadening of the policies, beyond state statutory requirements. This model operates largely at the zonal level (i.e.Â inputs and outputs are zone-based). VERPAT - The RPAT (Rapid Policy Analysis Tool) was developed under the federal Strategic Highway Research Program (SHRP2). The model was developed to help planners evaluate the potential effect of growth policies on regional travel. Portions of the GreenSTEP model were used in RPAT, but substantial revisions were made to the code, including use of land use place type categories. This model operates largely at the region or place type level for the entire region. VE-State - The VE-State model is a state level version of VERSPM. Like VERSPM, this model operates at the zonal level, but the zones are larger than their VERSPM counterparts. 3.1.1 Spatial Detail One key distinction between the VERPAT and VERSPM models is the level of spatial detail. - VERPAT operates primarily at the region level and therefore requires inputs at the region or place type level. As shown below, place types are defined as a combination of area type and development type. Area type (or regional role) describes the interdependencies of each neighborhood compared to the rest of the region, e.g.Â how centered is it to jobs in the region. Development type (or neighborhood character) is used to describe the physical characteristics of each neighborhood in isolation. Operating at the place type level simplifies the input data requirements and the spatial precision of outputs while still capturing the effects of the different place types in the region. Take a look at the example model inputs, which has only one input by bzone - population and employment - which represents population and employment for each place type. - VERSPM models the region in zones (in a manner similar to traditional travel model zones), which results in improved spatial resolution of outputs, but which also increases the data development burden. The selection of the right tool therefore depends on a number of factors  available of data, project resources, desired spatial output detail, etc. Take a look at the example model inputs, which has many inputs by bzones. 3.2 Definitions Following are definitions of terms used in this document: Model System A definition for a set of related models and a software framework for implementing that definition. Models built in the modeling system are related by the domains being modeled (e.g.Â travel, energy consumption, hydrology, etc.), the agents being modeled (e.g.Â households, cities, watersheds, etc.), how physical space is represented (e.g.Â zones, grids, cubes, etc.), how time is represented (e.g.Â continuouse vs.Â discrete, independent vs.Â dependent on past states), and other modeling goals and tradeoffs (e.g.Â representational detail, degree of coupling, run times, etc.). The model system definition includes specifications for model modules that can be used in the model system, file structure specifications for organizing model parameters and input data necessary for running a model. The software framework for the model system is a library of code that manages the execution of model modules that are designed to work in the model system. Model A model as used in this document refers to a model such as GreenSTEP that calculates a number of different attributes (e.g.Â household size, household income, number of autos owned, vehicle-miles traveled, etc.) that are composed of a number of components (submodels) that each calculate one or a few attributes. Submodel A submodel is the component of a model that calculates one or a few closely related attributes. Module A module, at its heart, is a collection of data and functions that meet the specifications described in this document and that implement a submodel. Modules also include documentation of the submodel. Modules as made available to users in R packages. Typically a set of related modules is included in a package. Software Framework A software framework is a library of code containing functions that manage the execution of modules. These functions manage all interactions between modules, model system variables, and a datastore. Datastore A datastore is a file or set of files for storing all of the inputs used by modules and outputs produced by modules. 3.3 Model System Objectives The GreenSTEP model and related models are disaggregate strategic planning models. They are disaggregate because, like many modern transportation models, they simulate behavior at the individual household level rather than at a more aggregate zonal level. This enables the assessment of how prospective policies or other changes could have different impacts on different types of households (e.g.Â low income vs.Â high income). The models are strategic planning models because they are built to support long-range strategic planning decisions such as community visioning, policy development, and scenario planning. Strategic planning processes most often need to consider a number of possibilities about how the future may unfold and a range of potential actions that might be taken. As a consequence, models built to support strategic planning need to be responsive to a large number of variables and be capable of running quickly so that a large number of runs can be done to explore the decision space. The VisionEval model system supports the development of these types of models. The design objectives for this model system are: Modularity The model system will allow new capabilities to be added in a plug-and-play fashion so models can be improved and extended and so improvements developed for one model can be easily shared with other models. Models are composed of modules that contain all of the data and functionality needed to calculate what they are intended to calculate. Loose Coupling This objective is closely related to the modularity objective. Loose coupling is necessary if modules are to be added to or removed from models in a plug-and-play fashion. Loose coupling means that the parameter estimation for a submodel is independent of the parameter estimation of any other submodel. It also means that dependencies be modules are well defined and minimized. Most communication between modules is carried out through the transfer of data that is mediated by the software framework. Openness The VisionEval software framework and all modules developed to operate in the framework will be completely open. Being open means more than sharing ones work. It means completely revealing ones work so that others can assess how the module works. All module code, parameters, data, and specifications will be open to inspection and licensed using an open source license (e.g.Â Apache 2) that allows users to use, modify, and redistribute as they see fit. In addition, modules will provide access to data and code to estimate the model that the module implements. Finally, a module will contain complete documentation that users may use to document the model that the module is a part of. Geographic Scalability The model system will enable models to be applied at a variety of geographic scales including metropolitan areas of various sizes, states of various sizes, and multi-state regions. Although models are applied at different scales, they share common geographic definitions to enable modules to be more readily shared between models built for the modeling system. Data Accessibility Model results will be saved in a datastore that is easy to query. Results can be filtered, aggregated, and post-processed to produce desired performance measures. Regional Calibration Capability Modules will have built in capbilities for estimating and calibrating submodel parameters from regional data when necessary. Speed and Simplicity Since the intent of the model system is to support the development of strategic planning models, it is important that the models be able to address a large number factors and be able to model a large number of scenarios. For this to occur, the framework needs to run efficiently and modules need to be simple and need to run quickly. Operating System Independence The model system will run on any of the 3 major operating systems; Windows, Apple, or Linux. As is the case with GreenSTEP and related models, the VisionEval model system is written in the R programming language. Well-supported and easily installed R implementations exist for these operating systems. Modules will be distributed as standard R packages that can be compiled on all operating systems. Code that is written in another language may be included in a module package as long as it can be compiled in an R package that is usable on all 3 operating systems. To help ease maintenance of VE, it is recommended to minimize the use of new R libraries, and to reuse R libraries used by existing VE modules when possible. Preemptive Error Checking The model system will incorporate extensive data checking to identify errors in the model setup and inputs at the very beginning of the model run. Error messages will clearing identify the causes of the errors. The objective of early error checking is to avoid model runtime errors that waste model execution time and are difficult to debug. 3.3.1 Model System Software Design Approach The VisionEval software framework uses many of the ideas from the functional programming paradigm to create a modeling system that is modular and robust. The framework is implemented in the R programming language which is largely a functional programming language having a well developed system for managing packages of modules. This section describes how the VisionEval model system incorporates functional programming design ideas and the reason for using the R programming language for implementing those ideas. 3.3.1.1 Functional Programming Inspirations for System Design There are a number of programming paradigms for organizing software and implementing modular system designs. The VisionEval system design is most inspired by the functional programming paradigm. This section describes key characteristics of the functional design paradigm that influence the VisionEval model system design to achieve the design objectives. The functional programming paradigm views computing as sequences of data transformations where a functions successively process a data stream with the outputs of one function becoming the inputs of the next. Functions are data processing machines with defined inputs and outputs. Given the same set of inputs, functions always produce the same set of outputs. Although functions have requirements for the data they process, they are not bound to the data in the same way as functions (methods) in the object-oriented programming paradigm. This characteristic of the functional paradigm fits well with the loose coupling objective for the model system where model modules only interact with one another through the transfer of data mediated by the framework software. The design is for each module to act like a function with the framework software calling it, providing the data the module needs, and saving the data that the module produces. Another key characteristic of the functional programming paradigm is that functions should have no side effects. A function should only change the state of variables within its scope and should have no effects on the system outside of its scope. The only way that a function interacts with the rest of the program is by returning the result of its calculations to whatever function called it. Such functions are called pure functions. This characteristic makes software more testable, reliable, and maintainable. It is key aspect of the VisionEval model system design. The system is designed so that modules act like pure functions. The only thing that they do is return the results of their calculations to the software framework. They do not make any changes to program variables outside their scope and they do not read from or write to files. This approach makes the framework very robust and modular because code within a module can be changed without affecting any other module. The framework software itself is also designed to minimize side effects in order to make it more robust and maintainable. Global state variables for a model run are kept to a minimum. Almost all model run state information is kept in the ModelState.Rda file (Section 6.6). A common datastore holds all of the results of model computations. The only side effects in the framework code are reading model definition and input files, reading and writing to the common datastore, and writing to a log file. A third key characteristic of some functional programming languages is the extensive use of data typing. While compiled languages in general use data typing to check the properness of functions and expressions when a program is compiled, some functional programming languages like Haskell and Elm make extensive use of defining and checking different data types for function inputs and outputs. They also include a type notation system for documenting functions. This makes it easier to check and understand the code. An analogous approach is used in the VisionEval system design. Each module includes specifications for all data that it consumes and all data that it produces. This enables the framework software to check that modules will work properly together and enables a model to be checked thoroughly before it is run so to eliminate run time errors. It also clearly documents to others what data the module uses and what it produces. 3.3.1.2 Use of the R Software Environment to Implement the Model System The VisionEval model system is built in the R programming language for statistical computing and graphics. R is an open-source variant of the S programming language developed at Bell Labs but is more functional in nature than S. Although R was primarily developed to be an interactive programming environment for data analysis, the language has a full set of features that enables it to be used for all steps in the modeling process from data preparation and cleaning through model implementation and output visualization. The language is augmented by thousands of packages supporting data analysis, programming, and visualization. The interactive nature of the language, range of capabilities, and large number of supporting packages enabled the the GreenSTEP model to be developed in an agile manner in a relatively short period of time. At the time, no other programming language had this range of capabilities and the large number of supporting packages. The VisionEval model system uses the R language for the following reasons: 1) The existing code base for the GreenSTEP model and related models is written in R. Writing the VisionEval software framework in R enables this code base to be moved to the new framework with much less effort than would be required if it had to be rewritten in another programming language. 2) R is open-source software that is available on all major operating systems so the model system will be operating system independent. 3) R has a very good and well tested package system for packaging modules that is well supported with documentation and build tools. The package system and development tools also include easy-to-use capabilities for documentation, including literate programming. This simplifies the development of the software framework and simplifies the process for module developers to produce complete and well documented modules. 4) R has the most extensive set of statistical and other data analysis packages available. Because of this, almost any type of model can be estimated using R and therefore, modules can contain not only full documentation of model estimation, but also scripts that allow model estimation to be replicated and rerun using regional data. 5) R is an interpreted language with capable (and free) integrated development environments. Because the state of objects can be easily queried, the process of building and testing models is simplified. This makes it easier for modelers who dont come from a computer science background to develop models to be deployed in the model system. 6) Although as an interpreted language, R is slower than compiled languages, most of the core functions are vectorized functions that are written in C. This means that R programs can carry out many operations very quickly. In addition, it is relatively easy to call functions written in compiled languages such as C++, C, and Fortran to R so that if a pure R model is not fast enough, portions can be written as functions in a compiled language and linked to the R code. 7) R has a large user base and so it is relatively easy for users to get answers to programming questions. 3.4 Model System Layers The VisionEval model system is composed of 3 layers: 1) Model: The model layer defines the structure of the model and organizes all of the modules into a coherent model. The model layer includes a module run script, model definition files, model input files, and common datastore. 2) Modules: The module layer is the core of a model. Modules contain all of the code and parameters to implement submodels which are the building blocks of models. 3) Software Framework: The software framework layer provides the functionality for controlling a model run, running modules, and interacting with the common datastore. These layers are illustrated in Figure 1. Following sections describe the design and specifications for each layer. Figure 1. Overview of VisionEval Model System A VisionEval model is built from a set of compatible modules, a set of specifications for the model and geography, a set of scenario input files, and a simple R script that initializes and runs the model. Following is a simple example of a model script: #Initialize and check the model initializeModel( ParamDir = &quot;defs&quot;, RunParamFile = &quot;run_parameters.json&quot;, GeoFile = &quot;geo.csv&quot;, ModelParamFile = &quot;model_parameters.json&quot;, LoadDatastore = FALSE, DatastoreName = NULL, SaveDatastore = TRUE ) #Run modules for all forecast years for(Year in getYears()) { runModule( ModuleName = &quot;CreateHouseholds&quot;, PackageName = &quot;SimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule( ModuleName = &quot;PredictWorkers&quot;, PackageName = &quot;SimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule( ModuleName = &quot;PredictLifeCycle&quot;, PackageName = &quot;SimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule( ModuleName = &quot;PredictIncome&quot;, PackageName = &quot;SimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) ... } A full model run script is shown in Appendix A. The script calls two functions that are defined by the software framework; initializeModel and runModule. The initializeModel function initializes the model environment and model datastore, checks that all necessary modules are installed, and checks whether all module data dependencies can be satisfied. The arguments of the initializeModel function identify where key model definition data are found. The initializeModel function allows users to load an existing datastore. This functionality is useful for scenario management, retaining and building upon the results of previous model runs. For example, a set scenarios could be managed in the following manner using the capability for loading datastores: - A base year model is calibrated and validated - Future land use scenarios are developed and run (e.g.Â 3 different scenarios having different growth and development assumptions). Each land use scenario loads the datastore for the base year model. - Future transportation policy scenarios are developed and run for each land use scenario (e.g.Â 3 different scenarios having different policy assumptions). Each transportion policy scenario loads the datastore for a land use scenario model run. The runModule function, as the name suggests, runs a module. The arguments of the runModule function identify the name of the module to be run, the package the module is in, and whether the module should be run for all years, only the base year, or for all years except for the base year. This approach makes it easy for users to combine modules in a plug-and-play fashion. One simply identifies the modules that will be run and the sequence that they will be run in. This is possible in large part for the following reasons: 1) The modules are loosely coupled. Modules only communicate to one another by passing information to and from the datastore or by calling the services of another module. Module calling is described in detail in section 8.1.2.2. 2) The framework establishes standards for key shared aspects of modules including how data attributes are specified and how geography is represented. 3) Every module includes detailed specifications for the data that are inputs to the module and for the data that are outputs from the module. These data specifications serve as contracts that the framework software enforces. The runModule function and how it is implemented by the software framework allows developers and advanced users to create different module variants and save them in a package having a different name. Users can then identify the alternative package in the runModule function call to use the variant version. For example, the VEPowertrainsAndFuels package includes data and modules that model key vehicle powertrain characteristics such as powertrain type proportions (ICEV, HEV, PHEV, BEV) by vehicle type and vehicle model year. A developer or advanced used could create package version that reflects Energy Information Agency (EIA) projections and name it VEPowertrainsAndFuelsxEIA, and another version which reflects California zero emissions vehicle standards and name it VEPowertrainsAndFuelsxCAZEV. The user could then specify which package version they want to run in the runModule function call. This functionality also allows developers and advanced users to test out module changes without altering an official package. These features and how they are designed are described in detail in following sections. 3.5 Model Layer Description The model layer is composed of: - The directory (i.e.Â folder) and file structure for organizing scenario inputs and model parameters; - Model parameter files describing the model geography (consistent with standard definitions) and global parameters; - The model run script that lists the model execution steps; and, - The datastore which stores all of the data produced during the execution of the model. Each of these components is described in the following subsections. 3.5.1 Model Directory Structure A model application has a very simple directory structure as shown in the following representation of a directory tree. my_model | run_model.R | &lt;ModelState.Rda&gt; | &lt;logXXXX.txt&gt; | &lt;datastore&gt; | | |____defs | | run_parameters.json | | model_parameters.json | | geo.csv | | units.csv | | deflators.csv | | |____inputs | filename.csv | filename.csv | ... The overall project directory, named my_model in this example, may have any name that is allowed by the operating system the model is being run on. One file is placed in this top level directory by the user, run_model.R. Three additional files, denoted in the diagram by angled brackets, are created in the course of checking and running the model. The run_model.R file, introduced in the previous section, initializes the model environment and datastore, checks that all necessary packages are installed, checks whether data dependencies can be satisfied, and then runs modules in a specified sequence. Data checks are performed before any modules are run to catch any errors. This saves time and the aggravation that occurs when a model run fails in midstream due to incorrect data inputs or other errors due to incorrect model setup. Data checking in advance is possible because every module includes detailed specifications for its input and output data. All scenario input files are checked against specifications to determine whether the required data exist and are correct. In addition, the state of the datastore is simulated in the order that each module will be run to determine whether the data each module needs will be available in the datastore. After the model has been initialized and all all data checks are satisfactory, the modules are executed in the sequence prescribed in the script. The ModelState.Rda file is a R binary file that contains a list that holds key variables used in managing the model run. The file is created when the model run is initialized and is updated whenever the state of the datastore changes. Framework functions read this file when necessary to validate data and to determine that datastore read and write operations can be completed successfully. This file is described in more detail in section 6.6. The logXXXX.txt file is a text file that is created when the model is initialized. This log file is used to record model run progress and any error or warning messages. The XXXX part of the name is the date and time when the log file is created. The datastore is a file or directory that contains the central datastore for the model. The VisionEval framework supports multiple types of datastore. Currently, two types are supported. The preferred type (designated RD) stores datasets in the form of native R data files. Files are stored in a hierarchical directory structure with the top-level directory named Datastore. Another type (designated H5) stores all data in a single binary HDF5 file. The logical structure of these two datastore types are very similar and are described in detail below. Users specify the datastore name in the parameters.json file (see below). The defs directory contains all of the definition files needed to support the model run. Five files are required to be present in this directory: run_parameters.json, model_parameters.json, geography.csv, deflators.csv, and units.csv. The run_parameters.json file contains parameters that define key attributes of the model run and relationships to other model runs. The file is a JSON-formatted text file. The JSON format is used for several reasons. First, it provides much flexibility in how parameters may be structured. For example a parameter could be a single value or an array of values. Second, the JSON format is well documented and is very easy to learn how to use. It uses standard punctuation for formatting and, unlike XML, doesnt require learning a markup language. Third, files are ordinary text files that can be easily read and edited by a number of different text editors available on all major operating systems. There are also a number of commercial and open source tools that simplify the process of editing and checking JSON-formatted files. The run_parameters.json file specifies the following parameters: Model The name of the model. Example: Oregon-GreenSTEP. Scenario The name of the scenario. Example: High-Gas-Price. Description A short description of the scenario. Example: Assume tripling of gas prices. Region The name of the region being modeled. Example: Oregon. BaseYear The base year for the model. Example: 2015. Years An array of all the forecast years that the model will be run for. Example: [2025, 2050]. DatastoreName The name of the datastore. It can be any name that is valid for the operating system. It is recommended that this be named datastore.h5 for HDF5 datastores and Datastore for R data file datastores. DatastoreType A 2-letter abbreviation identifying the datastore type: RD for R data file datastore, H5 for HDF5 datastore. The framework uses the DatastoreType abbreviation to choose the functions used to initialize the datastore and interact with it. Seed This is a number that modules use as a random seed to make model runs reproducible. RequiredVEPackages Lists all of the VisionEval packages that contain modules that are called by the model. Note that the required packages that are listed must be consistent with the packages that are identified in the run_model.R script. The model_parameters.json can contain global parameters for a particular model configuration that may be used by multiple modules. For example, a model configuration to be a GreenSTEP model may require some parameters that are not required by a model configuration for an RSPM model. Parameters in this file should not include parameters that are specific to a module or data that would more properly be model inputs. While this file is available to establish global model parameters such as the value of time, it should be used sparingly in order enhance transferrability of modules between different models. The geography.csv file describes all of the geographic relationships for the model and the names of geographic entities in a CSV-formatted text file. The CSV format, like the JSON format is a plain text file. It is used rather than the JSON format because the geographic relationships are best described in table form and the CSV format is made for tabular data. In addition, a number of different open source and commercial spreadsheet and GIS programs can export tabular data in a CSV-formatted files. The structure of the model system geography is described in detail in Section 6.2 below. The units.csv file describes the default units to be used for storing complex data types in the model. The VisionEval model system keeps track of the types and units of measure of all data that are processed. The model system recognizes 4 primitive data types, a number of complex data types (e.g.Â currency, distance), and a compound data type. The primitive data types are data types recognized by the R language: double, integer, character, and logical. The complex data types such as distance and time define types of data that have defined measurement units and factors for converting between units. The compound data type combines two or more complex data types whose units are defined in an expression (e.g.Â MI/HR where MI is the complex unit for miles and HR is the complex unit for hours). The units.csv describes the default units used to store complex data types in the datastore. The file structure and an example are described in more detail in Section 6.3 below. The deflators.csv file defines the annual deflator values, such as the consumer price index, that are used to convert currency values between different years for currency demonination. The file structure and an example are described in more detail in Section 6.4 below. The inputs directory contains all of the input files for a scenario. All input files are CSV-formatted text files. Each module specifies what input files it needs and names and types of data to be included in the needed files. There are several requirements for the structure of input files. These requirements are described in section 6.5 below. 3.5.1.1 Model Geography The design of the model system includes the specification of a flexible standard for model geography in order to fulfill the objectives of modularity and geographic scalability. As a standard, it specifies levels of geographical units, their names, their relative sizes, and the hierarchical relationships between them. It is flexible in that it allows geographical boundaries to be determined by the user and it allows the units in some geographical levels to be simulated rather than being tied to actual physical locations. Allowing simulation of one or more geographic levels enables modules to be shared between models that operate at different scales. For example a statewide model and a metropolitan area model could use the same module for assigning households to land development types even though the statewide model lacks the fine scale of geography of the metropolitan model. Following is the definition of the geographic structure of the VisionEval model system: Region The region is the entire model area. Large-scale characteristics that dont vary across the region are specified at the region level. Examples include fuel prices and the carbon intensities of fuels. Azones Azones are large subdivisions of the region containing populations that are similar in size to those of counties or Census Public Use Microdata Areas (PUMA). The counties used in the GreenSTEP and EERPAT models and metropolitan divisions used in the RSPM are examples of Azones. Azones are used to represent population and economic characteristics that vary across the region such as demographic forecasts of persons by age group and average per capita income. The Azone level of geography must represent actual geographic areas and may not be simulated. Bzones Bzones are subdivisions of Azones that are similar in size to Census Block Groups. The districts used in RSPM models are examples of Bzones. Bzones are used to represent neighborhood characteristics and policies that may be applied differently by neighborhood, for example in the RSPM: District population density is a variable used in several submodels; An inventory of housing units by type by district is a land use input; and, Carsharing inputs are specified by district. In rural areas, Bzones can be used to distinguish small cities from unincorporated areas. Bzones may correspond to actual geographic areas or may be simulated. Bzone simulation greatly reduces model input data requirements while still enabling the modeling of land-use-related policies and the effects of land use on various aspects of travel behavior. In VE-RPAT models, Bzones are simulated as place types which characterize the intensity and nature of development. In VE-State models, Bzones are synthesized to represent characteristics likely to be found in an actual set of Bzones within each Azone. Mareas Mareas are collections of Azones associated with an urbanized area either because a portion of the urbanized area is located in the Azone or because a substantial proportion of the workers residing in the Azone work at jobs located in the urbanized area. Metropolitan models typically only have one assigned Marea whereas state models may have several. The model system requires that each Azone may be associated with only one Marea. It is also required that all Azones be associated with an Marea. A special Marea named None is used to apply to Azones that are not associated with any urbanized area. Mareas are used to specify and model urbanized area transportation characteristics such as overall transportation supply (transit, highways) and congestion. They are also used to specify large scale land-use-related characteristics and policies in models that use Bzone synthesis. Geographical relationships for a model are described in the geography.csv file contained in the defs directory. This file tabulates the names of each geographic unit (except for Region) and the relationships between them. Each row shows a unique relationship. Where a unit of geography is not explictly defined (i.e.Â it will be simulated), NA values are placed in the table. Appendix B shows examples of the geography.csv file where only Azones are specified and where Azones and Bzones are specified. It should be noted that there are no naming conventions for individual zones. The user is free to choose what conventions they will use. 3.5.1.2 6.3. Data Types, Units, and Currency Deflators A key feature of the VisionEval model system that enables modules to be bound together into models is a data specifications system. All datasets that a module requires as inputs and datasets that that a module produces must be specified according to requirements. Section 8 describes these specifications in more detail. This section provides an introduction to the TYPE and UNITS specification requirements to provide context for understanding the units.csv file in the defs directory. The TYPE attribute for a dataset identifies the data type. The UNITS specification identifies the units of measure. The TYPE and UNITS specifications are related. The TYPE attribute affects the values that may be specified for UNITS attribute and how the framework processes the units values. The model system recognizes 3 categories of data types: primitive, complex, compound. The primitive category includes the 4 data types recognized by the R language: double, integer, character, and logical. A dataset that is specified as one of these types has no limitations on how the units of measure are specified. The complex category currently includes 13 data types such as currency, distance, and area as shown in the table below. A dataset that is one of these types is limited to specified unit values. For example, the allowed units for the distance type are MI, FT, KM, and M (for mile, foot, kilometer, and meter). The compound category is composed of the compound data type. For compound data, units are represented as an expression involving the units of complex data types. For example, a dataset of vehicle speeds can be specified as having a TYPE that is compound and UNITS that are MI/HR. The type is compound because it is made up of two complex types; distance and time. The units are an expression containing distance and time units and the / operator. The * (multiplication) operator may also be used in the units expression for a compound data type. Appendix C documents all the types and units in more detail. Although the complex and compound data types limit what values the units attributes may have, specifying these types enables the framework software to take care of unit conversions between modules and the datastore. For example, say that a model datastore contains a dataset for Bzone population density having units of persons per square mile. In this case the TYPE attribute for the data would be compound and the UNITS would be PRSN/SQMI. If a module which calculates household vehicle travel needs population density measured in persons per acre, the module would specify the UNITS as PRSN/ACRE and the framework would take care of converting the density values from the units used in the datastore to the units requested by the module. This simplifies matters for module developers and reduces the likelihood of errors due to data conversions. Although the units specified by a module for a complex data type may be any of the recognized units (e.g.Â for distance - MI, FT, KM and M), this flexibility does not apply to the datastore. Complex data is stored in the datastore in predefined ways to limit potential confusion and simplify unit conversions. The default units file (units.csv) in the defs directory declares the default units to use for storing complex data types in the datastore. This file has two fields named Type and Units. A row is required for each complex data type recognized by the VisionEval system. The listing to date of complex types and the default units in the demonstration models are as follows: Type Units Description currency USD U.S. dollars distance MI miles area SQMI square miles mass LB pounds volume GAL gallons time DAY days energy MJ megajoules people PRSN persons vehicles VEH vehicles trips TRIP trips households HH households employment JOB jobs activity HHJOB households &amp; jobs For currency data its not sufficient to convert values to different units, its also necessary to convert currency values between years to account for the effects of inflation. Because the model parameters estimated in different modules may come from datasets collected in different years, and because model users will most likely want to report currency values in current year terms, it is necessary to convert currency values between years. Currency denominated datasets are stored in the datastore as base year values. When a module needs to use a currency denominated dataset, the framework converts base year values to the year values that the module needs. If a module calculates a currency denominated dataset that is to be saved in the datastore, the framework converts those values from the currency year that the module uses to base year values to save in the datastore. The software framework takes care of the process of converting currency values between years automatically and in a consistent manner. This eliminates the need for model developers to convert currency values. It also allows more flexibility for model users and module developers, and for the evolution of the VisionEval model system with new and improved modules, because it eliminates the need to establish a reference year that is to be used for all modules and models. Modules specify the year of a currency dataset using a modifier to the the UNITS specification. This is done by adding a period and 4-digit year to the specification. For example, the UNITS specification for year 2000 dollars would be USD.2000. Note, however, that this convention does not apply to specifications for currency data that is read in from an input file because the model user is free to establish any currency year they choose for currency inputs. In those cases, the year is specified in the input file. This is explained in Section 6.4. Currency values are converted between years using a deflator series is defined for the model in the deflators.csv file in the defs directory. This file has 2 columns, Year and Value. Values are needed for all years specified by modules used in a model in addition to the base year and any other years that currency values in input files will be denominated in. For example, if the modules to be used in a model use dollar denominated values for the years 2000 and 2009, the model base year is 2010, and some input data are denominated in 2015 dollars, then at a minimum the deflators.csv file must include deflators for those years. A more flexible approach would be to have an annual series of deflators running from the earliest year through the latest year. Note: it is not necessary to specify deflators for any future model years (e.g.Â 2030, 2050). All modules in the model system make calculations in constant (uninflated) dollar terms. Deflators are only used to convert user input values to a constant base and to convert values to the year that is consistent with a modules estimation data. The UNITS value may also specify a multiplier option for complex and compound data types. This capability exists because modules may use data that are represented in thousands or millions when numbers are very large. For example, freeway and arterial construction costs may be represented in thousands of dollars per mile. A multiplier option is added to a units name by adding a period and then the multiplier expressed in scientific notion where the leading digit must be a 1 (e.g.Â 1e3 for thousands). For currency units, the multiplier option must follow the year notation. For example, 2010 dollars expressed in thousands would be expressed as USD.2010.1e3. Miles traveled expressed in millions would be MI.1e6. 3.5.1.3 6.4. Model Inputs The inputs directory contains all of the model inputs for a scenario. A model input file is a table that relates one or more input fields to geographic units and years. Because of the tabular nature of the data, all input files are CSV-formatted text files. The first row of the file contains the headers identifying the data in each column. The columns include each of the data items specified in the input specifications for the module the input file is used for. In addition, the file may be required to have columns labeled Geo and Year depending on which of the following 4 types the input file is: Inputs apply to the entire region and to all years: In this case, the input file consists of one data row and each column corresponds to a data item. Inputs apply to parts of the region and to all model years: In this case, the input file consists of one data row for each geographic area and the file must include a column labeled Geo that is used for identifying the geographic areas. For example, if the input file applies to Azones and the model has 10 Azones, the file must have 10 rows in addition to the header. The Geo column identifies each of the Azones. Note that only the geographic areas specified in the geo.csv may be included in this file. If unlisted geographic areas are included, the model run will stop during initialization and the log will contain messages identifying the error(s). Inputs apply to the entire region but vary by model year: In this case, the input file consists of one data row for each model year and the file much include a column labeled Year that is used for identifying the model years. For example, if the model run parameters specify that the model is to be run for the years 2010 and 2040, the input file must contain 2 rows in addition to the header. The Year column identifies each of the model run years. Note that only the specified model run years may be included in this file. Note that the file may include data for other years in addition to the data for the module run years. When the inputs are processed, the non-model-run year data will be ignored. Inputs apply to parts of the region and vary by model year: In this case the input file consists of one data row for each combination of geographic area and model year. The file must include a Geo column and a Year column. There must be as many rows as there are combinations of geography and years. For example if an input file applies to Azones and the model specifies 10 Azones and 2 model run years, the file must have 20 rows to accommodate all the combinations in addition to a header row. As with the case described above, inputs may be included for non-model-run years as well as model-run years. By convention, input file names which include inputs that vary by level of geography, include the level of geography in the input file name. File names should be descriptive. Following are some examples: - azone_hh_pop_by_age.csv - azone_hhsize_targets.csv - bzone_dwelling_units.csv The name of an input file and the names of all the columns except for the Geo and Year columns are specified by the module that requires the input data. In addition to specifying the file and column names, the module specifies: - The level of geography the inputs are specified for (e.g.Â Region, Azone, Bzone, Czone, Marea); - The data types in each column (e.g.Â integer, double, currency, compound); - The units of the data in each column (e.g.Â MI, USD); and, - Acceptable values for the data in each column. The module section describes these specifications in more detail below. Appendix D shows examples of the two types of input files. The field names of the input file (other than the Geo and Year fields) can encode year and unit multiplier information in addition to the name of the data item. This is done by breaking the name into elements with periods (.) separating the elements as follows: For currency data type: Name.Year.Multiplier. For example, TotalIncome.2010.1e3 would be the field name for total income in thousands of 2010 dollars. For all other data types: Name.Multiplier. For example, TotalDvmt.1e6 would be the field name for total daily vehicle miles traveled in millions. Where: Name is the dataset name. This must be the same as specified in the module that calls for the input data. Year is the four-digit representation of the year that the currency values are denominated for. For example if a currency dataset is in 2010 dollars, the Year value would be 2010. The field name for a currency field must include a Year element. Multiplier is an optional element which identifies the units multiplier. It must be expressed in scientific notation (e.g.Â 1e3) where the leading digit must be 1. This capability exists to make it easier for users to provide data inputs that may be more conveniently represented with a smaller number of digits and an exponent. For example, annual VMT data for a metropolitan area or state is often represented in thousands or millions. The the VisionEval framework uses the year and multiplier information to convert the data to be stored in the datastore. All currency values are stored in base year currency units and all values are stored without exponents. 3.5.1.4 6.5. The Datastore VisionEval changes the approach to storing model data from that of the GreenSTEP and RSPM models and related models. Those models stored data primarily in R data frames as binary files (rda files). The largest of these files are the simulated household files which store all of the information for all simulated households in an Azone (e.g.Â counties in GreenSTEP). All the data for households in the Azone are stored in a single data frame where each row corresponds to a record of an individual household and the columns are household attributes. Vehicle data for households are stored as lists in the data frame. This approach had some benefits: - Storage and retrieval are part of the R language: one line of code to store a data frame, and one line of code to retrieve; - It is easy to apply models to data frames; and - Vehicle data can be stored as lists within a household data frame, eliminating the need to join tables. The simplicity of this approach helped with getting GreenSTEP from a concept into an operational model quickly. However, several limitations have emerged as GreenSTEP and related models have been used in various applications including: - Large amounts of computer memory are required when modeling Azones that have large populations. This necessitates either expanding computer memory or limiting the size of Azones; - It is not easy to produce summary statistics from the simulated household files for a region; and - The number of non-household data files has proliferated in order to store various aggregations for use in the model and for later summarization. Finally, because the GreenSTEP/RSPM approach did not define a consistent data model, it does not sufficiently support the goal of modularity, and it does not support the use of alternative datastores. To overcome these limitations the VisionEval model system specifies a consistent datastore design. This design has been implemented in two types of datastores. One uses R binary files within a hierarchical directory structure. The other uses the HDF5 file format for storing model data. The HDF5 file format was developed by the National Center for Supercomputing Applications (NCSA) at the University of Illinois and other contributors to handle extremely large and complex data collections. For example, it is used to store data from particle simulations and climate models. It also is the basis for the new open matrix standard for transportation modeling, OMX. VisionEval datastores are organized in a column-oriented and hierarchical structure illustrated below. The lowest level of the hierarchy are datasets which are vectors of data values. This matches well the data objects (lists and data frames) commonly used in R programs and calculation methods which are commonly vectorized. Datasets in R datastores are R binary files. In HDF5 datastores, they are a portion of the HDF5 file and are called datasets in the HDF5 nomenclature. Datasets are organized in tables which are groups of datasets that all have the length. For example in the diagram below, Azone is a dataset containing the names of each of the Azones, and Age0to14 is a dataset containing the number of people of age 0 to 14 in each each Azone. These datasets and all those listed directly below them are contained in the Azone table. In R datastores, tables are represented by directories. In HDF5 nomenclature they are called groups. Tables that represent values for a particular model run year are grouped together. The year groups are named with the model run years (e.g.Â 2010, 2050) and they contain tables for every geographic level as well as Household, Worker, and Vehicle tables. Tables that contain datasets whose values dont vary by model run year are contained in the Global group (directory). These include tables of model parameters, geographic tables, and any other table of datasets that apply to all model run years. |____Global | |____Model | | ... | | | |____Azone | | ... | : | |____2010 | |____Region | | ... | | | |____Azone | | Azone | | Marea | | Age0to14 | | Age15to19 | | Age20to29 | | Age30to54 | | Age55to64 | | Age65Plus | | ... | | | |____Bzone | | ... | | | |____Marea | | ... | | | |____Household | | ... | | | |____Worker | | ... | | | |____Vehicle | | ... | : | | |____2050 | |____ ... | | ... : : This structure is adequate to store all of the data that are used by the GreenSTEP/RSPM models and their offshoots. It can also be easily expanded to serve new modeling capabilites. For example if a module is added to model building stock, a Buildings table could be added to each forecast year group. In addition, this structure can accommodate matrix data as well as vector data, if a future module makes use of a distance matrix, that matrix could be added to either the Global group or the forecast years groups. Note that the Azone table in the diagram includes an Marea dataset. This datasets identifies the Marea associated with each Azone. Every table includes datasets that enable data to be joined between tables. Some are geographic as in the example. Others use other identifiers. For example the Worker table includes a household identifier. Although the tables include the identifiers which enable data to be joined between tables, the VisionEval framework does not include special features for joining datasets that come from different tables. That is done by the module code. 3.5.1.5 6.6 The Model State File The model state file, ModelState.Rda, maintains a record of all of the model run parameters and an inventory of the contents of the datastore. The software framework functions use this information to control the model run and to perform checks on module and data validity. The model state file contains a list which has the following components: - Model: The name of the model - Scenario: The name of the scenario - Description: A description of the scenario - Region: The name of the region being modeled - BaseYear: The model base year - Years: A list of years the model is being run for - DatastoreName: The file name for the datastore - DatastoreType: The datastore storage type. Currently implemented types are RD (R data) or H5 (HDF5). - Seed: The value to be used for the random seed - RequiredVEPackages: The names of VisionEval module packages that are used in the model run - LastChanged: The date and time of the last change to the model state - Deflators: A data frame of deflator values by year - Units: A data frame of default units for complex data types - RequireVEPackages: A list of all the VisionEval packages that must be installed in order for the model to run - LogFile: The file name of the log file - Geo_df: A data frame containing the geographic definitions for the model - BzoneSpecified: A logical value identifying whether Bzones are specified for the model - CzoneSpecified: A logical value identifying whether Czones are specified for the model - Datastore: A data frame containing an inventory of the contents of the datastore - ModuleCalls_df: A data frame identifying the sequence of runModule function calls and arguments - ModulesByPackage_df: A data frame identifying the modules located in each of the VisionEval packages required to run the model - DatasetsByPackage_df: A data frame identifying the datasets located in each of the VisionEval packages required to run the model The Datastore component is updated every time the data is written to the datastore. This enables framework functions to know the contents of the datastore without having to access the datastore. The Datastore component keeps track of all groups and datasets in the datastore and their attributes such as the length of tables and the specifications of datasets. 3.5.2 7. Overview of Module and Software Framework Layer Interactions Modules are the heart of the VisionEval model system. Modules contain all of the code and parameters to implement submodels that are the building blocks of models. Modules are distributed in standard R packages. A VisionEval module package contains one or modules that implement related functions. For example, the VESimHouseholds package contains a set of modules related to creating a set of synthetic households and giving those households attributes including persons by age, workers by age, life cycle, and income. A module contains the following components: - Documentation of the module and of submodel parameter estimation/calibration. - Data and code for estimating the submodel(s) implemented by the module; - Functions for estimating/calibrating parameters using regional data supplied by the user (if necessary); - Data specifications for data that is to be loaded from input files, data that is to be loaded from the datastore, and data that is to be saved to the datastore; and, - One or more functions for implementing the module. The software framework provides all of the functionality for managing a model run. This includes: - Checking module specifications for consistency with standards; - Checking input files for compliance with module specifications; - Processing input files to load the input data into the datastore; - Simulating the data transactions in a model run to check whether the datastore will contains the data each module needs when the module needs it; - Loading module packages; - Running modules in accordance with the run_model.R script; - Fetching from the datastore, data that is required by a module; - Saving to the datastore, data that a module produces and specifies is to be saved; and, - Converting measurement units and currency years when necessary. When the software framework runs a module it does several things. First, it reads in the module data specifications and the main module function which performs the submodel calculations. Then it reads in all the datasets from the datastore that the module specifies. It also reads in the contents of the model state file. It puts these datasets into an input list and then it calls the main module function with this input list as the argument to the function call. This list, which by convention is called L, contains 4 components: Global, Year, BaseYear, and G. The Global, Year, and BaseYear components contain lists which are composed of table components which are in turn composed of dataset components. The Global component relates to the global group in the datastore. The Year component relates to the the group in the datastore for the model run year. For example, if the model run year is 2040, the Year component will contain data that is read from the 2040 group in the datastore. The BaseYear component relates to the group in the datastore which represents the base year for the model. For example if the model base year is 2010, the BaseYear component will contain data that is read from the 2010 group in the datastore. The list contains a BaseYear component as well as a Year component because modules may need to compute changes in a dataset between the base year and the model run year. Each of these components will contain a component for each table the the module requests data from. The table component is also a list which then contains components for all the requested datasets. For example, if a module needs the household income (Income) and household size (HhSize) datasets from the Household table in the model run year (e.g.Â 2040), the Year component of L will contain a Household component which will contain an Income component and a HhSize component. The G component of L contains the model state list which contains all the information described in Section 6.6. If a module calls another module, the list also contains a component named with the alias the module assigns to the called module. This component includes Global, Year, and BaseYear components containing datasets identified in the specifications for the called module. Module calling is explained in detail in section 8.1.2. When the module executes, it returns a list containing all of the information that the module specifies is to be written to the datastore. By convention, this list is called R. This list also has Global, Year, and BaseYear components which are structured in the same way that L is structured. The table and dataset components of the list also include some attributes (metadata) which are described in Section 8. 3.6 Modules All modules are made available in the form of standard R packages that meet framework specifications. Packages may be in source form or installed form. The following presentation refers to the source form of VisionEval packages. When a package is installed (built) the R system runs the scripts in the R directory and saves functions that are defined within and datasets that are saved by the script. The structure of this installed package is not covered by this document with the exception of the module_docs directory in the installed package. If the module developer follows the guidelines for module documentation, a module_docs directory will be included in the installed package. This will include module documentation in the form of markdown documents. A package may contain more than one module. The package organization follows the standard organization of R packages. The structure is shown in the following diagram. The components are described below in the order that they are presented in the diagram. The file names are examples. VESimHouseholds | DESCRIPTION | NAMESPACE | LICENSE | | |____R | | CreateHouseholds.R | | PredictWorkers.R | | CreateEstimationDatasets.R | | ... | | |____inst | | NOTICE | |____extdata | | pums_households.csv | | pums_households.txt | | pums_persons.csv | | pums_persons.txt | | ... | | |____data-raw | | some_processed_model_dataset.rda | | ... | | |____tests |____scripts | | test.R | | test_functions.R | | verspm_test.R | | vestate_test.R | |____verspm | | logs | | | Log_CreateHouseholds.txt | | | ... | | | | ModelState.Rda | |____vestate | | ... | | ... The DESCRIPTION and NAMESPACE files are standard files required by the R package system. There are good sources available for describing the required contents of these files (R Packages), so that will not be done here. Most of the entries in these files can be produced automatically from annotations in the R scripts that will be described next, using freely available tools such as devtools and RStudio. The LICENSE file contains the text for the Apache 2 license which is the open source license that should be used for VisionEval packages. The accompanying Apache 2 NOTICE file is in the inst directory. 3.6.0.1 8.1. The R Directory The R directory is where all the R scripts are placed which define the modules that are included in the package. Each module is defined by a single R script which has the name of the module (and the .R file extension). A module script does 4 things: 1) It specifies the model and estimates model parameters. Model estimation datasets may be processed by the script or may be loaded from other sources (see below). 2) It defines all the specifications for data that the module depends on. 3) It defines all of the functions that implement the submodel. 4) It includes test code used during module development When a binary (installed) package is built from the source package, each R script is run; estimation datasets are processed, model parameters are saved, module specifications are saved, functions are parsed into a more efficient form. Following section describe the structure of a module R script in more detail. An example of the AssignTransitService module script from the VETransportSupply package is included in Appendix E. By convention, the module script is organized into 4 sections reflecting the list above. Following sections 8.1.1 to 8.1.4 explain each module script section in detail. Section 8.1.1 explains how model specification and estimation is handled. Subsection 8.1.1.1 focuses in on the handling of model estimation data which, in some cases, may use specialized scripts. Section 8.1.2 explains how to write module specifications which tell the framework how the module is to be run, what input data are to be processed, what data are to be retrieved from the datastore, and what data are to be saved to the datastore. Subsection 8.1.2.1 focuses in on the OPTIONAL specification that module developers can use to enable optional model inputs. Subsection 8.1.2.2 focues in the the CALL specification that enables modules to call other modules to perform calculation services. Section 8.1.3 describes how to write a main function and supporting functions to implement a module. Section 8.1.4 explains test code that is commonly included in a module to assist the module developer in the module development process. Finally, Section 8.1.5 explains a special module named Initialize that may be included in a package. The purpose of this module is to enable module developers to include specialized input data checks and preparation. 3.6.0.1.1 8.1.1 Model Specification and Estimation As the name suggests, this section of the script handles tasks related to processing model estimation data, model specification, and model parameter estimation. This should be done in a manner which enables others to understand the structure of the model, the data it is based on, and how parameters are estimated. It should enable others to replicate the process and to test modifications. Typically, model specification and estimation code does 4 things: loading the data to be used, defining functions that carry out key specification and estimation procedures, applying the functions to produce objects that define the model(s), and saving the model objects. Models vary in their complexity. In some modules the model may simply be an algorithm with decision rules or asserted parameters. In this case, there is no need to fill out this section of the script. For example, the AssignLifeCycle module in the VESimHouseholds package assigns lifecycle codes to households using rules regarding the numbers of adults, children, and workers in the household. In cases like this, the model estimation and specification section will be empty. In other cases, models will be quite complex and this section of the script will be extensive. For example, the CalculateHouseholdDvmt module does the following in the process of building models and comprises hundreds of lines of code: - Estimate a binomial logit model of the probability that a household has any DVMT - Estimate a linear model of the amount of household DVMT given that a household has any DVMT - Estimate a dispersion factor for the linear model so that the variance of modeled DVMT matches the observed variance - Simulate household DVMT 1000 times by stochastically applying the binomial and linear models - Calculate quantiles of simulated DVMT - Estimate a linear model of average DVMT using the simulation data - Estimate models of the DVMT quantiles as a function of the average DVMT Model estimation data preparation may also be extensive. Whether it is or not, documenting the data used in building a model and making those data available are key to making the models reproducible and extensible. Moreover, for some modules it is important that model users be able to have model parameters reflect the conditions for their region. For example, the CreateHouseholds, PredictWorkers, and PredictIncome modules use Census public use microdata sample data for the region to estimate parameters. There are several ways that model estimation data can be handled in the VisionEval model system. These are described in detail in Section 8.1.1.1. The model estimation code should also save objects to use in documenting the modules such as: 1. Model summary statistics such as is produced when a model object (such as a linear model estimated using the lm function) is processed by the summary function; 2. Data frames, tables, and matrices; and, 3. Graphs or other static data visualizations. The first two should be saved as objects just like any other object saved to implement a model. It is suggested that these documentation objects be stored in a list along with the model that they document. For example, follow is a portion of the PredictIncome.R script which saves (and documents) a list which contains the household income model including documentation of the summary statistics for the model. #Save the household income model #------------------------------- #&#39; Household income model #&#39; #&#39; A list containing the income model equation and other information needed to #&#39; implement the household income model. #&#39; #&#39; @format A list having the following components: #&#39; \\describe{ #&#39; \\item{Type}{a string identifying the type of model (&quot;linear&quot;)} #&#39; \\item{Formula}{makeModelFormulaString(IncModel_LM)} #&#39; \\item{PrepFun}{a function that prepares inputs to be applied in the linear model} #&#39; \\item{OutFun}{a function that transforms the result of applying the linear model} #&#39; \\item{Summary}{the summary of the linear model estimation results} #&#39; \\item{SearchRange}{a two-element vector specifying the range of search values} #&#39; } #&#39; @source PredictIncome.R script. &quot;HHIncModel_ls&quot; usethis::use_data(HHIncModel_ls, overwrite = TRUE) The Summary component of this list shows the summary statistics for the model. As explained in the module documentation section below, this can be automatically inserted into the module documentation. It is recommended that the capture.output function be used rather than the print function to capture model summary statistics because the print function will insert line numbers. This method can be used to save other text that can then be inserted into module documentation. This example also shows how objects are documented and saved. It can also be useful to save data frames, tables, matrices to use in the model documentation. These can be saved like any other data object and then inserted as described in the module documentation section. Graphs or other visualizations are saved in a different manner. If these are saved as an image file in png format, they can be inserted into the module documentation. They must be saved to the data directory to do so. Following is an example: #Plot comparison of observed and estimated income distributions png( filename = &quot;data/reg-hh-inc_obs-vs-est_distributions.png&quot;, width = 480, height = 480 ) plot( density(IncObs_), xlim = c(0, 200000), xlab = &quot;Annual Dollars ($2000)&quot;, main = &quot;Distributions of Observed and Predicted Household Income \\nRegular Households&quot; ) lines(density(IncEst_), lty = 2) legend(&quot;topright&quot;, legend = c(&quot;Observed&quot;, &quot;Predicted&quot;), lty = c(1,2)) dev.off() There are many ways that a module developer can code the model specification and parameter estimation procedures. However this is done, the code should be well organized and commented so that it is understandable to reviewers. All code should follow the VisionEval coding guidelines. In addition, it is highly recommended that code be grouped into functions to aid understandability and reduce unnecessary code repetition which can lead to errors. Complex functions should be well documented. Function documentation is done using Roxygen syntax. Following is an example of the code which estimates a housing choice model (single-family vs.Â multifamily) in the PredictHousing module of the VELandUse package. #Define a function to estimate housing choice model #-------------------------------------------------- #&#39; Estimate housing choice model #&#39; #&#39; \\code{estimateHousingModel} estimates a binomial logit model for choosing #&#39; between single family and multifamily housing #&#39; #&#39; This function estimates a binomial logit model for predicting housing choice #&#39; (single family or multifamily) as a function of the supply of housing of #&#39; these types and the demographic and income characteristics of the household. #&#39; #&#39; @param Data_df A data frame containing estimation data. #&#39; @param StartTerms_ A character vector of the terms of the model to be #&#39; tested in the model. #&#39; @return A list which has the following components: #&#39; Type: a string identifying the type of model (&quot;binomial&quot;), #&#39; Formula: a string representation of the model equation, #&#39; PrepFun: a function that prepares inputs to be applied in the binomial model, #&#39; OutFun: a function that transforms the result of applying the binomial model. #&#39; Summary: the summary of the binomial model estimation results. #&#39; @import visioneval stats #Define function to estimate the income model estimateHousingModel &lt;- function(Data_df, StartTerms_) { #Define function to prepare inputs for estimating model prepIndepVar &lt;- function(In_df) { Ah &lt;- c(&quot;Age15to19&quot;, &quot;Age20to29&quot;, &quot;Age30to54&quot;, &quot;Age55to64&quot;, &quot;Age65Plus&quot;) Out_df &lt;- data.frame(t(apply(In_df[, Ah], 1, function(x) { AgeLvl_ &lt;- 1:5 #Age levels HhAgeLvl_ &lt;- rep(AgeLvl_, x) HeadOfHh_ &lt;- numeric(5) if (max(HhAgeLvl_) &lt; 5) { HeadOfHh_[max(HhAgeLvl_)] &lt;- 1 } else { if (all(HhAgeLvl_ == 5)) { HeadOfHh_[5] &lt;- 1 } else { NumMidAge &lt;- sum(HhAgeLvl_ %in% c(3, 4)) NumElderly &lt;- sum(HhAgeLvl_ == 5) if (NumMidAge &gt; NumElderly) { HeadOfHh_[max(HhAgeLvl_[HhAgeLvl_ &lt; 5])] &lt;- 1 } else { HeadOfHh_[5] &lt;- 1 } } } HeadOfHh_ }))) names(Out_df) &lt;- paste0(&quot;Head&quot;, Ah) Out_df$HhSize &lt;- In_df$HhSize Out_df$Income &lt;- In_df$Income Out_df$RelLogIncome &lt;- log1p(In_df$Income) / mean(log1p(In_df$Income)) Out_df$Intercept &lt;- 1 Out_df } EstData_df &lt;- prepIndepVar(Data_df) EstData_df$SingleFamily &lt;- as.numeric(Data_df$HouseType == &quot;SF&quot;) #Define function to make the model formula makeFormula &lt;- function(StartTerms_) { FormulaString &lt;- paste(&quot;SingleFamily ~ &quot;, paste(StartTerms_, collapse = &quot;+&quot;)) as.formula(FormulaString) } #Estimate model HouseTypeModel &lt;- glm(makeFormula(StartTerms_), family = binomial, data = EstData_df) #Return model list( Type = &quot;binomial&quot;, Formula = makeModelFormulaString(HouseTypeModel), Choices = c(&quot;SF&quot;, &quot;MF&quot;), PrepFun = prepIndepVar, Summary = summary(HouseTypeModel) ) } #Estimate the binomial logit model #--------------------------------- #Load the household estimation data Hh_df &lt;- VESimHouseholds::Hh_df #Select regular households Hh_df &lt;- Hh_df[Hh_df$HhType == &quot;Reg&quot;,] Hh_df$Income[Hh_df$Income == 0] &lt;- 1 #Estimate the housing model HouseTypeModelTerms_ &lt;- c( &quot;HeadAge20to29&quot;, &quot;HeadAge30to54&quot;, &quot;HeadAge55to64&quot;, &quot;HeadAge65Plus&quot;, &quot;RelLogIncome&quot;, &quot;HhSize&quot;, &quot;RelLogIncome:HhSize&quot; ) HouseTypeModel_ls &lt;- estimateHousingModel(Hh_df, HouseTypeModelTerms_) rm(HouseTypeModelTerms_) As can be seen in this example, most of the code defines and documents a function which estimates a binomial choice model given a estimation dataset and a list of model variable names. This function does a number of things including transforming estimation data, creating a model formulation from the list of independent variables, estimating the variables, and returning a list of model components. After the function is defined, it is applied using the model estimation data and a specified list of independent variables. This approach to model specification and estimation makes it easy for a module developer to try out different model specifications, measuring their relative performance, and documenting the results. The approach used in this example takes advantage of some helper functions in the framework software. The makeModelFormulaString function takes an R model formula object and converts it into a string representation. When the model is applied in the module, the string is parsed and evaluated with a data frame of independent variables. This provides a compact way to store a model and a fast way to apply it. Several other framework functions assist with applying models in this form. The applyBinomialModel applies a binomial logit model. The applyLinearModel applies a linear regression model. Both of these functions enable the models to self calibrate to match an input target. For example, the PredictHousing module adjusts the constant of the model so that the proportions of households in single-family vs.Â multifamily dwelling units matches the housing supply in the area. The applyBinomialModel does this efficiently by calling the binarySearch function which implements a binary search algorithm. Module developers are not limited to using the previous approach to specifying and implementing a model. Most if not all R functions that estimate models also have companion prediction functions to apply the estimated model to a new set of data. This is often the simplest and best way to apply a model. One drawback of this approach, however, is that the object that is returned by the model estimation function and that is used in making a prediction is often very large because it includes a copy of all of the estimation data and datasets used to calculate model statistics. If the model estimation datasets are very large, this will pose a problem for keeping the module package in a central repository. In that case, the module code needs to remove parts of the model object that are not necessary for prediction. For example, the AssignVehicleOwnership module in the VEHouseholdVehicles package uses an ordered logit model to predict household auto ownership for households owning one or more vehicles. The model is estimated using data from the 2001 NHTS so the model object returned by the estimation function (clm in the ordinal package) is large. Portions of the model object not needed by the corresponding prediction function are removed. It is often a matter of trial and error to find out how much can be removed from the model object without adversely affecting the prediction function. #Model number of vehicles of non-zero vehicle households EstData_df &lt;- EstData_df[EstData_df$ZeroVeh == 0,] EstData_df$VehOrd &lt;- EstData_df$NumVeh EstData_df$VehOrd[EstData_df$VehOrd &gt; 6] &lt;- 6 EstData_df$VehOrd &lt;- ordered(EstData_df$VehOrd) AutoOwnModels_ls$Metro$Count &lt;- clm( VehOrd ~ Workers + LogIncome + DrvAgePop + HhSize + OnlyElderly + IsSF + IsUrbanMixNbrhd + LogDensity + TranRevMiPC, data = EstData_df, threshold = &quot;equidistant&quot; ) #Trim down model AutoOwnModels_ls$Metro$Count[c(&quot;fitted.values&quot;, &quot;model&quot;, &quot;y&quot;)] &lt;- NULL After a model has been estimated, the model objects which embody the model need to be saved as part of the package. There is a standard way of doing this which is illustrated in the following example of saving the model in the PredictHousing module. The housing prediction model object is a list called HouseTypeModel_ls. This list is saved in the data directory of the package. By saving the model object in the data directory, it can be addressed directly in the module function that applies the model. Note how documentation is handled. #Save the housing choice model #----------------------------- #&#39; Housing choice model #&#39; #&#39; A list containing the housing choice model equation and other information #&#39; needed to implement the housing choice model. #&#39; #&#39; @format A list having the following components: #&#39; \\describe{ #&#39; \\item{Type}{a string identifying the type of model (&quot;binomial&quot;)} #&#39; \\item{Formula}{makeModelFormulaString(HouseTypeModel)} #&#39; \\item{PrepFun}{a function that prepares inputs to be applied in the model} #&#39; \\item{Summary}{the summary of the binomial logit model estimation results} #&#39; \\item{SearchRange}{a two-element vector specifying the range of search values} #&#39; } #&#39; @source PredictHousing.R script. &quot;HouseTypeModel_ls&quot; usethis::use_data(HouseTypeModel_ls, overwrite = TRUE) The use_data function in the usethis package saves the data and documention correctly in the package and simplifies the procedure for doing so. Although model estimation code is usually included in the module script, in some instances it may be more understandable to estimate the models for several modules in one script. This is what is done in the CreateSimBzoneModels.R script in the VESimLandUse package. This script estimates all the models for modules in the package. Model estimation is handled this way because the same model estimation dataset is used for all the models and the models build upon each other. Including all the model estimations in one file makes it easier to code and easier to review. 3.6.0.1.1.1 8.1.1.1 Model Estimation Datasets Model estimation datasets may be read in from several sources. If model estimation data are large and are used by multiple modules located in different packages, then they may be housed in their own package. This is the case with the 2001 NHTS data which are in the VE2001NHTS package. The estimation data in the package can be directly addressed in the model estimation code using the standard PackageName::DatasetName notation as shown in the following example: Hh_df &lt;- VE2001NHTS::Hh_df If estimation data are retrieved from another package as in this case, the DESCRIPTION file for the package must list the package from which the data are retrieved in the Imports section. For example, the Imports section of the VEHouseholdTravel package reads as follows. The VE2001NHTS package is listed as are other packages that this package relies on. Imports: visioneval, devtools, VE2001NHTS, data.table If estimation data is to be shared among several modules that are all within the same package, then all the data preparation can be done in one script which is run first when the package is built. This approach is used in the VESimHouseholds package. The CreateEstimationDatasets.R script loads and processes a Census public use microdata sample dataset that is used in estimating models in 3 modules that are in the package (CreateHouseholds, PredictWorkers, PredictIncome). When, as in this case, a separate script is used to prepare the estimation data for several modules in the package, the data are saved in the data directory of the package and the other scripts load the dataset from that directory. The following extracts shows how a processed PUMS household dataset (a data frame named Hh_df) is saved in the CreateEstimationDatasets.R script. The lines starting with #' are data documentation in roxygen2 form. Although data documentation can be tedious, especially for large datasets, it is should always be done and is an important aspect of the VisionEval model system. #&#39; Household data from Census PUMS #&#39; #&#39; A household dataset containing the data used for estimating the #&#39; CreateHouseholds, PredictWorkers, PredictLifeCycle, PredictIncome, and #&#39; PredictHouseType modules derived from from year 2000 PUMS data for Oregon. #&#39; #&#39; @format A data frame with 65988 rows and 17 variables (there may be a #&#39; different number of rows if PUMS datasets are used for different areas): #&#39; \\describe{ #&#39; \\item{Age0to14}{number of persons in 0 to 14 age group} #&#39; \\item{Age15to19}{number of persons in 15 to 19 age group} #&#39; \\item{Age20to29}{number of persons in 20 to 29 age group} #&#39; \\item{Age30to54}{number of persons in 30 to 54 age group} #&#39; \\item{Age55to64}{number of persons in 55 to 64 age group} #&#39; \\item{Age65Plus}{number of persons 65 years or older} #&#39; \\item{Wkr15to19}{number of workers in 15 to 19 age group} #&#39; \\item{Wkr20to29}{number of workers in 20 to 29 age group} #&#39; \\item{Wkr30to54}{number of workers in 30 to 54 age group} #&#39; \\item{Wkr55to64}{number of workers in 55 to 64 age group} #&#39; \\item{Wkr65Plus}{number of workers 65 years or older} #&#39; \\item{AvePerCapInc}{average per capita income of PUMA, nominal $} #&#39; \\item{HouseType}{housing type (SF = single family, MF = multifamily)} #&#39; \\item{Income}{annual household income, nominal 1999$} #&#39; \\item{HhSize}{number of persons in household} #&#39; \\item{HhType}{household type (Reg = regular household, Grp = group quarters)} #&#39; \\item{HhWeight}{household sample weight} #&#39; } #&#39; @source CreateEstimationDatasets.R script. &quot;Hh_df&quot; devtools::use_data(Hh_df, overwrite = TRUE) rm(Hh_df) If as in this case, one script processes the estimation data for use by several modules, it is important that the data processing script be run prior to the other scripts when the package is built. Otherwise the processed estimation data will not be available to the module packages that need it. Managing the order of package script processing is handled by the Collate section of the package DESCRIPTION file. Following is an example from the VESimHouseholds package: Collate: &#39;CreateEstimationDatasets.R&#39; &#39;CreateHouseholds.R&#39; &#39;PredictWorkers.R&#39; &#39;PredictIncome.R&#39; &#39;AssignLifeCycle.R&#39; The best way to establish the proper collation (i.e.Â ordering) of script execution is to carry out model estimation through the definition and invocation of a function, and to have an (include?) statement which lists the estimation data processing script in the function documentation using Roxygen syntax. When the package documentation is compiled, the Collate section of the package DESCRIPTION file will be filled out properly. Following is an example of function documentation containing a (include?) statement from the CreateHouseholds.R module script in the VESimHouseholds package: #Define a function to estimate household size proportion parameters #------------------------------------------------------------------ #&#39; Calculate proportions of households by household size #&#39; #&#39; \\code{calcHhAgeTypes} creates a matrix of household types and age #&#39; probabilities. #&#39; #&#39; This function produces a matrix of probabilities that a person in one of six #&#39; age groups is in one of many household types where each household type is #&#39; determined by the number of persons in each age category. #&#39; #&#39; @param HhData_df A dataframe of household estimation data as produced by the #&#39; CreateEstimationDatasets.R script. #&#39; @param Threshold A number between 0 and 1 identifying the percentile #&#39; cutoff for determining the most prevalent households. #&#39; @return A matrix where the rows are the household types and the columns are #&#39; the age categories and the values are the number of persons. #&#39; @include CreateEstimationDatasets.R #&#39; @export If model estimation data are only used by a single module, then the processing code should be included in the module script. There are several places where model estimation datasets may be located depending on the size of the datasets, whether the datasets were preprocessed using other tools or scripts, and whether the intention of the module developer is to enable model users to customize model estimation to reflect data for the region where the model is to be applied. For some modules, it is desirable that model parameters be estimated to reflect data for the region where the model is to be applied. This is the case for the CreateHouseholds, PredictWorkers, and PredictIncome modules in the VESimHouseholds package because household and worker age compositions and income distributions are likely to vary by region. For modules like these, the estimation data should be included in the inst/extdata directory of the package in the form of CSV-formatted text files. The data files should be accompanied by text files having the same names but with a .txt extension rather than a .csv extension. The purpose of the text files is to document the corresponding data files so that model users will know how to obtain and prepare datasets for their region that can be used in model estimation. For example, the inst/extdata directory of the VESimHouseholds package contains the following files: pums_households.csv, pums_households.txt, pums_persons.csv, and pums_persons.txt. If a modules estimation datasets are to be loaded from csv files in the inst/extdata directory, then the module code should include procedures to check those data for correctness to assure that the model parameters will be estimated correctly. The framework includes as function, processEstimationInputs, to assist with this task. The processEstimationInputs function has 3 arguments: Inp_ls, FileName, and ModuleName. ModuleName is the name of the module that is doing the processing. The sole purpose of this argument is to identify the module in any error messages that are written to the log. FileName is the name of the file in the inst/extdata directory to be processed. Inp_ls is a list of data specifications that are used in checking the correctness of the data. This is explained in more detail below. The processEstimationInputs function returns a data frame which contains the data in the specified file, if those data have no errors. Following is an example of how the processEstimationInputs function is used: Hh_df &lt;- processEstimationInputs( Inp_ls = PumsHhInp_ls, FileName = &quot;pums_households.csv&quot;, ModuleName = &quot;CreateEstimationDatasets&quot;) Before the estimation data may be checked, the script must describe specifications for the data. The structure of the specifications is best described using an example. The following code snippet is from the CreateEstimationDatasets.R script: PumsHhInp_ls &lt;- items( item( NAME = items(&quot;SERIALNO&quot;, &quot;PUMA5&quot;, &quot;HWEIGHT&quot;, &quot;UNITTYPE&quot;, &quot;PERSONS&quot;), TYPE = &quot;integer&quot;, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot; ), item( NAME = &quot;BLDGSZ&quot;, TYPE = &quot;integer&quot;, PROHIBIT = c(&quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot; ), item( NAME = &quot;HINC&quot;, TYPE = &quot;double&quot;, PROHIBIT = c(&quot;NA&quot;), ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot; ) ) The meanings of these specifications are as follows: - NAME This is the name(s) of the data column in the file. The name must be a character string (i.e.Â surrounded by quotation marks). If multiple columns of the file have the same specifications except for their names, they can listed as in the first item in the example. This method avoids a lot of redundant specifications. Note that the order of specifications does not need to be the same as the order of the columns in the file. Also note that it is OK if the file contains columns that are not specified, as long as it contains all of the columns that are specified. Columns that are not listed are ignored. - TYPE This the data type of the data contained in the column. Allowable types are the 4 primitive types recognized by the R language (integer, double, character, and logical), the complex types listed in section 6.4, or compound. The type must be a character string. - PROHIBIT This is a character vector which identifies all prohibited data conditions. For example, the specification for the PERSONS data column in the example above is c(NA, &lt; 0). This means that there cannot be any values that are undefined (NA) or less than 0. The symbols that may be used in a PROHIBIT specification are: NA, ==, !=, &lt;, &lt;=, &gt;, &gt;= (i.e.Â undefined, equal to, not equal to, less than, less than or equal to, greater than, greater than or equal to). Note that prohibited conditions must be represented as character strings. If there is more than one prohibited condition, as in the example, the conditions must be entered as an R vector using the c() function, as shown in the example. The absence of prohibited conditions is represented by an empty character string (i.e.Â ). - ISELEMENTOF This is a vector which specifies the set of allowed values. It is used when the input values must be elements of a set of discrete values. The vector describing the set must be of the same type as is specified for the input data. Vectors of elements are entered using the c() function. For example, if the entries in a column of data could only have the values urban or rural, then the specification owould be written as c(urban, rural). The absence of a specification for this is represented by an empty character string. - UNLIKELY This is a vector of conditions that while not prohibited, are not likely to occur. While conditions identified in the PROHIBIT and ISELEMENTOF specifications will produce an error if they are not met (thereby stopping the calculation of parameters), the conditions identified in the UNLIKELY specification will only produce a warning message. Vectors of conditions are entered using the c() function. - TOTAL This specifies a required total value for the column of data. This is useful if the data represents proportions or percentages and must add up to 1 or 100. The absence of a specification for this is represented by an empty character string. In some instances it is impractical to include the model estimation data as files in the inst/extdata directory, and not necessary for model users to provide regional model estimation data. If, for example, the source data has confidential elements, it may be necessary to preprocess the data to anonymize it before including in the package; or the source data may be too large to include as a text file in the package. In these cases, source data may be processed outside of the package and then the processed datasets included in the package as datasets in R binary files. If that is done, the binary data files should be placed in a directory named data-raw in the package. For large datasets, it is also possible to have them stored remotely and to have the module code retrieve them from remote storage. This is what is done in the Make2001NHTSDataset.r script in the VE2001NHTS package. Zip archives of the public use datasets for the 2001 National Household Travel Survey are stored in a GitHub repository (https://github.com/VisionEval/NHTS2001). There are 4 zip archive files stored in the data directory of the repository: DAYPUB.zip, HHPUB.zip, PERPUB.zip, and VEHPUB.zip. Each zip archive contains a compressed csv formatted text file containing the data of interest. Because the process of downloading and unzipping some of the files takes an appreciable amount of time, the script checks whether that has already been done (by the presence of a file in the data-raw directory). If it has not been done, the script calls a function which handles the downloading, unzipping, and reading of the file. It also cleans up temporary files created when the zip archive was downloaded and unzipped. If a module is to download datafiles from remote storage, the module developer will need to write R code to handle the requisite tasks. The framework does not build in any functionality to do this. The coding is not complicated as the following example of commented snippets of code from the Make2001NHTSDataset.r script illustrate. The first section of code identifies the address of the data repository. The second section defines a function which handles downloading, unzipping, and reading a dataset stored in the repository, and cleaning up temporary files created in the process. The third section applies the handler function to download NHTS public use household data (HHPUB), selects relevant data fields, and saves those data as an R binary file to the data-raw directory. If the R binary file already exists, the data are not downloaded from the repository but are loaded from the saved file instead. #Identify the code repository. Note that in order to access data #files from a GitHub repository, the beginning of the address must #be &#39;raw.githubusercontent.com&#39; not &#39;github.com&#39; Nhts2001Repo &lt;- &quot;https://github.com/VisionEval/NHTS2001/blob/master/data&quot; #Define a function to handle retrieving a zipped dataset from the #repository, unzipping it, reading the unzipped file, and cleaning #up temporary files getZipDatasetFromRepo &lt;- function(Repo, DatasetName) { ZipArchiveFileName &lt;- paste0(DatasetName, &quot;.zip&quot;) CsvFileName &lt;- paste0(DatasetName, &quot;.csv&quot;) download.file(paste0(file.path(Repo, ZipArchiveFileName),&quot;?raw=true&quot;), ZipArchiveFileName) Data_df &lt;- read.csv(unzip(ZipArchiveFileName), as.is = TRUE) file.remove(ZipArchiveFileName, CsvFileName) Data_df } #Download NHTS 2001 public use household data from repository and #process if it has not already been done if (!file.exists(&quot;data-raw/Hh_df.rda&quot;)) { Hh_df &lt;- getZipDatasetFromRepo(Nhts2001Repo, &quot;HHPUB&quot;) Keep_ &lt;- c(&quot;HOUSEID&quot;, &quot;AGE_P1&quot;, &quot;AGE_P2&quot;, &quot;AGE_P3&quot;, &quot;AGE_P4&quot;, &quot;AGE_P5&quot;, &quot;AGE_P6&quot;, &quot;AGE_P7&quot;, &quot;AGE_P8&quot;, &quot;AGE_P9&quot;, &quot;AGE_P10&quot;, &quot;AGE_P11&quot;, &quot;AGE_P12&quot;, &quot;AGE_P13&quot;, &quot;AGE_P14&quot;, &quot;CENSUS_D&quot;, &quot;CENSUS_R&quot;, &quot;DRVRCNT&quot;, &quot;EXPFLHHN&quot;, &quot;EXPFLLHH&quot;, &quot;FLGFINCM&quot;, &quot;HBHRESDN&quot;, &quot;HBHUR&quot;, &quot;HBPPOPDN&quot;, &quot;HHC_MSA&quot;, &quot;HHFAMINC&quot;, &quot;HHINCTTL&quot;, &quot;HHNUMBIK&quot;, &quot;HHR_AGE&quot;, &quot;HHR_DRVR&quot;, &quot;HHR_RACE&quot;, &quot;HHR_SEX&quot;, &quot;HHSIZE&quot;, &quot;HHVEHCNT&quot;, &quot;HOMETYPE&quot;, &quot;HTEEMPDN&quot;, &quot;HTHRESDN&quot;, &quot;HTHUR&quot;, &quot;HTPPOPDN&quot;, &quot;LIF_CYC&quot;, &quot;MSACAT&quot;, &quot;MSASIZE&quot;, &quot;RAIL&quot;, &quot;RATIO16V&quot;, &quot;URBAN&quot;, &quot;URBRUR&quot;, &quot;WRKCOUNT&quot;, &quot;CNTTDHH&quot;) Hh_df &lt;- Hh_df[, Keep_] save(Hh_df, file = &quot;data-raw/Hh_df.rda&quot;, compress = TRUE) } else { load(&quot;data-raw/Hh_df.rda&quot;) } 3.6.0.1.2 8.1.2 Module Specifications The module specifications section of the module script provides specifications that are used by the framework in a number of ways. The specifications: - Identify the level of geography that the model is to be run at; - Describe all the data to be loaded from input files and enable unit conversions; - Describe all the data that the module needs from the datastore in order to run; - Describe all the data that the module produces that needs to be saved to the datastore; - Identify other modules the module needs to call in order to do its calculations; - Allow the framework to check and load all input files before any modules are run; - Allow the framework to check that modules are compatible with one another in terms of the data that they produce and consume; - Allow the sequence of model steps (module calls) to be simulated to check whether each module will have the data it needs when it is run; and, - Provide detailed documentation about all data that is produced by a model run. These specifications are declared in a list that is similar to the list for specifying model estimation data described in Section 8.1.1.1. A full example is shown in Appendix E. Following is a skeleton of a module specifications list for a module whose name is MyModule. The name of the specifications list must be the concatenation of the module name and Specifications, so in this example the name is MyModuleSpecifications. Note that the functions items and item are aliases for the R list function. Their purpose is to make the specifications easier to read. MyModuleSpecifications &lt;- list( RunBy = ..., NewInpTable = items( item( ... ), item( ... ) ), NewSetTable = items( item( ... ), item( ... ) ), Inp = items( item( ... ), item( ... ) ), Get = items( item( ... ), item( ... ) ), Set = items( item( ... ), item( ... ) ), Call = items( item( ... ), item( ... ) ) ) Following are detailed descriptions and examples of each component of the specifications list. The RunBy component specifies the level of geography that the model is to be run at. For example, the congestion submodel in the GreenSTEP and RSPM models runs at the Marea level. This specification is used by the software framework to determine how to index data that is read from the datastore and data that is written to the datastore. Acceptable values are Region, Azone, Bzone, and Marea. The RunBy specification looks like the following example: RunBy = &quot;Marea&quot;, The NewInpTable and NewSetTable components specify any new tables that need to be created in the datastore to accommodate input data or data produced by a module respectively. The following specifications are required for each new table that is to be created. - TABLE: the name of the table that is to be created; and, - GROUP: the type of group the table is to be put into. There are 3 group types: Global, BaseYear, and Year. If Global, the table is created in the global group of the datastore. If BaseYear the table is created in the year group for the base year and only in that year group. For example, if the model base year is 2010, the table will be created in the 2010 group. If Year, the table will be created in the group for every model run year. For example, if the run years are 2010 and 2040, the table will be created in both the 2010 group and the 2040 group. Following is an example of a NewSetTable specification for creating a Vehicle table in each model run year group. NewSetTable = items( item( TABLE = &quot;Vehicle&quot;, GROUP = &quot;Year&quot; ) ), The Inp component specifies all model inputs that the module requires. Each item in the list describes one or more data fields in an input file. Each item must have the following attributes (except for the OPTIONAL attribute): - NAME: the names of one or more data fields in the input file, and the names used for the datasets when they are loaded into the datastore. The names must match corresponding column names with the exception that column names in input files may contain year and multiplier modifiers as described in Section 6.4.; - FILE: the name of the file that contains the data fields; - TABLE: the name of the datastore table the datasets will be put into; - GROUP: the type of group where the table is located in the datastore (i.e.Â Global, Year, BaseYear); - TYPE: the data type (e.g.Â double, distance, compound); - UNITS: the measurement units for the data; - NAVALUE: the value used to represent NA (i.e.Â missing value) in the datastore; - SIZE: the maximum number of characters for character data (or 0 for numeric data); - PROHIBIT: data values that are prohibited or  if not applicable (see Section 8.1.1.1 for explanation); - ISELEMENTOF: allowed categorical data values or  if not applicable (see Section 8.1.1.1 for explanation); - UNLIKELY: data conditions that are unlikely or  if not applicable (see Section 8.1.1.1 for explanation); - TOTAL: the total for all values (e.g.Â 1) or  if not applicable; - DESCRIPTION: descriptions of the data corresponding to the names in the NAME attribute; and, - OPTIONAL: optional specification which identifies whether dataset is optional (see section 8.1.2.1) Following is an example of the Inp component for the PredictHousingSpecifications in the VELandUse package. The Inp specifications include two items. Each item lists one or more field names (i.e.Â column names in the input file) in the NAME attribute. Multiple field names can be listed in an item if all the other attributes except for DESCRIPTION are the same for all the fields. The descriptions in the DESCRIPTION attribute must correspond in order to the dataset names in the NAME attribute in order for them to be stored correctly in the datastore. The values that may be entered for the TYPE and UNITS attributes are described in Section 6.3. It should be noted that the UNITS attribute must not include year (for currency type) or multiplier information. That information is part of the input file field names instead (where relevant). This is explained in more detail in Section 6.4. The framework uses the information in the Inp to read the input files, check whether the data are correct, and save the data to the correct location in the datastore. Inp = items( item( NAME = items( &quot;SFDU&quot;, &quot;MFDU&quot;, &quot;GQDU&quot;), FILE = &quot;bzone_dwelling_units.csv&quot;, TABLE = &quot;Bzone&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;integer&quot;, UNITS = &quot;DU&quot;, NAVALUE = -1, SIZE = 0, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot;, DESCRIPTION = items( &quot;Number of single family dwelling units (PUMS codes 01 - 03) in zone&quot;, &quot;Number of multi-family dwelling units (PUMS codes 04 - 09) in zone&quot;, &quot;Number of qroup quarters population accommodations in zone&quot; ) ), item( NAME = items( &quot;HhPropIncQ1&quot;, &quot;HhPropIncQ2&quot;, &quot;HhPropIncQ3&quot;, &quot;HhPropIncQ4&quot;), FILE = &quot;bzone_hh_inc_qrtl_prop.csv&quot;, TABLE = &quot;Bzone&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;double&quot;, UNITS = &quot;NA&quot;, NAVALUE = -1, SIZE = 0, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot;, DESCRIPTION = items( &quot;Proportion of Bzone households (non-group quarters) in 1st quartile of Azone household income&quot;, &quot;Proportion of Bzone households (non-group quarters) in 2nd quartile of Azone household income&quot;, &quot;Proportion of Bzone households (non-group quarters) in 3rd quartile of Azone household income&quot;, &quot;Proportion of Bzone households (non-group quarters) in 4th quartile of Azone household income&quot; ) ) ), The Get component contains one or more items that identify data that the module need to have retrieved from the datastore. Note that the Get component must identify all datasets the module requires (other than those that are included in the package), including those specified in the Inp component. The datasets identified in the Inp component are not automatically made available to the module. Each item in the Get component specifies attributes for one or more related datasets as follows: - NAME: the names of one or more datasets to be loaded; - TABLE: the name of the table that the datasets are located in; - GROUP: the type of group where the table is located in the datastore (i.e.Â Global, Year, BaseYear); - TYPE: the data type (e.g.Â double, distance, compound); - UNITS: the measurement units for the data; - PROHIBIT: data values that are prohibited or  if not applicable (see Section 8.1.1.1 for explanation); - ISELEMENTOF: allowed categorical data values or  if not applicable (see Section 8.1.1.1 for explanation); and, - OPTIONAL: optional specification which identifies whether dataset is optional (see section 8.1.2.1) Unlike the Inp specifications, the Get specifications for UNITS must include year information for currency types. This is necessary in order for the framework to convert the currency data being requested from the datastore to the year denomination that the module needs. The UNITS attribute may also include a multiplier specification if the module needs the values to be modified in that way. For example, if the module needs VMT in thousands of miles, the UNITS specification would be MI.1e3. Section 6.3 provides more information on how year and multiplier options are added to a UNITS specification. Following is an example of the Get component of the AssignRoadMilesSpecifications in the VETransportSupply package. Get = items( item( NAME = &quot;Marea&quot;, TABLE = &quot;Marea&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;character&quot;, UNITS = &quot;ID&quot;, PROHIBIT = &quot;&quot;, ISELEMENTOF = &quot;&quot; ), item( NAME = items( &quot;FwyLaneMi&quot;, &quot;ArtLaneMi&quot;), TABLE = &quot;Marea&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;distance&quot;, UNITS = &quot;MI&quot;, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot; ), item( NAME = &quot;Marea&quot;, TABLE = &quot;Bzone&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;character&quot;, UNITS = &quot;ID&quot;, PROHIBIT = &quot;&quot;, ISELEMENTOF = &quot;&quot; ), item( NAME = &quot;UrbanPop&quot;, TABLE = &quot;Bzone&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;people&quot;, UNITS = &quot;PRSN&quot;, PROHIBIT = c(&quot;NA&quot;, &quot;&lt;= 0&quot;), ISELEMENTOF = &quot;&quot; ) ), The Set component contains one or more items describing datasets to be saved in the datastore. Each item in the Set component specifies attributes for one or more related datasets as follows: - NAME: the names of one or more datasets to be saved; - TABLE: the name of the table that the datasets are to be saved in; - GROUP: the type of group where the table is located in the datastore (i.e.Â Global, Year, BaseYear); - TYPE: the data type (e.g.Â double, distance, compound); - UNITS: the measurement units for the data; - NAVALUE: the value used to represent NA in the datastore; - PROHIBIT: data values that are prohibited or  if not applicable (see Section 8.1.1.1 for explanation); - ISELEMENTOF: allowed categorical data values or  if not applicable (see Section 8.1.1.1 for explanation); - SIZE: the maximum number of characters for character data (or 0 for numeric data); and, - DESCRIPTION: descriptions of the data corresponding to the names in the NAME attribute The requirements for the UNITS attribute are the same as described above for Get component items. Following is an example of the Set component of the AssignRoadMilesSpecifications in the VETransportSupply package. Set = items( item( NAME = &quot;FwyLaneMiPC&quot;, TABLE = &quot;Marea&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;compound&quot;, UNITS = &quot;MI/PRSN&quot;, NAVALUE = -1, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, SIZE = 0, DESCRIPTION = &quot;Ratio of urbanized area freeway and expressway lane-miles to urbanized area population&quot; ) ) It should be noted that it may not be possible to prespecify the SIZE attribute for a dataset. For example, if a unique household ID is assigned, the SIZE attribute will depend on the number of households and so must be calculated when the module is run. In such a circumstance, the SIZE attribute is omitted from the item and the module function must calculate it and include the calculated value as an attribute of the output dataset. The following code snippet from the CreateHouseholds module code in the VESimHouseholds package shows how this is done. In this example, the list of data that the module function returns is named Out_ls. The household ID (HhId) dataset is in the Household table of the Year group. The R attributes function is called to set the SIZE attribute of the HhId dataset equal to the maximum of the number of characters in each of the entries in the dataset. attributes(Out_ls$Year$Household$HhId)$SIZE &lt;- max(nchar(Out_ls$Year$Household$HhId)) The last component in the the module specifications list is the Call component. This is an optional component of the module specifications and is included if the module calls any other modules or if the module may be called by other modules. Following are Call component examples. The first is an example for a module that may be called. The second is an example for a module which calls another module. Section 8.1.2.2 explains module calling in detail. #Call component for a module that may be called Call = TRUE #Call component for a module that calls another module Call = items( CalcDvmt = &quot;VEHouseholdTravel::CalculateHouseholdDvmt&quot; ) 3.6.0.1.2.1 8.1.2.1 OPTIONAL Attribute Module developers can use the OPTIONAL attribute to identify optional inputs or data to be retrieved from the datastore. This enables modules to be written to respond to optional inputs. For example, in the GreenSTEP and RSPM models, users may provide inputs on the average carbon intensity of fuels (grams CO2e per megajoule) by model run year. This allows users to model a scenario where state regulations require the average carbon intensity of fuels to be reduced over time. If the user supplies those data, the models calculate carbon emissions using those inputs. If not, the model calculates emissions using data on the carbon intensities of different fuel types and the mix of those fuel types. If the OPTIONAL attribute for an item is missing, then the item is not optional. If the OPTIONAL attribute is not missing but is set equal to FALSE then the item is not optional as well. Only when the OPTIONAL attribute is present and set equal to TRUE does the framework regard the item as optional (OPTIONAL = TRUE). If an input (Inp) item is identified as optional, the framework checks whether the identified input file is present. If the file is present, then the framework will process the data and load it into the datastore. Otherwise the item is ignored. Note that optional inputs cant be combined with non-optional inputs in the same file. This will cause an error. Also not that since the framework does not automatically supply inputs to the module, there must be optional Get items corresponding to the optional Inp items. When the framework sees an optional Get item, it checks the datastore to see whether the optional dataset(s) are present. If so, it retrieves them. 3.6.0.1.2.2 8.1.2.2 CALL Specification If same calculation code needs to be executed a number of times, it is best to define a function to encapsulate the code and then call the function whenever the calculation needs to be carried out. This reduces errors and code maintenance hassles. Likewise, module code duplication is reduced in the VisionEval model system by allowing modules to call other modules for their calculation services. For example, the BudgetHouseholdDvmt module in the VETravelPerformance package calls the CalculateAltModeTrips module in the VEHouseholdTravel package to recalculate trips by alternate modes (walk, bike, transit) to reflect budget-adjusted household DVMT. Calling a module is more involved than just calling the function that carries out the modules calculations because the module function will not work unless it is supplied with the datasets identified in its Get specifications. Of course the calling module could include those specifications in its own specifications, but that would create a significant potential for coding errors and maintenance problems (e.g.Â if the called module is module is modified at a later time). For this reason the software design includes functionality for calling modules in a simple manner which leaves the data management details to the framework behind the scenes. A modules call status is specified in the Call component of the module specifications. There are 3 possibilities for a modules call status. First, a module may be called by other modules. In this case the specification is Call = TRUE. Second, the module may call other modules. In this case the call specification is a list that identifies each of the modules that are called, assigning a reference to the module to an alias (i.e.Â alias = module) as shown in the following example: Call = items( CalcDvmt = &quot;CalculateHouseholdDvmt&quot;, ReduceDvmt = &quot;ApplyDvmtReductions&quot;, CalcVehTrips = &quot;CalculateVehicleTrips&quot;, CalcAltTrips = &quot;CalculateAltModeTrips&quot; ) The alias is the name that the called module will be referred to by the calling module code. The module is the name of the called module. The VisionEval framework software identifies which package the module resides in from the ModulesByPackage_df table in the ModelState_ls list. It is also possible to hard code the package name in the call definition. For example the CalcDvmt alias could be assign to VEHouseholdTravel::CalculateHouseholdDvmt. This is discouraged, however, because doing so limits the ability to maintain different versions of packages that have module modifications. Call = items( CalcDvmt = &quot;VEHouseholdTravel::CalculateHouseholdDvmt&quot; ) The third possibility is that a module may not be called and calls no other modules. In that case a Call component is not included in the module specifications. There are some important restrictions to module calling. First, a module that may be called cannot call another module. If this restriction did not exist, there could be deeply nested module calls which could make debugging and understanding how a model works very difficult. Second, a module that may be called cannot have any inputs (i.e.Â Inp component). The reason for this restriction is that the function of called modules is to provide calculation services and those are hidden from model users. Unless a called module was also called directly in the model run script, there would be no way model user would know to supply input files without diving into the details about the module doing the calling. The framework does the following when a module is run which calls one or more other modules. For each of the modules that are called, the framework: 1) Reads the Get specifications for the called module, gets the datasets from the datastore, puts them in the standard list structure, and adds to the list that will be returned to the calling module as a component whose name is the assigned alias. In the example above, the retrieved datasets would be in a component named CalcDvmt. 2) Creates a list which holds the values of the called module functions. Each called module function is a component of the list whose name is the assigned alias. In the example above, this function list would have one component named CalcDvmt which contains the value of the CalculateHouseholdDVMT function. 3) The framework passes these two lists to the calling module when it is run. Thus the calling module function must be written to accept two arguments rather than one. The calling module code invokes the called module by calling it from the function list that the framework passes it and passing to it the data it needs from the data list. Following from the example above, if the data list is called L and the function list is called M, then the CalculateHouseholdDVMT module function would be called in the AssignHhVehiclePowertrain module as follows: M$CalcDvmt(L$CalcDvmt) 3.6.0.1.3 8.1.3 Module Function The function definitions section of the module script is used to define all functions that will be used to implement the module. One of these functions is the main function that is called by the software framework to run the module. This function must have the same name as the module name. For example, the main function of the CreateHouseholds module is named CreateHouseholds as well. This function must be written to accept one argument, a list, which by convention is named L if the module calls no other modules, and two arguments (as explained in the previous section) if the module calls other modules. This list contains all of the datasets identified in the Get component of the module data specifications. The structure of this list is described in Section 7. The main function returns a list which contains all of the datasets identified in the Set component of the module data specifications and structured as described in Section 7. The software framework includes a function, initDataList, to initialize an outputs list having the proper structure with Global, Year, and BaseYear components. The module code will fill in each component with components for each of the specified tables and datasets within those tables. Following is a simple example from the AssignTransitService module in the VETransportSupply package. First, here are the modules Set items to provide context for the module code: Set = items( item( NAME = &quot;TranRevMiPC&quot;, TABLE = &quot;Marea&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;compound&quot;, UNITS = &quot;MI/PRSN&quot;, NAVALUE = -1, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, SIZE = 0, DESCRIPTION = &quot;Ratio of bus-equivalent revenue-miles (i.e. revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population&quot; ) ) The AssignTransitService function returns one dataset called TranRevMiPc. This dataset will be placed in the Marea table in the Year group (i.e.Â in the group for each model run year). Following is the function definition: AssignTransitService &lt;- function(L) { #Set up #------ #Fix seed as synthesis involves sampling set.seed(L$G$Seed) #Define vector of modes Md &lt;- as.character(BusEquivalents_df$Mode) #Define vector of Mareas Ma &lt;- L$Year$Marea$Marea #Calculate bus equivalent revenue miles #-------------------------------------- #Make table of revenue miles by Marea RevMi_df &lt;- data.frame(L$Year$Marea[paste0(Md, &quot;RevMi&quot;)]) colnames(RevMi_df) &lt;- Md rownames(RevMi_df) &lt;- Ma RevMi_MaMd &lt;- as.matrix(RevMi_df) #Calculate the bus equivalent revenue miles BusEq_Md &lt;- BusEquivalents_df$BusEquivalents names(BusEq_Md) &lt;- Md BusEqRevMi_Ma &lt;- rowSums(sweep(RevMi_MaMd, 2, BusEq_Md, &quot;*&quot;))[Ma] #Calculate the bus equivalent revenue miles per capita #----------------------------------------------------- #Calculate population in the urbanized area UrbanPop_Ma &lt;- tapply(L$Year$Bzone$UrbanPop, L$Year$Bzone$Marea, sum)[Ma] #Calculate Marea bus equivalent revenue miles per capita TranRevMiPC_Ma &lt;- BusEqRevMi_Ma / UrbanPop_Ma #Return the results #------------------ #Initialize output list Out_ls &lt;- initDataList() Out_ls$Year$Marea &lt;- list(TranRevMiPC = TranRevMiPC_Ma) #Return the outputs list Out_ls } A module should include procedures as necessary to check for errors in output datasets. In most cases this wont be necessary if the module passes tests during development because the framework checks that all datasets passed to the module meet the modules specifications. However there may be conditions where some combinations of acceptable inputs produce unacceptable outputs. In such cases, the module code should check for unacceptable outputs and if found, report those to the framework for reporting to the model user and stopping the model run. The module should not stop the model run. Instead it composes a descriptive error message and adds it to an Errors component of the module outputs list. If there is more than one error, the Errors component will be a vector of error messages. The framework writes the error message(s) to the model run log and stops model execution. Warnings are handled in a similar way. If the module code is checks for warning conditions (i.e.Â model execution should not be stopped but users should be about the condition) and finds any, it composes a warning message that is added to a Warnings component of the module outputs list. The framework writes warnings messages to the model run log. The functionality for processing module errors and warnings is used primarily by Initialize modules as explained in Section 8.1.5. 3.6.0.1.4 8.1.4 Module Documentation It is recommended that module documentation be included at the top of the module script file if possible to make it easier to review and analyze the module. A standardized approach has been developed to do this that produces documentation in markdown format that can be viewed as a web page or converted to other formats for printing. At the end of the module script the documentModule function like this documentModule(\"PredictIncome\"). The documentModule parses the module script, extracts the documentation block at the head of the file and inserts any text, tables, or figures that are saved by the script and inserted into the documentation using special tags as explained below. In addition, the documentModule function reads the module specifications and creates formatted tables showing module inputs, datasets used, and datasets produced. The documentation file(s) are then saved to a model_docs directory in the inst/extdata directory which is in turn a directory in the installed package. The documentModule function is called at the end of the script because the rest of the script must be executed to produce the datasets that are inserted into the documentation file. Following is an example of what a documentation block looks like. #&lt;doc&gt; ## PredictIncome Module #### September 6, 2018 # #This module predicts the income for each simulated household given the number of workers in each age group and the average per capita income for the Azone where the household resides. # ### Model Parameter Estimation #Household income models are estimated for *regular* households and for *group quarters* households. # #The household income models are estimated using Census public use microsample (PUMS) data that are compiled into a R dataset (HhData_df) by the &#39;CreateEstimationDatasets.R&#39; script when the VESimHouseholds package is built. The data that are supplied with the VESimHouseholds package downloaded from the VisionEval repository may be used, but it is preferrable to use data for the region being modeled. How this is done is explained in the documentation for the *CreateEstimationDatasets.R* script. # #The household income models are linear regression models in which the dependent variable is a power transformation of income. Power transformation is needed in order to normalize the income data distribution which has a long right-hand tail. The power transform is found which minimizes the skewness of the income distribution. The power transform for *regular* households is: # #&lt;txt:HHIncModel_ls$Pow&gt; # #The power transform for *group quarters* households is: # #&lt;txt:GQIncModel_ls$Pow&gt; # #The independent variables for the linear models are power transformed per capita income for the area, the number of workers in each of 4 worker age groups (15-19, 20-29, 30-54, 55-64), and the number of persons in the 65+ age group. In addition, power-transformed per capita income is interacted with each of the 4 worker groups and 65+ age group variable. The summary statistics for the *regular* household model are as follows: # #&lt;txt:HHIncModel_ls$Summary&gt; # #The summary statistics for the *group quarters* household model are as follows: # #&lt;txt:GQIncModel_ls$Summary&gt; # #An additional step must be carried out in order to predict household income. Because the linear model does not account for all of the observed variance, and because income is power distribution, the average of the predicted per capita income is less than the average per capita income of the population. To compensate, random variation needs to be added to each household prediction of power-transformed income by randomly selecting from a normal distribution that is centered on the value predicted by the linear model and has a standard deviation that is calculated so as the resulting average per capita income of households match the input value. A binary search process is used to find the suitable standard deviation. Following is the comparison of mean values for the observed *regular* household income for the estimation dataset and the corresponding predicted values for the estimation dataset. # #&lt;tab:HHIncModel_ls$MeanCompare&gt; # #The following figure compares the distributions of the observed and predicted incomes of *regular* households. # #&lt;fig:reg-hh-inc_obs-vs-est_distributions.png&gt; # #Following is the comparison of mean values for the observed *group quarters* household income for the estimation dataset and the corresponding predicted values for the estimation dataset. # #&lt;tab:GQIncModel_ls$MeanCompare&gt; # #The following figure compares the distributions of the observed and predicted incomes of *groups quarters* households. # #&lt;fig:gq-hh-inc_obs-vs-est_distributions.png&gt; # ### How the Module Works #This module runs at the Azone level. Azone household average per capita income and group quarters average per capita income are user inputs to the model. The other model inputs are in the datastore, having been created by the CreateHouseholds and PredictWorkers modules. Household income is predicted separately for *regular* and *group quarters* households. Per capita income is transformed using the estimated power transform, the model dependent variables are calculated, and the linear model is applied. Random variation is applied so that the per capita mean income for the predicted household income matches the input value. # #&lt;/doc&gt; There are several things to note about this example. The first is that all text in the block is commented out (preceded by #). Since R doesnt support block comments, each line must be commented. It may not look this way in the example because of word wrapping, but every line is commented. Second, the start and end of the documentation block are denoted by matching &lt;doc&gt; and &lt;/doc&gt; tags. The parser uses these to extract the documentation from the script. After the document has been extracted, the leading comments are stripped off, resulting in markdown-formatted text. The other comment (#) symbols in the text are actually markdown formatting to identify headings of different levels. Documentation can include any standard markdown formatting such as emphasis, links, and tables. In addition, the documentation can include special tags as shown in the example. Three types of tags are available: &lt;txt:xxxx&gt; inserts a block of text that is contained in the referenced object. For example the &lt;txt:GQIncModel_ls$Summary&gt; tag in the example will insert summary statistics for the group quarters income model. &lt;tab:xxxx&gt; inserts data that can be presented in table for such as a data frame. For example the &lt;tab:HHIncModel_ls$MeanCompare&gt; tag in the example will insert a table which compares observed and estimated mean values. &lt;fig:xxxx&gt; creates a markdown reference to an image file so that it will be show in the proper place when the markdown is displayed in a browser or converted to another document form. For example the &lt;fig:reg-hh-inc_obs-vs-est_distributions.png&gt; tag in the example will insert a figure which compares observed and estimated income distributions when the markdown is displayed. It is helpful to include test code in the module script to aid with module development. The framework includes a testModule function to assist with module testing. This function is described in detail in Section 9.2.1. Testing requires having sample input files containing datasets specified by the modules Inp specifications. These are stored in the inputs directory of the tests directory. The tests directory also must contain a defs directory which contains all the required model definitions files (see Section 6.1). Finally, the tests directory must contain a datastore of the type specified in the run_parameters.json file, which contains all of the datasets specified in the modules Get specifications. In the first stage of module testing, the module specifications are checked, all input files are checked, the presence of all required data is checked, and an input list (L) is returned for use in module development. For this test, the DoRun argument of the testModule function needs to be set to FALSE. After the module code has been written, the module is tested again to check whether the module code is working correctly and that it returns results that are consistent with the Set specifications for the module. For this test, the DoRun argument of the testModule function must be TRUE. After the module has been tested, it is important to comment out all the testing code in the script because it must not be run when the package is built. Following is an example of testing code in a module that has been commented out. 3.6.0.1.5 8.1.5 Initialize Module Although the framework performs several checks on module input data based on the module specifications, there will be times when additional checks of inputs will be necessary and possibly transformations as well. For example, several datasets could have proportions data that must add up to 1 across the datasets. For example, 4 input datasets for the PredictHousing module of the *VELandUse** package give the proportions of households in each Bzone that are in each of 4 income quartiles for the Azone that the Bzones are located in. These inputs should be checked to assure that the sum of all quartile proportions for each Bzone adds up to one. If any sums are not close to 1, then the model user needs to be alerted to the fact so that they can correct the input file. If all the sums are close to 1 but some are not exactly 1 (due to rounding errors in preparing inputs), the inputs should be automatically adjusted to equal 1 before they are saved in the datastore. If a module developer needs to establish more complex checks and transformations like this, they do so in a special module that they name Initialize. In the Initialize module, the module specifications identify all of the input datasets that need to be checked. This is done in same manner as described in Section 8.1.2. The module specifications will not have Get or Set components since the only purpose of the Initialize module is to process inputs. There can only be one Initialize module in a package and so all inputs that need additional checking, regardless of which module in the package will use them, need to be processed in the Initialize module. Datasets that are listed in the Inp specifications of the Initialize module must not be included in the Inp specifications of any other module in the package. When a model is intialized by the initializeModel function in the run_model.R script (Section 5 and Appendix A), each of the module packages that will be run by the script is checked for the presence of an Initialize module. Any that are found are added to a list of modules that require input processing. When the initializeModel function processes the inputs for an Initialize module it does so in two steps. In the first step, it performs the standard input processing that is done for all modules (input files are read and datasets are checked for completeness and correctness). The output of this checking process is a standard outputs list with Global, BaseYear, and Year components. In the second step, the framework calls the Initialize module function and passes it the outputs list from the first step. The Initialize module does whatever enhanced data checking and transformation is necessary and returns an outputs list having the same structure as the inputs list with the addition of Errors and Warnings components (see Section 8.1.3). Several of the VisionEval packages include Initialize modules and can be used as examples. 3.6.0.2 8.2. The inst/extdata Directory By convention, the inst/extdata directory is the standard place to put external (raw) data files as opposed to R datasets which are placed in the data directory. This is where most model estimation data is kept. Section 8.1.1.1 provides a detailed explanation. The directory should include a subdirectory named sources to hold reports or other external documentation if needed. 3.6.0.3 8.3. The data-raw Directory In some instances it is impractical to include the model estimation data as files in the inst/extdata directory, and not necessary for model users to provide regional model estimation data. If, for example, the source data has confidential elements, it may be necessary to preprocess the data to anonymize it before including in the package; or the source data may be too large to include as a text file in the package. In these cases, source data may be processed outside of the package and then the processed datasets included in the package as datasets in R binary files. If that is done, the binary data files should be placed in a directory named data-raw in the package. 3.6.0.4 8.4. The tests Directory The tests directory contains R scripts and the results of module tests. The scripts directory contains all the scripts used to carry out module tests. The directory also contains subdirectories for each of the model types the module is to be tested with (e.g VE-RSPM, VE-State, VE-RPAT). Two approaches are available for handing module data that includes input files the module uses, all the defs files, and a datastore which contains all the datasets used by the module aside from those in the input files. These data can be included in the package or they may be kept in a central repository. If they are included in the package, they must be placed in the directory for the corresponding model. This is necessary to avoid conflicts in the test data for different models. The scripts directory includes a testing script which runs the tests on all modules in a package for a particular module. For example, the script for testing modules in a VE-State application is named vestate_test.R. The scripts directory also includes a test.R script which calls the individual model test scripts for automated package testing. If the centralized data testing approach is used, a test_functions.R script needs to be included. This includes functions needed to support the centralized test data approach. The test process is still not finalized. In the future this functionality will be included in the framework software. Following is an example of a test script using the central data approach: #vestate_test.R #-------------- #Load packages and test functions library(visioneval) library(filesstrings) source(&quot;tests/scripts/test_functions.R&quot;) #Define test setup parameters TestSetup_ls &lt;- list( TestDataRepo = &quot;../Test_Data/VE-State&quot;, DatastoreName = &quot;Datastore.tar&quot;, LoadDatastore = FALSE, TestDocsDir = &quot;vestate&quot;, ClearLogs = TRUE, # SaveDatastore = TRUE SaveDatastore = FALSE ) #Define the module tests Tests_ls &lt;- list( list(ModuleName = &quot;CreateHouseholds&quot;, LoadDatastore = FALSE, SaveDatastore = TRUE, DoRun = TRUE), list(ModuleName = &quot;PredictWorkers&quot;, LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE), list(ModuleName = &quot;AssignLifeCycle&quot;, LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE), list(ModuleName = &quot;PredictIncome&quot;, LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE) ) #Set up, run tests, and save test results setUpTests(TestSetup_ls) doTests(Tests_ls, TestSetup_ls) saveTestResults(TestSetup_ls) Section 9.2.1 provides more information on using the testModule function. 3.7 Software Framework The software framework for the VisionEval model system is implemented by a set of functions contained in the visioneval package. These functions are classified in four groups: user, developer, control, and datastore. Model user functions are those used to write scripts to run VisionEval models. Section 9.1 describes how these are used. Appendix G contains full documentation of model user functions. The package contains contains standard documentation for all of the functions. Module developer functions are those that module developers may call in their module code or that otherwise aid in module developing and testing. Section 9.2 describes the most important module development functions and Appendix H includes full documentation of all the functions. Most of the functions in the VisionEval framework are functions that control the initialization of a VisionEval model run and the execution of VisionEval modules. These functions are internal to the VisionEval software framework and are not to be used by model users or module developers. Section 9.3 provides an overview of these functions and Appendix I includes full function documentation. The remaining functions are functions which directly interact with the model datastore. Section 9.4 provides an overview of these functions and Appendix J provides full documentation. Additional documentation which shows the calling relationships between functions is [no longer, 9/17/2019] available in a interactive visualization. This visualization shows the names of the functions as nodes in a network graph with arrows connecting the nodes showing the functions that are called by each function (arrows point from the calling function to the called function). The nodes are colored-coded to indicate the function groups: blue indicates model user functions, green indicates module developer functions, yellow indicates framework control functions, and red indicates datastore interaction functions. Clicking on a function in the visualization highlights the function and all the arrows connected to it. It also provides summary information about the function including a description of what it does, descriptions of all the function arguments, and a description of the functions return value. 3.7.0.1 9.1. API for Model Users Three functions are part of the API for model users: initializeModel, runModule, and getYears. These are explained below in turn. The initializeModel function prepares the model for running modules. This includes: 1) Creating the ModelState.Rda file that contains global parameters for the model run and variables used to keep track of the state of the datastore and other aspects of the model run (Section 6.6); 2) Creating a log file that is used to record model status messages such as warning and error messages; 3) Creating and initializing the model datastore including loading a specified datastore; 4) Processing the model geography definition file and setting up the appropriate geographic tables in the datastore; 5) Checking whether all the specified module packages are installed and that all module specifications are correct; 6) Parsing the run_model.R script and simulating the model run to confirm that the datastore will contain the data that each module needs when it is called and that the data specifications are consistent with the module Get specifications; 7) Checking whether all the scenario input files identified by the specified modules are present, and that the data are consistent with specifications; and, 8) Loading all the data in the input files into the datastore. If any errors are found during the model initialization process, an error message will be displayed in the console and the initialization process will terminate. Detailed error messages in the log will identify the specific causes of errors. If the initialization proceeds without errors, the user can be assured that the model will run without errors. Following is a typical initializeModel function call in a model run script. initializeModel( ParamDir = &quot;defs&quot;, RunParamFile = &quot;run_parameters.json&quot;, GeoFile = &quot;geo.csv&quot;, ModelParamFile = &quot;model_parameters.json&quot;, LoadDatastore = FALSE, DatastoreName = NULL, SaveDatastore = TRUE ) The function arguments and their meanings are as follows: - ParamDir A string identifying the relative or absolute path to the directory where the parameter and geography definition files are located. The default value is defs. - RunParamFile A string identifying the name of a JSON-formatted text file that contains parameters needed to identify and manage the model run. The default value is run_parameters.json. - GeoFile A string identifying the name of a text file in comma-separated values format that contains the geographic specifications for the model. The default value is geo.csv. - ModelParamFile A string identifying the name of a JSON-formatted text file that contains global model parameters that are important to a model and may be shared by several modules. - LoadDatastore A logical identifying whether an existing datastore should be loaded. - DatastoreName A string identifying the full path name of a datastore to load or NULL if an existing datastore in the working directory is to be loaded. - SaveDatastore A string identifying whether if an existing datastore in the working directory should be saved rather than removed. Some consistency checks are done if a datastore is specified to be loaded including: - The base year for the loaded datastore must be the same as defined for the model run. - The defined geography for the loaded datastore must be the same as defined for the model run. As the name suggests, the runModule function runs a module. Following is an example of how it is invoked: runModule(ModuleName = &quot;CreateHouseholds&quot;, PackageName = &quot;VESimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) The function arguments and their meanings are as follows: - ModuleName A string identifying the name of a module object. - PackageName A string identifying the name of the package the module is a part of. - RunFor A string identifying whether to run the module for all years (AllYears), only the base year (BaseYear), or for all years except the base year (NotBaseYear). - RunYear A string identifying the run year. The runModule function runs the named module within the runModule function environment. This is a significant improvement over how functions that implement the submodels in the current GreenSTEP (RSPM, EERPAT, RPAT) are run. In these models, functions are run in the the global environment. As a consequence, the global environment collects objects that increase the potential for name conflicts if care is not taken to keep it clean. By running modules within the runModule function environment, no changes are made to the global environment and all objects that are created in the process vanish when the runModule function completes the work of running the module. Modules can be run for multiple years by running them in a loop which iterates through all of the years identified in the Years parameter specified in the run_parameters.json file (Section 6.1). Section 5 shows an example of using such a loop. Rather than hard code the model run years in the loop, the user can use the getYears function to query and return the vector of years. 3.7.0.2 9.2. API for Module Developers The VisionEval API for module developers currently includes 10 functions. These are presented below in 3 groups: - Key module script functions; - Functions to help developers write specifications that are consistent with other modules; and, - Functions that developers may use to simplify model implementation. 3.7.0.2.1 9.2.1. Key Module Script Functions Four functions are almost always used in module scripts. Module specifications are written as nested R lists that are structured in a particular way (Section 8). Rather than use the list function to define the list structure, two alias functions - item and items - are used to define the structure. An example of how these functions are used is shown in Appendix E. Although modules will run if the list function is used instead, it is highly recommended that item and items be used to maintain a consistent style for all modules. The processEstimationInputs function must be used if a module includes procedures for estimating model parameter(s) from regional data (Section 8). This function is used to check that the data supplied to calculate the regional parameter(s) are consistent with specifications. The function arguments are as follows: - Inp_ls A list that describes the specifications for the estimation file. This list must meet the framework standards for specification description. - FileName A string identifying the file name. This is the file name without any path information. The file must located in the inst/extdata directory of the package. - ModuleName A string identifying the name of the module the estimation data is being used in. The function returns a data frame containing the estimation inputs if all the supplied specifications are met. If any of the specifications are not met, an error is thrown and details regarding the specification error(s) are written to the console. The testModule function is an essential tool for testing that the module will work correctly in the VisionEval model system. The test module function tests a module with a test setup that mimics a model run. A test datastore needs to be present unless no data from other modules is needed (i.e.Â all data used by the module is supplied by input data). All inputs required by the module must be present, and all the standard model definitions files included in the defs directory (Section 6.1) must be present as well. When this function is invoked, the following tests are done on a module: - Checks whether module specifications are proper; - Checks whether test module inputs are consistent with the module Inp specifications and that they can be loaded into a test datastore; - Checks whether the test datastore with the loaded inputs contains all the data needed for the module to run; - Checks whether the module will run without error; and, - Checks whether the outputs of the module are consistent with the module Set specifications. The function arguments are as follows: - ModuleName A string identifying the module name. - ParamDir A string identifying the location of the directory where the run parameters, model parameters, and geography definition files are located. The default value is defs. This directory should be located in the tests directory. - RunParamFile A string identifying the name of the run parameters file. The default value is run_parameters.json. - GeoFile A string identifying the name of the file which contains geography definitions. - ModelParamFile A string identifying the name of the file which contains model parameters. The default value is model_parameters.json. - LoadDatastore A logical value identifying whether to load an existing datastore. If TRUE, it loads the datastore whose name is identified in the run_parameters.json file. If FALSE it initializes a new datastore. - SaveDatastore A logical value identifying whether the module outputs will be written to the datastore. If TRUE the module outputs are written to the datastore. If FALSE the outputs are not written to the datastore. - DoRun A logical value identifying whether the module should be run. If FALSE, the function will initialize a datastore, check specifications, and load inputs but will not run the module. It will return the list of module inputs. This is described in more detail below. If TRUE, the module will be run and results will be checked for consistency with the modules Set specifications. - RunFor A string identifying whether to run the module for all years (AllYears), only the base year (BaseYear), or for all years except the base year (NotBaseYear) - StopOnErr A logical value indicating whether model execution should be stopped if the module transmits one or more error messages or whether execution should continue with the next module. The default value is TRUE. This is how error handling will ordinarily proceed during a model run. A value of FALSE is used when Initialize modules in packages are run during model initialization. These Initialize modules are used to check and preprocess inputs. For this purpose, the module will identify any errors in the input data, the initializeModel function will collate all the data errors and print them to the log. - RequiredPackages A string vector identifying any other VisionEval packages that the module calls modules from or access datasets from. - TestGeoName A string identifying the name of a geographic area to return the data for. If the DoRun argument is FALSE, the function returns a list containing all the data the module requests. It will only return the data for one geographic area in the set identified in the RunBy specification. For example if the RunBy specification is Marea, the function will return the list of data for only one Marea. This argument can be used to specify which geographic area the data is to be returned for. Otherwise the data for the first area identified in the datastore is returned. If the DoRun argument is TRUE, the module will be run and there will be no return value. The module will run for all geographic areas and the outputs will be checked for consistency with the modules Set specifications. If that argument is FALSE, the return value of the function is a list containing the data identified in the modules Get specifications. That setting is useful for module development in order to create the all the data needed to assist with module programming. It is used in conjunction with the getFromDatastore function to create the dataset that will be provided by the framework. The example module script in Appendix E shows how this aspect of the testModule function can be used by module developers to make the development of their code easier. The function also writes out messages to the console and to the log as the testing proceeds. These messages include the time when each test starts and when it ends. When a key test fails, requiring a fix before other tests can be run, execution stops and an error message is written to the console. Detailed error messages are also written to the log. 3.7.0.2.2 9.2.2. Functions to Assist Specification Writing As was explained above in Sections 4.1 and 8.1, the VisionEval model system uses data specifications to help assure that modules can work properly with one another. The data specifications are saved as attributes for each dataset that are saved to the datastore by a module. The specifications are checked for consistency for each dataset a module requests to be retrieved from the datastore. A couple of functions assist a module developer with identifying datasets that registered modules produce and for retrieving Get specifications for the datasets the developers module will use. The item and items functions are used to organize specifications in the module script. They are aliases of the R language list function. The readVENameRegistry function returns a list containing the specifications for all datasets that registered modules save to the datastore. This list contains two components. The components are data frames containing the specifications for all datasets identified in the Inp and Set of registered modules. Each data frame row lists the specifications for a dataset as well as the module which produces the dataset and the package the module is in. This function is useful to developers for: - Avoiding dataset naming conflicts with other modules; and, - Identifying datasets produced by other modules that can be used in module calculations. At the present time, the readVENameRegistry function has fairly rudimentary functionality. The only argument, NameRegistryDir, allows the user to specify the local directory where the name registry is located. In the future, the function will read the registry from the remote repository where VisionEval modules are stored. Also, the function will also be modified to enable the module developer to search for datasets based on keywords, module names, package names, and keywords. The getRegisteredGetSpecs function helps the module developer to write Get specifications that are consistent with the specifications of registered datasets. This function returns a data frame containing the Get specifications for specified datasets. The function arguments are as follows: - Names_ A character vector of the dataset names to get specifications for. - Tables_ A character vector of the tables that the datasets are a part of. - Groups_ A character vector of the groups that the tables are a part of. - NameRegistryDir A string identifying the path to the directory where the name registry file is located. At the present time, the function returns a data frame which contains the Get specifications for each requested dataset. It is up to the module developer to put the information into the proper form in the module script. In the future, the function will be modified to return the Get specifications in list form that may be copied into a module script. 3.7.0.2.3 9.2.3. Processing Runtime Errors and Warnings Section 8.1.5 described how the Initialize module can be used to perform input data checks more than the basic data checking performed by the framework. Although the use of framework data checks and an Initialize module can and should ideally catch all data errors/warnings during model initialization, there are sometimes instances where errors/warnings can only be caught during runtime. Runtime errors/warnings should ideally be caught gracefully and the user should be presented with an understandable message that will direct them to a solution rather than cause the program to crash with a cryptic R language message. The framework provides functions to assist the module developer to identify errors and warnings to the framework during runtime and to include helpful messages. The addErrorMsg function is used to pass an error message to the framework. If the module code catches a specified error, it should handle the error so that the code doesnt crash and use the addErrorMsg function to record the error for processing by the framework. By default, if an error message is returned by a module, the runModule function will stop model execution, will print a message to the console that an error occurred in running the module, and will print details of the error that the module developer included in the message. The addErrorMsg function takes two arguments: ResultsListName, a string identifying the name of the results list returned by the module (e.g.Â Out_ls); ErrMsg a string that is the error message that will be written to the log for the user to see. Likewise, the addWarningMsg function likewise is used to pass a warning message to the framework. In the case of warnings, the model run is not stopped but a warning is printed in the console and details are written to the log. Following is an example of the use of addWarningMsg message in checking for unlikely population density: #Calculate density measures #-------------------------- #Population density D1B_ &lt;- with(D_df, Pop / Area) #Check for high population density values and add warning IsHighDensity_ &lt;- D1B_ &gt; 100 HighDensityBzones_ &lt;- Bz[IsHighDensity_] if (any(IsHighDensity_)) { Msg &lt;- paste0( &quot;The following Bzones in the year &quot;, L$G$Year, &quot; &quot;, &quot;have population densities greater than &quot;, &quot;100 persons per acre: &quot;, paste(HighDensityBzones_, collapse = &quot;, &quot;), &quot;. &quot;, &quot;This density is a relatively high level. &quot;, &quot;Check your Bzone area and housing inputs for these Bzones and make &quot;, &quot;sure that they are correct.&quot; ) addWarningMsg(&quot;Out_ls&quot;, Msg) rm(Msg) } rm(IsHighDensity_, HighDensityBzones_) #Employment density D1C_ &lt;- with(D_df, TotEmp / Area) #Activity density D1D_ &lt;- with(D_df, (TotEmp + NumHh) / Area) 3.7.0.2.4 9.2.4. Utility Functions for Implementing Modules Many submodels of the GreenSTEP and RSPM models are linear or binomial logit models. Several of the binary logit model implementations adjust the constant to match specified input proportions. For example, the light truck model enables model users to specify a future light truck proportion and the model will adjust the constant to match that proportion. Likewise, several linear models adjust a dispersion parameter to match a specified population mean. This is done for example in the household income model to match future per capita income projections. The adjustments are made with the use of a binary search algorithm. The following three functions simplify the implementation of those models in the VisionEval model system. The applyLinearModel function applies a linear model and optionally adjusts the model to match a target mean value. It has the following arguments: - Model_ls A list which contains the following components: 1) Type - which has a value of linear; 2) Formula - a string representation of the model equation; 3) PrepFun - a function which prepares the input data frame for the model application. If no preparation, this element of the list should not be present or should be set equal to NULL; 4) SearchRange - a two-element numeric vector which specifies the acceptable search range to use when determining the dispersion factor. 5) OutFun a function that is applied to transform the results of applying the linear model. For example to untransform a power-transformed variable. If no transformation is necessary, this element of the list should not be present or should be set equal to NULL. - Data_df A data frame containing the data required for applying the model. - TargetMean A number identifying a target mean value to be achieved or NULL if there is no target. - CheckTargetSearchRange A logical identifying whether the function is to only check whether the specified SearchRange for the model will produce acceptable values (i.e.Â no NA or NaN values). If FALSE (the default), the function will run the model and will not check the target search range. It is important to note that the Model_ls argument is a list that must contain the components listed above. Also, the CheckTargetSearchRange argument must NOT be set equal TRUE in the call in the module function. Setting it equal to TRUE is only useful during model estimation to help set the target search range values. The function returns a vector of numeric values for each record of the input data frame if the model is being run, or if the function is run to only check the target search range, a summary of predicted values when the model is run with dispersion set at the high value of the search range. The applyBinomialModel function applies a binomial model and optionally adjusts the model to match a target proportion. It has the following arguments which are similar to those of the applyLinearModel function: - Model_ls A list which contains the following components: 1) Type - which has a value of binomial; 2) Formula - a string representation of the model equation; 3) Choices - a two-element vector listing the choice set. The first element is the choice that the binary logit model equation predicts the odds of; 4) PrepFun - a function which prepares the input data frame for the model application. If no preparation, this element of the list should not be present or should be set equal to NULL; 5) SearchRange - a two-element numeric vector which specifies the acceptable search range to use when determining the factor for adjusting the model constant. - Data_df A data frame containing the data required for applying the model. - TargetProp A number identifying a target proportion for the default choice to be achieved for the input data or NULL if there is no target proportion to be achieved. - CheckTargetSearchRange A logical identifying whether the function is to only check whether the specified SearchRange for the model will produce acceptable values (i.e.Â no NA or NaN values). If FALSE (the default), the function will run the model and will not check the target search range. ApplyRandom A logical value which determines how the binomial choice is made. The binomial choice model returns a probability that modeled selection is chosen. For example a housing type model could predict the probability that a household lives in a single-family home. If the ApplyRandom argument is TRUE, the function takes a sample from a uniform distribution from 0 to 1 and if the value is less than the probability the modeled choice is selected. Otherwise the alternate choice is selected. If the ApplyRandom argument is FALSE the modeled choice is selected if the modeled probability is greater than 0.5. ReturnProbs A logical value which if TRUE returns the modeled choice probabilities instead of the modeled choices. The function returns a vector of choice values for each record of the input data frame if the neither the CheckTargetSearchRange or ReturnProbs arguments are TRUE. If the ReturnProbs argument is TRUE the choice probabilities are returned. If the CheckTargetSearchRange argument is TRUE the function is run to only check the target search range, a two-element vector identifying if the search range produces NA or NaN values. The third function, binarySearch, is called by the applyLinearModel function if the value of the TargetMean argument is not NULL, and called by the applyBinomialModel function if the value of the TargetProp argument is not NULL. Module developers may find this function to be useful in their own module implementation code. The arguments of the function are: - Function A function which returns a value which is compared to the Target argument. The function must take as its first argument a value which from the SearchRange_. It must return a value that may be compared to the Target value. - SearchRange_ A two element numeric vector which has the lowest and highest values of the parameter range within which the search will be carried out. -  One or more optional arguments for the Function. - Target A numeric value that is compared with the return value of the Function. - MaxIter An integer specifying the maximum number of iterations for the search to attempt in order to match the Target within the specified Tolerance. - Tolerance A numeric value specifying the proportional difference between the Target and the return value of the Function to determine when the search is complete. The function returns a value within the SearchRange_ for the function parameter which matches the target value. Developers can refer to the source code for the applyLinearModel and applyBinomialModel functions to help understand how to use this function. 3.7.0.2.5 9.2.5. Module Documentation Function Section 8.1.4 describes how module documentation is to be included in the module script. The documentModule prepares formatted documentation from the script documentation. Refer to that section for more details. 3.7.0.2.6 9.2.6. Debugging Runtime Errors Although the large majority of runtime errors are avoided by the frameworks data specification system, Initialize modules, and internal module error checks, inevitably some errors are only caught during runtime. This can pose challenges for debugging because the R language error messages can be cryptic. Often the easiest way to find the error is to recreate the state of the model at the start of module execution and then step through the module code to find the error. This is made simpler by using the fetchModuleData function. This function retrieves from the datastore the data that was passed to the module so that the code can be checked. The function takes the following arguments: - ModuleName: a string identifying the name of the module. - PackageName: a string identifying the name of the package that the module is in. - Year: a string identifying the model run year to retrieve the data for. - Geo: a string identifying the geography to retrieve the data for if the modules RunBy specification is not Region. This argument is omitted if the RunBy specification is Region. Here is an example of the steps that were used in debugging the CalculateUrbanMixMeasure module which errored when running a model in the R console: 1. The model run stopped and a cryptic R error message was printed to the console. 2. The following code was entered at the console to get the dataset used by the module: L &lt;- fetchModuleData(\"CalculateUrbanMixMeasure\", \"VELandUse\", \"2040\"). Note that L is the standard name used by modules to refer to the data list provided by the framework to the module. 3. The module function code was retrieved with edit(VELandUse::CalculateUrbanMixMeasure) and pasted into a temporary file. 4. The module code in the temporary file was stepped through line by line until an error occurred. Then the values of data used in the computation could be checked to determine the cause. In this case, error was caused by very high population densities that were outside the range of values used to estimate the binomial logit model which determines the odds that a Bzone is urban-mixed-use. Calculating the odds involves exponentiation which in the case of very high densities produced infinite values which in turn caused probability values of NA. That in turn caused an error when used in the sample function. 5. Code to fix the module was developed and tested in the temporary file. Then fixed code was used to modify the CalculateUrbanMixMeasure code in the VELandUse package. 3.7.1 Appendix A: Example Model Run Script #=========== #run_model.R #=========== #This script demonstrates the VisionEval framework for the RSPM model. #Load libraries #-------------- library(visioneval) #Initialize model #---------------- initializeModel( ParamDir = &quot;defs&quot;, RunParamFile = &quot;run_parameters.json&quot;, GeoFile = &quot;geo.csv&quot;, ModelParamFile = &quot;model_parameters.json&quot;, LoadDatastore = FALSE, DatastoreName = NULL, SaveDatastore = TRUE ) #Run all demo module for all years #--------------------------------- for(Year in getYears()) { runModule(ModuleName = &quot;CreateHouseholds&quot;, PackageName = &quot;VESimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;PredictWorkers&quot;, PackageName = &quot;VESimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;AssignLifeCycle&quot;, PackageName = &quot;VESimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;PredictIncome&quot;, PackageName = &quot;VESimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;PredictHousing&quot;, PackageName = &quot;VESimHouseholds&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;LocateHouseholds&quot;, PackageName = &quot;VELandUse&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;LocateEmployment&quot;, PackageName = &quot;VELandUse&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;AssignDevTypes&quot;, PackageName = &quot;VELandUse&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;Calculate4DMeasures&quot;, PackageName = &quot;VELandUse&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;CalculateUrbanMixMeasure&quot;, PackageName = &quot;VELandUse&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;AssignTransitService&quot;, PackageName = &quot;VETransportSupply&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;AssignRoadMiles&quot;, PackageName = &quot;VETransportSupply&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;AssignVehicleOwnership&quot;, PackageName = &quot;VEVehicleOwnership&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;CalculateHouseholdDVMT&quot;, PackageName = &quot;VETravelDemand&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) runModule(ModuleName = &quot;CalculateAltModeTrips&quot;, PackageName = &quot;VETravelDemand&quot;, RunFor = &quot;AllYears&quot;, RunYear = Year) } 3.7.2 Appendix B: Geography Specification File (geography.csv) Examples Figure A1. Example of a geography.csv file that only specifies Azones Figure A2. Example of geography.csv file that specifies Azones and Bzones 3.7.3 Appendix C: Recognized Data Types and Units Recognized Data Types and Units are defined in the Types function. The definition also includes the factors for converting between units. This function definition is listed below: $double $double$units [1] NA $double$mode [1] &quot;double&quot; $integer $integer$units [1] NA $integer$mode [1] &quot;integer&quot; $character $character$units [1] NA $character$mode [1] &quot;character&quot; $logical $logical$units [1] NA $logical$mode [1] &quot;logical&quot; $compound $compound$units [1] NA $compound$mode [1] &quot;double&quot; $currency $currency$units $currency$units$USD USD 1 $currency$mode [1] &quot;double&quot; $distance $distance$units $distance$units$MI MI FT KM M 1.00000 5280.00000 1.60934 1609.34000 $distance$units$FT MI FT KM M 0.000189394 1.000000000 0.000304800 0.304800000 $distance$units$KM MI FT KM M 0.621371 3280.840000 1.000000 1000.000000 $distance$units$M MI FT KM M 0.000621371 3.280840000 0.001000000 1.000000000 $distance$mode [1] &quot;double&quot; $area $area$units $area$units$SQMI SQMI ACRE SQFT SQM HA SQKM 1.00000e+00 6.40000e+02 2.78800e+07 2.59000e+06 2.58999e+02 2.58999e+00 $area$units$ACRE SQMI ACRE SQFT SQM HA SQKM 1.56250e-03 1.00000e+00 4.35600e+04 4.04686e+03 4.04686e-01 4.04686e-03 $area$units$SQFT SQMI ACRE SQFT SQM HA SQKM 3.5870e-08 2.2957e-05 1.0000e+00 9.2903e-02 9.2903e-06 9.2903e-08 $area$units$SQM SQMI ACRE SQFT SQM HA SQKM 3.86100e-07 2.47105e-04 1.07639e+01 1.00000e+00 1.00000e-04 1.00000e-06 $area$units$HA SQMI ACRE SQFT SQM HA SQKM 3.86102e-03 2.47105e+00 1.07639e+05 3.86102e-03 1.00000e+00 1.00000e-02 $area$units$SQKM SQMI ACRE SQFT SQM HA SQKM 3.86102e-01 2.47105e+02 1.07600e+07 1.00000e+06 1.00000e+02 1.00000e+00 $area$mode [1] &quot;double&quot; $mass $mass$units $mass$units$LB LB TON MT KG GM 1.00000e+00 5.00000e-04 4.53592e-04 4.53592e-01 4.53592e+02 $mass$units$TON LB TON MT KG GM 2.00000e+03 1.00000e+00 9.07185e-01 9.07185e+02 9.07185e+05 $mass$units$MT LB TON MT KG M 2.20462e+03 1.10231e+00 1.00000e+00 1.00000e+03 1.00000e+06 $mass$units$KG LB TON MT KG GM 2.20462e+00 1.10231e-03 1.00000e-03 1.00000e+00 1.00000e+03 $mass$units$GM LB TON MT KG GM 2.20462e-03 1.10230e-06 1.00000e-06 1.00000e-03 1.00000e+00 $mass$mode [1] &quot;double&quot; $volume $volume$units $volume$units$GAL GAL L 1.00000 3.78541 $volume$units$L GAL L 0.264172 1.000000 $volume$mode [1] &quot;double&quot; $time $time$units $time$units$YR YR DAY HR MIN SEC 1 365 8760 525600 31540000 $time$units$DAY YR DAY HR MIN SEC 2.73973e-03 1.00000e+00 2.40000e+01 1.44000e+03 8.64000e+04 $time$units$HR YR DAY HR MIN SEC 1.14155e-04 4.16667e-02 1.00000e+00 6.00000e+01 3.60000e+03 $time$units$MIN YR DAY HR MIN SEC 1.90260e-06 6.94444e-04 1.66667e-02 1.00000e+00 6.00000e+01 $time$units$SEC YR DAY HR MIN SEC 3.17100e-08 1.15740e-05 2.77778e-04 1.66667e-02 1.00000e+00 $time$mode [1] &quot;double&quot; $energy $energy$units $energy$units$KWH KWH MJ GGE 1.00000000 3.60000000 0.02967846 $energy$units$MJ KWH MJ GGE 0.277778000 1.000000000 0.008244023 $energy$units$GGE KWH MJ GGE 33.69447 121.30000 1.00000 $energy$mode [1] &quot;double&quot; $people $people$units $people$units$PRSN PRSN 1 $people$mode [1] &quot;integer&quot; $vehicles $vehicles$units $vehicles$units$VEH VEH 1 $vehicles$mode [1] &quot;integer&quot; $trips $trips$units $trips$units$TRIP TRIP 1 $trips$mode [1] &quot;integer&quot; $households $households$units $households$units$HH HH 1 $households$mode [1] &quot;integer&quot; $employment $employment$units $employment$units$JOB JOB 1 $employment$mode [1] &quot;integer&quot; $activity $activity$units $activity$units$HHJOB HHJOB 1 3.7.4 Appendix D: Scenario Input File Examples Figure B1. Example of input file to be loaded into Global group NOTE: Heavy lines denote rows that are hidden to shorten the display Figure B2. Example of input file to be loaded into forecast year group 3.7.5 Appendix E: Example Module Script from the VETransportSupply Package #====================== #AssignTransitService.R #====================== #&lt;doc&gt; # ## AssignTransitService Module #### November 5, 2018 # #This module assigns transit service level to the metropolitan area (Marea) and neighborhoods (Bzones). Annual revenue-miles (i.e. transit miles in revenue service) by transit mode type are read from an input file. The following 8 modes are recognized: #* DR = Demand-responsive #* VP = Vanpool and similar #* MB = Standard motor bus #* RB = Bus rapid transit and commuter bus #* MG = Monorail/automated guideway #* SR = Streetcar/trolley bus/inclined plain #* HR = Heavy Rail/Light Rail #* CR = Commuter Rail/Hybrid Rail/Cable Car/Aerial Tramway # #Revenue miles are converted to bus (i.e. MB) equivalents using factors derived from urbanized are data from the National Transit Database (NTD). Bus-equivalent revenue miles are used in models which predict vehicle ownership and household DVMT. # #Revenue miles by mode type are also translated (using NTD data) into vehicle miles by 3 vehicle types: van, bus, and rail. Miles by vehicle type are used to calculate public transit energy consumption and emissions. # #The module also reads in user supplied data on relative public transit accessibility by Bzone as explained below. # ### Model Parameter Estimation # #Parameters are calculated to convert the revenue miles for each of the 8 recognized public transit modes into bus equivalents, and to convert revenue miles into vehicle miles. Data extracted from the 2015 National Transit Database (NTD) are used to calculate these parameters. The extracted datasets are in the *2015_Service.csv* and *2015_Agency_information.csv* files in the *inst/extdata* directory of this package. These files contain information about transit service and transit service providers located within urbanized areas. Documentation of the data are contained in the accompanying *2015_Service.txt* and *2015_Agency_information.txt* files. # #Bus equivalent factors for each of the 8 modes is calculated on the basis of the average productivity of each mode as measured by the ratio of passenger miles to revenue miles. The bus-equivalency factor of each mode is the ratio of the average productivity of the mode to the average productivity of the bus (MB) mode. # #Factors to compute vehicle miles by mode from revenue miles by mode are calculated from the NTD data on revenue miles and deadhead (i.e. out of service) miles. The vehicle mile factor is the sum of revenue and deadhead miles divided by the revenue miles. These factors vary by mode. # ### How the Module Work # #The user supplies data on the annual revenue miles of service by each of the 8 transit modes for the Marea. These revenue miles are converted to bus equivalents using the estimated bus-equivalency factors and summed to calculate total bus-equivalent revenue miles. This value is divided by the urbanized area population of the Marea to compute bus-equivalent revenue miles per capita. This public transit service measure is used in models of household vehicle ownership and household vehicle travel. # #The user supplied revenue miles by mode are translated into vehicle miles by mode using the estimated conversion factors. The results are then simplified into 3 vehicle types (Van, Bus, Rail) where the DR and VP modes are assumed to be served by vans, the MB and RB modes are assumed to be served by buses, and the MG, SR, HR, and CR modes are assumed to be served by rail. # #The user also supplies information on the aggregate frequency of peak period transit service within 0.25 miles of the Bzone boundary per hour during evening peak period. This is the *D4c* measure included in the Environmental Protection Agency&#39;s (EPA) [Smart Location Database] (https://www.epa.gov/smartgrowth/smart-location-database-technical-documentation-and-user-guide). Following is the description of the measure from the user guide: #&gt;EPA analyzed GTFS data to calculate the frequency of service for each transit route between 4:00 and 7:00 PM on a weekday. Then, for each block group, EPA identified transit routes with service that stops within 0.4 km (0.25 miles). Finally EPA summed total aggregate service frequency by block group. Values for this metric are expressed as service frequency per hour of service. # #&lt;/doc&gt; #============================================= #SECTION 1: ESTIMATE AND SAVE MODEL PARAMETERS #============================================= #Describe specifications for transit data files #---------------------------------------------- #Transit agency data AgencyInp_ls &lt;- items( item( NAME = items(&quot;AgencyID&quot;, &quot;PrimaryUZA&quot;, &quot;Population&quot;), TYPE = &quot;integer&quot;, PROHIBIT = c(&quot;NA&quot;, &quot;&lt;= 0&quot;), ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot; ), item( NAME = &quot;UZAName&quot;, TYPE = &quot;character&quot;, PROHIBIT = &quot;&quot;, ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot; ) ) #Transit service data ServiceInp_ls &lt;- items( item( NAME = items(&quot;RevenueMiles&quot;, &quot;DeadheadMiles&quot;, &quot;PassengerMiles&quot;), TYPE = &quot;double&quot;, PROHIBIT = c(&quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot; ), item( NAME = items(&quot;AgencyID&quot;, &quot;AgencyName&quot;, &quot;Mode&quot;, &quot;TimePeriod&quot;), TYPE = &quot;character&quot;, PROHIBIT = &quot;&quot;, ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot; ) ) #Define function to estimate public transit model parameters #----------------------------------------------------------- #&#39; Estimate public transit model parameters. #&#39; #&#39; \\code{estimateTransitModel} estimates transit model parameters. #&#39; #&#39; This function estimates transit model parameters from 2015 National Transit #&#39; Database information on transit agencies and service levels. The function #&#39; calculates factors for converting annual revenue miles by transit mode to #&#39; total bus-equivalent revenue miles. It also calculates factors to convert #&#39; revenue miles by mode into vehicle miles by mode. #&#39; #&#39; @return A list containing the following elements: #&#39; BusEquivalents_df: factors to convert revenue miles by mode into bus #&#39; equivalents, #&#39; UZABusEqRevMile_df: data on bus equivalent revenue miles by urbanized area, #&#39; VehMiFactors_df: factors to convert revenue miles by mode into vehicle miles #&#39; by mode. #&#39; @name estimateTransitModel #&#39; @import stats #&#39; @export estimateTransitModel &lt;- function() { #Read in and process transit datasets #------------------------------------ #Read in transit agency datasets Agency_df &lt;- processEstimationInputs( AgencyInp_ls, &quot;2015_Agency_information.csv&quot;, &quot;AssignTransitService.R&quot;) #Read in transit service datasets Service_df &lt;- processEstimationInputs( ServiceInp_ls, &quot;2015_Service.csv&quot;, &quot;AssignTransitService.R&quot;) #Select only rows with annual totals Service_df &lt;- Service_df[Service_df$TimePeriod == &quot;Annual Total&quot;,] #Select only rows for service in urbanized areas Service_df &lt;- Service_df[Service_df$AgencyID %in% Agency_df$AgencyID,] #Define combined modes and create index datasets #----------------------------------------------- CombinedCode_ls &lt;- list( DR = c(&quot;DR&quot;, &quot;DT&quot;), VP = c(&quot;VP&quot;, &quot;PB&quot;), MB = c(&quot;MB&quot;), RB = c(&quot;RB&quot;, &quot;CB&quot;), MG = c(&quot;MG&quot;), SR = c(&quot;SR&quot;, &quot;TB&quot;, &quot;IP&quot;), HR = c(&quot;LR&quot;, &quot;HR&quot;, &quot;AR&quot;), CR = c(&quot;CR&quot;, &quot;YR&quot;, &quot;CC&quot;, &quot;TR&quot;) ) CombinedCode_ &lt;- c(DR = &quot;DR&quot;, DT = &quot;DR&quot;, VP = &quot;VP&quot;, PB = &quot;VP&quot;, MB = &quot;MB&quot;, RB = &quot;RB&quot;, CB = &quot;RB&quot;, MG = &quot;MG&quot;, SR = &quot;SR&quot;, TB = &quot;SR&quot;, IP = &quot;SR&quot;, LR = &quot;HR&quot;, HR = &quot;HR&quot;, AR = &quot;HR&quot;, CR = &quot;CR&quot;, YR = &quot;CR&quot;, CC = &quot;CR&quot;, TR = &quot;CR&quot; ) Cm &lt;- c(&quot;DR&quot;, &quot;VP&quot;, &quot;MB&quot;, &quot;RB&quot;, &quot;MG&quot;, &quot;SR&quot;, &quot;HR&quot;, &quot;CR&quot;) #Calculate bus equivalency factors #--------------------------------- #Calculate productivity measure Service_df$Productivity &lt;- Service_df$PassengerMiles / Service_df$RevenueMiles #Calculate the average productivity by mode AveProductivity_Md &lt;- tapply(Service_df$Productivity, Service_df$Mode, mean, na.rm = TRUE) #Calculate bus equivalency of different modes BusEquiv_Md &lt;- AveProductivity_Md / AveProductivity_Md[&quot;MB&quot;] #Calculate average productivity by combined mode BusEquiv_Cm &lt;- unlist(lapply(CombinedCode_ls, function(x) { mean(BusEquiv_Md[x]) })) #Create data frame with mode names and equivalency factors BusEquiv_df &lt;- data.frame( Mode = names(BusEquiv_Cm), BusEquivalents = unname(BusEquiv_Cm) ) #Calculate revenue miles to total vehicle mile factors by mode #------------------------------------------------------------- #Convert DeadheadMiles for mode DT from NA to 0 Service_df$DeadheadMiles[Service_df$Mode == &quot;DT&quot;] &lt;- 0 #Create data frame of complete cases of revenue miles and deadhead miles Veh_df &lt;- Service_df[, c(&quot;Mode&quot;, &quot;RevenueMiles&quot;, &quot;DeadheadMiles&quot;)] Veh_df &lt;- Veh_df[complete.cases(Veh_df),] #Calculate total revenue miles by combined mode RevMi_Md &lt;- tapply(Veh_df$RevenueMiles, Veh_df$Mode, sum) RevMi_Cm &lt;- unlist(lapply(CombinedCode_ls, function(x) { sum(RevMi_Md[x]) })) #Calculate total deadhead miles by combined mode DeadMi_Md &lt;- tapply(Veh_df$DeadheadMiles, Veh_df$Mode, sum) DeadMi_Cm &lt;- unlist(lapply(CombinedCode_ls, function(x) { sum(DeadMi_Md[x]) })) #Calculate vehicle mile factors by combined mode VehMiFactors_Cm &lt;- (RevMi_Cm + DeadMi_Cm) / RevMi_Cm VehMiFactors_df &lt;- data.frame( Mode = names(VehMiFactors_Cm), VehMiFactors = unname(VehMiFactors_Cm) ) #Calculate bus equivalent transit service by urbanized area #---------------------------------------------------------- #Attach urbanized area code to service data Service_df$UzaCode &lt;- Agency_df$PrimaryUZA[match(Service_df$AgencyID, Agency_df$AgencyID)] Service_df$UzaName &lt;- Agency_df$UZAName[match(Service_df$AgencyID, Agency_df$AgencyID)] #Tabulate vehicle revenue miles by urbanized area and mode RevMi_UnMd &lt;- tapply(Service_df$RevenueMiles, list(Service_df$UzaName, Service_df$Mode), sum) RevMi_UnMd[is.na(RevMi_UnMd)] &lt;- 0 #Summarize by combined mode RevMi_UnCm &lt;- t(apply(RevMi_UnMd, 1, function(x) { tapply(x, CombinedCode_[colnames(RevMi_UnMd)], sum, na.rm = TRUE)[Cm] })) #Sum up the bus-equivalent revenue miles by urbanized area BusEqRevMi_Un &lt;- rowSums(sweep(RevMi_UnCm, 2, BusEquiv_Cm, &quot;*&quot;)) #Tabulate population by urbanized area UzaPop_Un &lt;- Agency_df$Population[!duplicated(Agency_df$PrimaryUZA)] names(UzaPop_Un) &lt;- Agency_df$UZAName[!duplicated(Agency_df$PrimaryUZA)] UzaPop_Un &lt;- UzaPop_Un[names(BusEqRevMi_Un)] UzaPop_Un &lt;- UzaPop_Un[names(BusEqRevMi_Un)] #Calculate bus-equivalent revenue miles per capita BusEqRevMiPC_Un &lt;- BusEqRevMi_Un / UzaPop_Un #Create data frame of urbanized area bus revenue mile equivalency UZABusEqRevMile_df &lt;- Service_df[!duplicated(Service_df$UzaName), c(&quot;UzaCode&quot;, &quot;UzaName&quot;)] rownames(UZABusEqRevMile_df) &lt;- UZABusEqRevMile_df$UzaName UZABusEqRevMile_df &lt;- UZABusEqRevMile_df[names(BusEqRevMi_Un),] UZABusEqRevMile_df$BusEqRevMi &lt;- unname(BusEqRevMi_Un) UZABusEqRevMile_df$UzaPop &lt;- unname(UzaPop_Un) UZABusEqRevMile_df$BusEqRevMiPC &lt;- unname(BusEqRevMiPC_Un) rownames(UZABusEqRevMile_df) &lt;- NULL #Return the results #------------------ list( BusEquivalents_df = BusEquiv_df, UZABusEqRevMile_df = UZABusEqRevMile_df, VehMiFactors_df = VehMiFactors_df ) } #Estimate public transit model parameters #---------------------------------------- TransitParam_ls &lt;- estimateTransitModel() BusEquivalents_df &lt;- TransitParam_ls$BusEquivalents_df UZABusEqRevMile_df &lt;- TransitParam_ls$UZABusEqRevMile_df VehMiFactors_df &lt;- TransitParam_ls$VehMiFactors_df rm(AgencyInp_ls) rm(ServiceInp_ls) #Save the bus equivalency factors #-------------------------------- #&#39; Bus equivalency factors #&#39; #&#39; Bus revenue mile equivalency factors to convert revenue miles for various #&#39; modes to bus-equivalent revenue miles. #&#39; #&#39; @format A data frame with 8 rows and 2 variables containing factors for #&#39; converting revenue miles of various modes to bus equivalent revenue miles. #&#39; Mode names are 2-character codes corresponding to consolidated mode types. #&#39; Consolidated mode types represent modes that have similar characteristics and #&#39; bus equivalency values. The consolidate mode codes and their meanings are as #&#39; follows: #&#39; DR = Demand-responsive #&#39; VP = Vanpool and similar #&#39; MB = Standard motor bus #&#39; RB = Bus rapid transit and commuter bus #&#39; MG = Monorail/automated guideway #&#39; SR = Streetcar/trolley bus/inclined plain #&#39; HR = Heavy Rail/Light Rail #&#39; CR = Commuter Rail/Hybrid Rail/Cable Car/Aerial Tramway #&#39; #&#39; \\describe{ #&#39; \\item{Mode}{abbreviation for consolidated mode} #&#39; \\item{BusEquivalents}{numeric factor for converting revenue miles to bus equivalents} #&#39; } #&#39; @source AssignTransitService.R script. &quot;BusEquivalents_df&quot; usethis::use_data(BusEquivalents_df, overwrite = TRUE) #Save the vehicle mile factors #----------------------------- #&#39; Revenue miles to vehicle miles conversion factors #&#39; #&#39; Vehicle mile factors convert revenue miles for various modes to vehicle #&#39; miles for those modes. #&#39; #&#39; @format A data frame with 8 rows and 2 variables containing factors for #&#39; converting revenue miles of various modes to vehicle miles. #&#39; Mode names are 2-character codes corresponding to consolidated mode types. #&#39; Consolidated mode types represent modes that have similar characteristics and #&#39; bus equivalency values. The consolidate mode codes and their meanings are as #&#39; follows: #&#39; DR = Demand-responsive #&#39; VP = Vanpool and similar #&#39; MB = Standard motor bus #&#39; RB = Bus rapid transit and commuter bus #&#39; MG = Monorail/automated guideway #&#39; SR = Streetcar/trolley bus/inclined plain #&#39; HR = Heavy Rail/Light Rail #&#39; CR = Commuter Rail/Hybrid Rail/Cable Car/Aerial Tramway #&#39; #&#39; \\describe{ #&#39; \\item{Mode}{abbreviation for consolidated mode} #&#39; \\item{VehMiFactors}{numeric factors for converting revenue miles to #&#39; vehicle miles} #&#39; } #&#39; @source AssignTransitService.R script. &quot;VehMiFactors_df&quot; usethis::use_data(VehMiFactors_df, overwrite = TRUE) #Save the urbanized area bus equivalency data #-------------------------------------------- #&#39; Urbanized area bus equivalent revenue mile data for 2015 #&#39; #&#39; Urbanized area data from the 2015 National Transit Database (NTD) related to #&#39; the calculation of bus equivalent revenue miles and per capita values. #&#39; #&#39; @format A data frame with 439 rows and 5 variables containing urbanized area #&#39; data on bus equivalent revenue miles #&#39; #&#39; \\describe{ #&#39; \\item{UzaCode}{integer code corresponding to 5-digit code used in the NTD} #&#39; \\item{UzaName}{urbanized area name} #&#39; \\item{BusEqRevMi}{annual bus equivalent revenue miles in the urbanized area} #&#39; \\item{UzaPop}{urbanized area population} #&#39; \\item{BusEqRevMiPC}{annual bus equivalent revenue miles per capita in the urbanized area} #&#39; } #&#39; @source AssignTransitService.R script. &quot;UZABusEqRevMile_df&quot; usethis::use_data(UZABusEqRevMile_df, overwrite = TRUE) #Clean up rm(TransitParam_ls) #================================================ #SECTION 2: DEFINE THE MODULE DATA SPECIFICATIONS #================================================ #Define the data specifications #------------------------------ AssignTransitServiceSpecifications &lt;- list( #Level of geography module is applied at RunBy = &quot;Region&quot;, #Specify new tables to be created by Inp if any #Specify new tables to be created by Set if any #Specify input data Inp = items( item( NAME = items( &quot;DRRevMi&quot;, &quot;VPRevMi&quot;, &quot;MBRevMi&quot;, &quot;RBRevMi&quot;, &quot;MGRevMi&quot;, &quot;SRRevMi&quot;, &quot;HRRevMi&quot;, &quot;CRRevMi&quot;), FILE = &quot;marea_transit_service.csv&quot;, TABLE = &quot;Marea&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;compound&quot;, UNITS = &quot;MI/YR&quot;, NAVALUE = -1, SIZE = 0, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot;, DESCRIPTION = list( &quot;Annual revenue-miles of demand-responsive public transit service&quot;, &quot;Annual revenue-miles of van-pool and similar public transit service&quot;, &quot;Annual revenue-miles of standard bus public transit service&quot;, &quot;Annual revenue-miles of rapid-bus and commuter bus public transit service&quot;, &quot;Annual revenue-miles of monorail and automated guideway public transit service&quot;, &quot;Annual revenue-miles of streetcar and trolleybus public transit service&quot;, &quot;Annual revenue-miles of light rail and heavy rail public transit service&quot;, &quot;Annual revenue-miles of commuter rail, hybrid rail, cable car, and aerial tramway public transit service&quot; ) ), item( NAME = &quot;D4c&quot;, FILE = &quot;bzone_transit_service.csv&quot;, TABLE = &quot;Bzone&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;double&quot;, UNITS = &quot;aggregate peak period transit service&quot;, NAVALUE = -1, SIZE = 0, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, UNLIKELY = &quot;&quot;, TOTAL = &quot;&quot;, DESCRIPTION = &quot;Aggregate frequency of transit service within 0.25 miles of block group boundary per hour during evening peak period (Ref: EPA 2010 Smart Location Database)&quot; ) ), #Specify data to be loaded from data store Get = items( item( NAME = &quot;Marea&quot;, TABLE = &quot;Marea&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;character&quot;, UNITS = &quot;ID&quot;, PROHIBIT = &quot;&quot;, ISELEMENTOF = &quot;&quot; ), item( NAME = &quot;Marea&quot;, TABLE = &quot;Bzone&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;character&quot;, UNITS = &quot;ID&quot;, PROHIBIT = &quot;&quot;, ISELEMENTOF = &quot;&quot; ), item( NAME = items( &quot;DRRevMi&quot;, &quot;VPRevMi&quot;, &quot;MBRevMi&quot;, &quot;RBRevMi&quot;, &quot;MGRevMi&quot;, &quot;SRRevMi&quot;, &quot;HRRevMi&quot;, &quot;CRRevMi&quot;), TABLE = &quot;Marea&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;compound&quot;, UNITS = &quot;MI/YR&quot;, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot; ), item( NAME = &quot;UrbanPop&quot;, TABLE = &quot;Bzone&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;people&quot;, UNITS = &quot;PRSN&quot;, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot; ) ), #Specify data to saved in the data store Set = items( item( NAME = &quot;TranRevMiPC&quot;, TABLE = &quot;Marea&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;compound&quot;, UNITS = &quot;MI/PRSN/YR&quot;, NAVALUE = -1, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, SIZE = 0, DESCRIPTION = &quot;Ratio of annual bus-equivalent revenue-miles (i.e. revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population&quot; ), item( NAME = items( &quot;VanDvmt&quot;, &quot;BusDvmt&quot;, &quot;RailDvmt&quot; ), TABLE = &quot;Marea&quot;, GROUP = &quot;Year&quot;, TYPE = &quot;compound&quot;, UNITS = &quot;MI/DAY&quot;, NAVALUE = -1, PROHIBIT = c(&quot;NA&quot;, &quot;&lt; 0&quot;), ISELEMENTOF = &quot;&quot;, SIZE = 0, DESCRIPTION = items( &quot;Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services.&quot;, &quot;Total daily miles traveled by buses of various sizes to provide bus service of various types.&quot;, &quot;Total daily miles traveled by light rail, heavy rail, commuter rail, and similar types of vehicles.&quot; ) ) ) ) #Save the data specifications list #--------------------------------- #&#39; Specifications list for AssignTransitService module #&#39; #&#39; A list containing specifications for the AssignTransitService module. #&#39; #&#39; @format A list containing 4 components: #&#39; \\describe{ #&#39; \\item{RunBy}{the level of geography that the module is run at} #&#39; \\item{Inp}{scenario input data to be loaded into the datastore for this #&#39; module} #&#39; \\item{Get}{module inputs to be read from the datastore} #&#39; \\item{Set}{module outputs to be written to the datastore} #&#39; } #&#39; @source AssignTransitService.R script. &quot;AssignTransitServiceSpecifications&quot; usethis::use_data(AssignTransitServiceSpecifications, overwrite = TRUE) #======================================================= #SECTION 3: DEFINE FUNCTIONS THAT IMPLEMENT THE SUBMODEL #======================================================= #This function calculates the annual bus equivalent revenue miles per capita for #the urbanized area from the number of annual revenue miles for different #public transit modes and the urban area population. #Main module function that calculates bus equivalent revenue miles per capita #---------------------------------------------------------------------------- #&#39; Calculate bus equivalent revenue miles per capita by Marea. #&#39; #&#39; \\code{AssignTransitService} calculate bus equivalent revenue miles per capita. #&#39; #&#39; This function calculates bus equivalent revenue miles per capita for each #&#39; Marea. #&#39; #&#39; @param L A list containing the components listed in the Get specifications #&#39; for the module. #&#39; @return A list containing the components specified in the Set #&#39; specifications for the module. #&#39; @name AssignTransitService #&#39; @import visioneval #&#39; @export AssignTransitService &lt;- function(L) { #Set up #------ #Fix seed as synthesis involves sampling set.seed(L$G$Seed) #Define vector of modes Md &lt;- as.character(BusEquivalents_df$Mode) #Define vector of Mareas Ma &lt;- L$Year$Marea$Marea #Calculate bus equivalent revenue miles #-------------------------------------- #Make table of revenue miles by Marea RevMi_df &lt;- data.frame(L$Year$Marea[paste0(Md, &quot;RevMi&quot;)]) colnames(RevMi_df) &lt;- Md rownames(RevMi_df) &lt;- Ma RevMi_MaMd &lt;- as.matrix(RevMi_df) #Calculate the bus equivalent revenue miles BusEq_Md &lt;- BusEquivalents_df$BusEquivalents names(BusEq_Md) &lt;- Md BusEqRevMi_Ma &lt;- rowSums(sweep(RevMi_MaMd, 2, BusEq_Md, &quot;*&quot;))[Ma] #Calculate the bus equivalent revenue miles per capita #----------------------------------------------------- #Calculate population in the urbanized area UrbanPop_Ma &lt;- tapply(L$Year$Bzone$UrbanPop, L$Year$Bzone$Marea, sum)[Ma] #Calculate Marea bus equivalent revenue miles per capita TranRevMiPC_Ma &lt;- BusEqRevMi_Ma / UrbanPop_Ma #Calculate vehicle miles by vehicle type #--------------------------------------- #Make vector of vehicle miles factors conforming with RevMi_df VehMiFactors_Md &lt;- VehMiFactors_df$VehMiFactors names(VehMiFactors_Md) &lt;- VehMiFactors_df$Mode VehMiFactors_Md &lt;- VehMiFactors_Md[names(RevMi_df)] #Calculate daily vehicle miles by Marea and mode VehMi_MaMd &lt;- as.matrix(sweep(RevMi_df, 2, VehMiFactors_Md, &quot;*&quot;)) / 365 #Define correspondence between modes and vehicle types ModeToVehType_ &lt;- c( DR = &quot;Van&quot;, VP = &quot;Van&quot;, MB = &quot;Bus&quot;, RB = &quot;Bus&quot;, MG = &quot;Rail&quot;, SR = &quot;Rail&quot;, HR = &quot;Rail&quot;, CR = &quot;Rail&quot; ) ModeToVehType_ &lt;- ModeToVehType_[colnames(VehMi_MaMd)] VehMi_df &lt;- data.frame( t( apply(VehMi_MaMd, 1, function(x) { tapply(x, ModeToVehType_, sum) }) ) ) #Return the results #------------------ #Initialize output list Out_ls &lt;- initDataList() Out_ls$Year$Marea &lt;- list(TranRevMiPC = TranRevMiPC_Ma, VanDvmt = VehMi_df$Van, BusDvmt = VehMi_df$Bus, RailDvmt = VehMi_df$Rail) #Return the outputs list Out_ls } #=============================================================== #SECTION 4: MODULE DOCUMENTATION AND AUXILLIARY DEVELOPMENT CODE #=============================================================== #Run module automatic documentation #---------------------------------- documentModule(&quot;AssignTransitService&quot;) #Test code to check specifications, loading inputs, and whether datastore #contains data needed to run module. Return input list (L) to use for developing #module functions #------------------------------------------------------------------------------- # library(filesstrings) # library(visioneval) # source(&quot;tests/scripts/test_functions.R&quot;) # #Set up test environment # TestSetup_ls &lt;- list( # TestDataRepo = &quot;../Test_Data/VE-RSPM&quot;, # DatastoreName = &quot;Datastore.tar&quot;, # LoadDatastore = TRUE, # TestDocsDir = &quot;verspm&quot;, # ClearLogs = TRUE, # # SaveDatastore = TRUE # SaveDatastore = FALSE # ) # setUpTests(TestSetup_ls) # #Run test module # TestDat_ &lt;- testModule( # ModuleName = &quot;AssignTransitService&quot;, # LoadDatastore = TRUE, # SaveDatastore = TRUE, # DoRun = FALSE # ) # L &lt;- TestDat_$L # R &lt;- AssignTransitService(L) 3.7.6 Appendix F: Example Test Script from the VESimHouseholds Package #vestate_test.R #-------------- #Load packages and test functions library(visioneval) library(filesstrings) source(&quot;tests/scripts/test_functions.R&quot;) #Define test setup parameters TestSetup_ls &lt;- list( TestDataRepo = &quot;../Test_Data/VE-State&quot;, DatastoreName = &quot;Datastore.tar&quot;, LoadDatastore = FALSE, TestDocsDir = &quot;vestate&quot;, ClearLogs = TRUE, # SaveDatastore = TRUE SaveDatastore = FALSE ) #Define the module tests Tests_ls &lt;- list( list(ModuleName = &quot;CreateHouseholds&quot;, LoadDatastore = FALSE, SaveDatastore = TRUE, DoRun = TRUE), list(ModuleName = &quot;PredictWorkers&quot;, LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE), list(ModuleName = &quot;AssignLifeCycle&quot;, LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE), list(ModuleName = &quot;PredictIncome&quot;, LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE) ) #Set up, run tests, and save test results setUpTests(TestSetup_ls) doTests(Tests_ls, TestSetup_ls) saveTestResults(TestSetup_ls) 3.7.7 Appendix G: VisionEval Model User Functions 3.7.8 getYears: Retrieve years 3.7.8.1 Description getYears a visioneval framework model user function that reads the Years component from the the model state file. 3.7.8.2 Usage getYears() 3.7.8.3 Details This is a convenience function to make it easier to retrieve the Years component of the model state file which lists all of the specified model run years. If the Years component includes the base year, then the returned vector of years places the base year first in the order. This ordering is important because some modules calculate future year values by pivoting off of base year values so the base year must be run first. 3.7.8.4 Value A character vector of the model run years. 3.7.8.5 Calls getModelState 3.7.9 initializeModel: Initialize model. 3.7.9.1 Description initializeModel a visioneval framework model user function that initializes a VisionEval model, loading all parameters and inputs, and making checks to ensure that model can run successfully. 3.7.9.2 Usage initializeModel(ParamDir = &quot;defs&quot;, RunParamFile = &quot;run_parameters.json&quot;, GeoFile = &quot;geo.csv&quot;, ModelParamFile = &quot;model_parameters.json&quot;, LoadDatastore = FALSE, DatastoreName = NULL, SaveDatastore = TRUE) 3.7.9.3 Arguments Argument Description ParamDir A string identifying the relative or absolute path to the directory where the parameter and geography definition files are located. The default value is defs. RunParamFile A string identifying the name of a JSON-formatted text file that contains parameters needed to identify and manage the model run. The default value is run_parameters.json. GeoFile A string identifying the name of a text file in comma-separated values format that contains the geographic specifications for the model. The default value is geo.csv. ModelParamFile A string identifying the name of a JSON-formatted text file that contains global model parameters that are important to a model and may be shared by several modules. LoadDatastore A logical identifying whether an existing datastore should be loaded. DatastoreName A string identifying the full path name of a datastore to load or NULL if an existing datastore in the working directory is to be loaded. SaveDatastore A string identifying whether if an existing datastore in the working directory should be saved rather than removed. 3.7.9.4 Details This function does several things to initialize the model environment and datastore including: 1) Initializing a file that is used to keep track of the state of key model run variables and the datastore; 2) Initializes a log to which messages are written; 3) Creates the datastore and initializes its structure, reads in and checks the geographic specifications and initializes the geography in the datastore, or loads an existing datastore if one has been identified; 4) Parses the model run script to identify the modules in their order of execution and checks whether all the identified packages are installed and the modules exist in the packages; 5) Checks that all data requested from the datastore will be available when it is requested and that the request specifications match the datastore specifications; 6) Checks all of the model input files to determine whether they they are complete and comply with specifications. 3.7.9.5 Value None. The function prints to the log file messages which identify whether or not there are errors in initialization. It also prints a success message if initialization has been successful. 3.7.9.6 Calls assignDatastoreFunctions, checkDataset, checkModuleExists, checkModuleSpecs, getModelState, getModuleSpecs, initDatastoreGeography, initLog, initModelStateFile, inputsToDatastore, loadDatastore, loadModelParameters, parseModelScript, processModuleInputs, processModuleSpecs, readGeography, readModelState, setModelState, simDataTransactions, writeLog 3.7.10 readDatastoreTables: Read multiple datasets from multiple tables in datastores 3.7.10.1 Description readDatastoreTables a visioneval framework model user function that reads datasets from one or more tables in a specified group in one or more datastores 3.7.10.2 Usage readDatastoreTables(Tables_ls, Group, DstoreLocs_, DstoreType) 3.7.10.3 Arguments Argument Description Tables_ls a named list where the name of each component is the name of a table in a datastore group and the value is a string vector of the names of the datasets to be retrieved. Group a string that is the name of the group to retrieve the table datasets from. DstoreLocs_ a string vector identifying the paths to all of the datastores to extract the datasets from. Each entry must be the full relative path to a datastore (e.g.Â tests/Datastore). DstoreType a string identifying the type of datastore (e.g.Â RD, H5). Note 3.7.10.4 Details This function can read multiple datasets in one or more tables in a group. More than one datastore my be specified so that if datastore references are used in a model run, datasets from the referenced datastores may be queried as well. Note that the capability for querying multiple datastores is only for the purpose of querying datastores for a single model scenario. This capability should not be used to compare multiple scenarios. The function does not segregate datasets by datastore. Attempting to use this function to compare multiple scenarios could produce unpredictable results. 3.7.10.5 Value A named list having two components. The Data component is a list containing the datasets from the datastores where the name of each component of the list is the name of a table from which identified datasets are retrieved and the value is a data frame containing the identified datasets. The Missing component is a list which identifies the datasets that are missing in each table. 3.7.10.6 Calls checkDataset, checkTableExistence, readModelState 3.7.11 runModule: Run module. 3.7.11.1 Description runModule a visioneval framework model user function that runs a module. 3.7.11.2 Usage runModule(ModuleName, PackageName, RunFor, RunYear, StopOnErr = TRUE) 3.7.11.3 Arguments Argument Description ModuleName A string identifying the name of a module object. PackageName A string identifying the name of the package the module is a part of. RunFor A string identifying whether to run the module for all years AllYears, only the base year BaseYear, or for all years except the base year NotBaseYear. RunYear A string identifying the run year. StopOnErr A logical identifying whether model execution should be stopped if the module transmits one or more error messages or whether execution should continue with the next module. The default value is TRUE. This is how error handling will ordinarily proceed during a model run. A value of FALSE is used when Initialize modules in packages are run during model initialization. These Initialize modules are used to check and preprocess inputs. For this purpose, the module will identify any errors in the input data, the initializeModel function will collate all the data errors and print them to the log. 3.7.11.4 Details This function runs a module for a specified year. 3.7.11.5 Value None. The function writes results to the specified locations in the datastore and prints a message to the console when the module is being run. 3.7.11.6 Calls createGeoIndexList, getFromDatastore, getModelState, processModuleSpecs, setInDatastore, writeLog 3.7.12 Appendix H: VisionEval Module Developer Functions 3.7.13 addErrorMsg: Add an error message to the results list 3.7.13.1 Description addErrorMsg a visioneval framework module developer function that adds an error message to the Errors component of the module results list that is passed back to the framework. 3.7.13.2 Usage addErrorMsg(ResultsListName, ErrMsg) 3.7.13.3 Arguments Argument Description ResultsListName the name of the results list given as a character string ErrMsg a character string that contains the error message 3.7.13.4 Details This function is a convenience function for module developers for passing error messages back to the framework. The preferred method for handling errors in module execution is for the module to handle the error by passing one or more error messages back to the framework. The framework will then write error messages to the log and stop execution. Error messages are stored in a component of the returned list called Errors. This component is a string vector where each element is an error message. The addErrorMsg will create the Error component if it does not already exist and will add an error message to the vector. 3.7.13.5 Value None. The function modifies the results list by adding an error message to the Errors component of the results list. It creates the Errors component if it does not already exist. 3.7.13.6 Calls 3.7.14 addWarningMsg: Add a warning message to the results list 3.7.14.1 Description addWarningMsg a visioneval framework module developer function that adds an warning message to the Warnings component of the module results list that is passed back to the framework. 3.7.14.2 Usage addWarningMsg(ResultsListName, WarnMsg) 3.7.14.3 Arguments Argument Description ResultsListName the name of the results list given as a character string WarnMsg a character string that contains the warning message 3.7.14.4 Details This function is a convenience function for module developers for passing warning messages back to the framework. The preferred method for handling warnings in module execution is for the module to handle the warning by passing one or more warning messages back to the framework. The framework will then write warning messages to the log and stop execution. Warning messages are stored in a component of the returned list called Warnings. This component is a string vector where each element is an warning message. The addWarningMsg will create the Warning component if it does not already exist and will add a warning message to the vector. 3.7.14.5 Value None. The function modifies the results list by adding a warning message to the Warnings component of the results list. It creates the Warnings component if it does not already exist. 3.7.14.6 Calls 3.7.15 applyBinomialModel: Applies an estimated binomial model to a set of input values. 3.7.15.1 Description applyBinomialModel a visioneval framework module developer function that applies an estimated binomial model to a set of input data. 3.7.15.2 Usage applyBinomialModel(Model_ls, Data_df, TargetProp = NULL, CheckTargetSearchRange = FALSE, ApplyRandom = TRUE, ReturnProbs = FALSE) 3.7.15.3 Arguments Argument Description Model_ls a list which contains the following components: Type which has a value of binomial; Formula a string representation of the model equation; Choices a two-element vector listing the choice set. The first element is the choice that the binary logit model equation predicts the odds of; PrepFun a function which prepares the input data frame for the model application. If no preparation, this element of the list should not be present or should be set equal to NULL; SearchRange a two-element numeric vector which specifies the acceptable search range to use when determining the factor for adjusting the model constant. RepeatVar a string which identifies the name of a field to use for repeated draws of the model. This is used in the case where for example the input data is households and the output is vehicles and the repeat variable is the number of vehicles in the household. ApplyRandom a logical identifying whether the results will be affected by random draws (i.e.Â if a random number in range 0 - 1 is less than the computed probability) or if a probability cutoff is used (i.e.Â if the computed probability is greater then 0.5). This is an optional component. If it isnt present, the function runs with ApplyRandom = TRUE. Data_df a data frame containing the data required for applying the model. TargetProp a number identifying a target proportion for the default choice to be achieved for the input data or NULL if there is no target proportion to be achieved. CheckTargetSearchRange a logical identifying whether the function is to only check whether the specified SearchRange for the model will produce acceptable values (i.e.Â no NA or NaN values). If FALSE (the default), the function will run the model and will not check the target search range. ApplyRandom a logical identifying whether the outcome will be be affected by random draws (i.e.Â if a random number in range 0 - 1 is less than the computed probability) or if a probability cutoff is used (i.e.Â if the computed probability is greater than 0.5) ReturnProbs a logical identifying whether to return the calculated probabilities rather than the assigned results. The default value is FALSE. 3.7.15.4 Details The function calculates the result of applying a binomial logit model to a set of input data. If a target proportion (TargetProp) is specified, the function calls the binarySearch function to calculate an adjustment to the constant of the model equation so that the population proportion matches the target proportion. The function will also test whether the target search range specified for the model will produce acceptable values. 3.7.15.5 Value a vector of choice values for each record of the input data frame if the model is being run, or if the function is run to only check the target search range, a two-element vector identifying if the search range produces NA or NaN values. 3.7.15.6 Calls binarySearch 3.7.16 applyLinearModel: Applies an estimated linear model to a set of input values. 3.7.16.1 Description applyLinearModel a visioneval framework module developer function that applies an estimated linear model to a set of input data. 3.7.16.2 Usage applyLinearModel(Model_ls, Data_df, TargetMean = NULL, CheckTargetSearchRange = FALSE) 3.7.16.3 Arguments Argument Description Model_ls a list which contains the following components: Type which has a value of linear; Formula a string representation of the model equation; PrepFun a function which prepares the input data frame for the model application. If no preparation, this element of the list should not be present or should be set equal to NULL; SearchRange a two-element numeric vector which specifies the acceptable search range to use when determining the dispersion factor. OutFun a function that is applied to transform the results of applying the linear model. For example to untransform a power-transformed variable. If no transformation is necessary, this element of the list should not be present or should be set equal to NULL. Data_df a data frame containing the data required for applying the model. TargetMean a number identifying a target mean value to be achieved or NULL if there is no target. CheckTargetSearchRange a logical identifying whether the function is to only check whether the specified SearchRange for the model will produce acceptable values (i.e.Â no NA or NaN values). If FALSE (the default), the function will run the model and will not check the target search range. 3.7.16.4 Details The function calculates the result of applying a linear regression model to a set of input data. If a target mean value (TargetMean) is specified, the function calculates a standard deviation of a sampling distribution which is applied to linear model results. For each value returned by the linear model, a sample is drawn from a normal distribution where the mean value of the distribution is the linear model result and the standard deviation of the distibution is calculated by the binary search to match the population mean value to the target mean value. This process is meant to be applied to linear model where the dependent variable is power transformed. Applying the sampling distribution to the linear model results increases the dispersion of results to match the observed dispersion and also matches the mean values of the untransformed results. This also enables the model to be applied to situations where the mean value is different than the observed mean value. 3.7.16.5 Value a vector of numeric values for each record of the input data frame if the model is being run, or if the function is run to only check the target search range, a summary of predicted values when the model is run with dispersion set at the high value of the search range. 3.7.16.6 Calls binarySearch 3.7.17 binarySearch: Binary search function to find a parameter which achieves a target value. 3.7.17.1 Description binarySearch a visioneval framework module developer function that uses a binary search algorithm to find the value of a function parameter for which the function achieves a target value. 3.7.17.2 Usage binarySearch(Function, SearchRange_, ..., Target = 0, DoWtAve = TRUE, MaxIter = 100, Tolerance = 1e-04) 3.7.17.3 Arguments Argument Description Function a function which returns a value which is compared to the Target argument. The function must take as its first argument a value which from the SearchRange_. It must return a value that may be compared to the Target value. SearchRange_ a two element numeric vector which has the lowest and highest values of the parameter range within which the search will be carried out. ... one or more optional arguments for the Function. Target a numeric value that is compared with the return value of the Function. DoWtAve a logical indicating whether successive weighted averaging is to be done. This is useful for getting stable results for stochastic calculations. MaxIter an integer specifying the maximum number of iterations to all the search to attempt. Tolerance a numeric value specifying the proportional difference between the Target and the return value of the Function to determine when the search is complete. 3.7.17.4 Details A binary search algorithm is used by several modules to calibrate the intercept of a binary logit model to match a specified proportion or to calibrate a dispersion parameter for a linear model to match a mean value. This function implements a binary search algorithm in a consistent manner to be used in all modules that need it. It is written to work with stochastic models which by their nature dont produce the same outputs given the same inputs and so will not converge reliably. To deal with the stochasticity, this function uses a successive averaging approach to smooth out the effect of stochastic variation on reliable convergence. Rather than use the results of a single search iteration to determine the next value range to use in the search, a weighted average of previous values is used with the more recent values being weighted more heavily. 3.7.17.5 Value the value in the SearchRange_ for the function parameter which matches the target value. 3.7.17.6 Calls 3.7.18 checkModuleOutputs: Check module outputs for consistency with specifications 3.7.18.1 Description checkModuleOutputs a visioneval framework module developer function that checks output list produced by a module for consistency with the modules specifications. 3.7.18.2 Usage checkModuleOutputs(Data_ls, ModuleSpec_ls, ModuleName) 3.7.18.3 Arguments Argument Description Data_ls A list of all the datasets returned by a module in the standard list form required by the VisionEval model system. ModuleSpec_ls A list of module specifications in the standard list form required by the VisionEval model system. ModuleName A string identifying the name of the module. 3.7.18.4 Details This function is used to check whether the output list produced by a module is consistent with the modules specifications. If there are any specifications for creating tables, the function checks whether the output list contains the table(s), if the LENGTH attribute of the table(s) are present, and if the LENGTH attribute(s) are consistent with the length of the datasets to be saved in the table(s). Each of the datasets in the output list are checked against the specifications. These include checking that the data type is consistent with the specified type and whether all values are consistent with PROHIBIT and ISELEMENTOF conditions. For character types, a check is made to ensure that a SIZE attribute exists and that the size is sufficient to store all characters. 3.7.18.5 Value A character vector containing a list of error messages or having a length of 0 if there are no error messages. 3.7.18.6 Calls checkDataConsistency, processModuleSpecs 3.7.19 documentModule: Produces markdown documentation for a module 3.7.19.1 Description documentModule a visioneval framework module developer function that creates a vignettes directory if one does not exist and produces module documentation in markdown format which is saved in the vignettes directory. 3.7.19.2 Usage documentModule(ModuleName) 3.7.19.3 Arguments Argument Description ModuleName A string identifying the name of the module (e.g.Â CalculateHouseholdDvmt) 3.7.19.4 Details This function produces documentation for a module in markdown format. A vignettes directory is created if it does not exist and the markdown file and any associated resources such as image files are saved in that directory. The function is meant to be called within and at the end of the module script. The documentation is created from a commented block within the module script which is enclosed by the opening tag, , and the closing tag, . (Note, these tags must be commented along with all the other text in the block). This commented block may also include tags which identify resources to include within the documentation. These tags identify the type of resource and the name of the resource which is located in the data directory. A colon (:) is used to separate the resource type and resource name identifiers. For example: &lt;txt:DvmtModel_ls\\(EstimationStats\\)NonMetroZeroDvmt_GLM$Summary&gt; is a tag which will insert text which is located in a component of the DvmtModel_ls list that is saved as an rdata file in the data directory (i.e.Â data/DvmtModel_ls.rda). The following 3 resource types are recognized: * txt - a vector of strings which are inserted as lines of text in a code block * fig - a png file which is inserted as an image * tab - a matrix or data frame which is inserted as a table The function also reads in the module specifications and creates tables that document user input files, data the module gets from the datastore, and the data the module produces that is saved in the datastore. This function is intended to be called in the R script which defines the module. It is placed near the end of the script (after the portions of the script which estimate module parameters and define the module specifications) so that it is run when the package is built. It may not properly in other contexts. 3.7.19.5 Value None. The function has the side effects of creating a vignettes directory if one does not exist, copying identified fig resources to the vignettes directory, and saving the markdown documentation file to the vignettes directory. The markdown file is named with the module name and has a md suffix. 3.7.19.6 Calls expandSpec, processModuleSpecs 3.7.20 getRegisteredGetSpecs: Returns Get specifications for registered datasets. 3.7.20.1 Description getRegisteredGetSpecs a visioneval framework module developer function that returns a data frame of Get specifications for datasets in the VisionEval name registry. 3.7.20.2 Usage getRegisteredGetSpecs(Names_, Tables_, Groups_, NameRegistryDir = NULL) 3.7.20.3 Arguments Argument Description Names_ A character vector of the dataset names to get specifications for. Tables_ A character vector of the tables that the datasets are a part of. Groups_ A character vector of the groups that the tables are a part of. NameRegistryDir a string identifying the path to the directory where the name registry file is located. 3.7.20.4 Details The VisionEval name registry (VENameRegistry.json) keeps track of the dataset names created by all registered modules by reading in datasets specified in the module Inp specifications or by returning calculated datasets as specified in the module Set specifications. This function reads in the name registry and returns Get specifications for identified datasets. 3.7.20.5 Value A data frame containing the Get specifications for the identified datasets. 3.7.20.6 Calls 3.7.21 initDataList: Initialize a list for data transferred to and from datastore 3.7.21.1 Description initDataList a visioneval framework module developer function that creates a list to be used for transferring data to and from the datastore. 3.7.21.2 Usage initDataList() 3.7.21.3 Details This function initializes a list to store data that is transferred from the datastore to a module or returned from a module to be saved in the datastore. The list has 3 named components (Global, Year, and BaseYear). This is the standard structure for data being passed to and from a module and the datastore. 3.7.21.4 Value A list that has 3 named list components: Global, Year, BaseYear 3.7.21.5 Calls 3.7.22 item: Alias for list function. 3.7.22.1 Description item a visioneval framework module developer function that is an alias for the list function whose purpose is to make module specifications easier to read. 3.7.22.2 Usage item() 3.7.22.3 Details This function defines an alternate name for list. It is used in module specifications to identify data items in the Inp, Get, and Set portions of the specifications. 3.7.22.4 Value a list. 3.7.22.5 Calls 3.7.23 items: Alias for list function. 3.7.23.1 Description items a visioneval framework module developer function that is an alias for the list function whose purpose is to make module specifications easier to read. 3.7.23.2 Usage items() 3.7.23.3 Details This function defines an alternate name for list. It is used in module specifications to identify a group of data items in the Inp, Get, and Set portions of the specifications. 3.7.23.4 Value a list. 3.7.23.5 Calls 3.7.24 loadPackageDataset: Load a VisionEval package dataset 3.7.24.1 Description loadPackageDataset a visioneval framework module developer function which loads a dataset identified by name from the VisionEval package containing the dataset. 3.7.24.2 Usage loadPackageDataset(DatasetName) 3.7.24.3 Arguments Argument Description DatasetName A string identifying the name of the dataset. 3.7.24.4 Details This function is used to load a dataset identified by name from the VisionEval package which contains the dataset. Using this function is the preferred alternative to hard-wiring the loading using package::dataset notation because it enables users to switch between module versions contained in different packages. For example, there may be different versions of the VEPowertrainsAndFuels package which have different default assumptions about light-duty vehicle powertrain mix and characteristics by model year. Using this function, the module developer only needs to identify the dataset name. The function uses DatasetsByPackage_df data frame in the model state list to identify the package which contains the dataset. It then retrieves and returns the dataset 3.7.24.5 Value The identified dataset. 3.7.24.6 Calls getModelState 3.7.25 makeModelFormulaString: Makes a string representation of a model equation. 3.7.25.1 Description makeModelFormulaString a visioneval framework module developer function that creates a string equivalent of a model equation. 3.7.25.2 Usage makeModelFormulaString(EstimatedModel) 3.7.25.3 Arguments Argument Description EstimatedModel the return value of the lm or glm functions. 3.7.25.4 Details The return values of model estimation functions such as lm and glm contain a large amount of information in addition to the parameter estimates for the specified model. This is particularly the case when the estimation dataset is large. Most of this information is not needed to apply the model and including it can add substantially to the size of a package that includes several estimated models. All that is really needed to implement an estimated model is an equation of the model terms and estimated coefficients. This function creates a string representation of the model equation. 3.7.25.5 Value a string expression of the model equation. 3.7.25.6 Calls 3.7.26 processEstimationInputs: Load estimation data 3.7.26.1 Description processEstimationInputs a visioneval framework module developer function that checks whether specified model estimation data meets specifications and returns the data in a data frame. 3.7.26.2 Usage processEstimationInputs(Inp_ls, FileName, ModuleName) 3.7.26.3 Arguments Argument Description Inp_ls A list that describes the specifications for the estimation file. This list must meet the framework standards for specification description. FileName A string identifying the file name. This is the file name without any path information. The file must located in the inst/extdata directory of the package. ModuleName A string identifying the name of the module the estimation data is being used in. 3.7.26.4 Details This function is used to check whether a specified CSV-formatted data file used in model estimation is correctly formatted and contains acceptable values for all the datasets contained within. The function checks whether the specified file exists in the inst/extdata directory. If the file does not exist, the function stops and transmits a standard error message that the file does not exist. If the file does exist, the function reads the file into the data frame and then checks whether it contains the specified columns and that the data meets all specifications. If any of the specifications are not met, the function stops and transmits an error message. If there are no data errors the function returns a data frame containing the data in the file. 3.7.26.5 Value A data frame containing the estimation data according to specifications with data types consistent with specifications and columns not specified removed. Execution stops if any errors are found. Error messages are printed to the console. Warnings are also printed to the console. 3.7.26.6 Calls checkDataConsistency, expandSpec, Types 3.7.27 readVENameRegistry: Reads the VisionEval name registry. 3.7.27.1 Description readVENameRegistry a visioneval framework module developer function that reads the VisionEval name registry and returns a list of data frames containing the Inp and Set specifications. 3.7.27.2 Usage readVENameRegistry(NameRegistryDir = NULL) 3.7.27.3 Arguments Argument Description NameRegistryDir a string identifying the path to the directory where the name registry file is located. 3.7.27.4 Details The VisionEval name registry (VENameRegistry.json) keeps track of the dataset names created by all registered modules by reading in datasets specified in the module Inp specifications or by returning calculated datasets as specified in the module Set specifications. This function reads the VisionEval name registry and returns a list of data frames containing the registered Inp and Set specifications. 3.7.27.5 Value A list having two components: Inp and Set. Each component is a data frame containing the respective Inp and Set specifications of registered modules. 3.7.27.6 Calls 3.7.28 testModule: Test module 3.7.28.1 Description testModule a visioneval framework module developer function that sets up a test environment and tests a module. 3.7.28.2 Usage testModule(ModuleName, ParamDir = &quot;defs&quot;, RunParamFile = &quot;run_parameters.json&quot;, GeoFile = &quot;geo.csv&quot;, ModelParamFile = &quot;model_parameters.json&quot;, LoadDatastore = FALSE, SaveDatastore = TRUE, DoRun = TRUE, RunFor = &quot;AllYears&quot;, StopOnErr = TRUE, RequiredPackages = NULL, TestGeoName = NULL) 3.7.28.3 Arguments Argument Description ModuleName A string identifying the module name. ParamDir A string identifying the location of the directory where the run parameters, model parameters, and geography definition files are located. The default value is defs. This directory should be located in the tests directory. RunParamFile A string identifying the name of the run parameters file. The default value is run_parameters.json. GeoFile A string identifying the name of the file which contains geography definitions. ModelParamFile A string identifying the name of the file which contains model parameters. The default value is model_parameters.json. LoadDatastore A logical value identifying whether to load an existing datastore. If TRUE, it loads the datastore whose name is identified in the run_parameters.json file. If FALSE it initializes a new datastore. SaveDatastore A logical value identifying whether the module outputs will be written to the datastore. If TRUE the module outputs are written to the datastore. If FALSE the outputs are not written to the datastore. DoRun A logical value identifying whether the module should be run. If FALSE, the function will initialize a datastore, check specifications, and load inputs but will not run the module but will return the list of module specifications. That setting is useful for module development in order to create the all the data needed to assist with module programming. It is used in conjunction with the getFromDatastore function to create the dataset that will be provided by the framework. The default value for this parameter is TRUE. In that case, the module will be run and the results will checked for consistency with the Set specifications. RunFor A string identifying what years the module is to be tested for. The value must be the same as the value that is used when the module is run in a module. Allowed values are AllYears, BaseYear, and NotBaseYear. StopOnErr A logical identifying whether model execution should be stopped if the module transmits one or more error messages or whether execution should continue with the next module. The default value is TRUE. This is how error handling will ordinarily proceed during a model run. A value of FALSE is used when Initialize modules in packages are run during model initialization. These Initialize modules are used to check and preprocess inputs. For this purpose, the module will identify any errors in the input data, the initializeModel function will collate all the data errors and print them to the log. RequiredPackages A character vector identifying any packages that must be installed in order to test the module because the module either has a soft reference to a module in the package (i.e.Â the Call spec only identifies the name of the module being called) or a soft reference to a dataset in the module (i.e.Â only identifies the name of the dataset). The default value is NULL. TestGeoName A character vector identifying the name of the geographic area for which data is to be loaded. This argument has effect only if the DoRun argument is FALSE. It enables the module developer to choose the geographic area data is to be loaded for when developing a module that is run for geography other than the region. For example if a module is run at the Azone level, the user can specify the name of the Azone that data is to be loaded for. If the name is misspecified an error will be flagged. 3.7.28.4 Details This function is used to set up a test environment and test a module to check that it can run successfully in the VisionEval model system. The function sets up the test environment by switching to the tests directory and initializing a model state list, a log file, and a datastore. The user may use an existing datastore rather than initialize a new datastore. The use case for loading an existing datastore is where a package contains several modules that run in sequence. The first module would initialize a datastore and then subsequent modules use the datastore that is modified by testing the previous module. When run this way, it is also necessary to set the SaveDatastore argument equal to TRUE so that the module outputs will be saved to the datastore. The function performs several tests including checking whether the module specifications are written properly, whether the the test inputs are correct and complete and can be loaded into the datastore, whether the datastore contains all the module inputs identified in the Get specifications, whether the module will run, and whether all of the outputs meet the modules Set specifications. The latter check is carried out in large part by the checkModuleOutputs function that is called. 3.7.28.5 Value If DoRun is FALSE, the return value is a list containing the module specifications. If DoRun is TRUE, there is no return value. The function writes out messages to the console and to the log as the testing proceeds. These messages include the time when each test starts and when it ends. When a key test fails, requiring a fix before other tests can be run, execution stops and an error message is written to the console. Detailed error messages are also written to the log. 3.7.28.6 Calls assignDatastoreFunctions, checkDataset, checkModuleOutputs, checkModuleSpecs, createGeoIndexList, getFromDatastore, getModelState, getYears, initDatastoreGeography, initLog, initModelStateFile, inputsToDatastore, loadDatastore, loadModelParameters, processModuleInputs, processModuleSpecs, readGeography, readModelState, setInDatastore, setModelState, writeLog 3.7.29 Appendix I: VisionEval Framework Control Functions 3.7.30 assignDatastoreFunctions: Assign datastore interaction functions 3.7.30.1 Description assignDatastoreFunctions a visioneval framework control function that assigns the values of the functions for interacting with the datastore to the functions for the declared datastore type. 3.7.30.2 Usage assignDatastoreFunctions(DstoreType) 3.7.30.3 Arguments Argument Description DstoreType A string identifying the datastore type. 3.7.30.4 Details The visioneval framework can work with different types of datastores. For example a datastore which stores datasets in an HDF5 file or a datastore which stores datasets as RData files in a directory hierarchy. This function reads the DatastoreType parameter from the model state file and then assigns the common datastore interaction functions the values of the functions for the declared datastore type. 3.7.30.5 Value None. The function assigns datastore interactions functions to the first position of the search path. 3.7.30.6 Calls 3.7.31 checkDataConsistency: Check data consistency with specification 3.7.31.1 Description checkDataConsistency a visioneval framework control function that checks whether data to be written to a dataset is consistent with the dataset attributes. 3.7.31.2 Usage checkDataConsistency(DatasetName, Data_, DstoreAttr_) 3.7.31.3 Arguments Argument Description DatasetName A string identifying the dataset that is being checked. Data_ A vector of values that may be of type integer, double, character, or logical. DstoreAttr_ A named list where the components are the attributes of a dataset. 3.7.31.4 Details This function compares characteristics of data to be written to a dataset to the dataset attributes to determine whether they are consistent. 3.7.31.5 Value A list containing two components, Errors and Warnings. If no inconsistencies are found, both components will have zero-length character vectors. If there are one or more inconsistencies, then these components will hold vectors of error and warning messages. Mismatch between UNITS will produce a warning message. All other inconsistencies will produce error messages. 3.7.31.6 Calls checkIsElementOf, checkMatchConditions, checkMatchType 3.7.32 checkDataset: Check dataset existence 3.7.32.1 Description checkDataset a visioneval framework control function that checks whether a dataset exists in the datastore and returns a TRUE or FALSE value with an attribute of the full path to where the dataset should be located in the datastore. 3.7.32.2 Usage checkDataset(Name, Table, Group, DstoreListing_df) 3.7.32.3 Arguments Argument Description Name a string identifying the dataset name. Table a string identifying the table the dataset is a part of. Group a string or numeric representation of the group the table is a part of. DstoreListing_df a dataframe which lists the contents of the datastore as contained in the model state file. 3.7.32.4 Details This function checks whether a dataset exists. The dataset is identified by its name and the table and group names it is in. If the dataset is not in the datastore, an error is thrown. If it is located in the datastore, the full path name to the dataset is returned. 3.7.32.5 Value A logical identifying whether the dataset is in the datastore. It has an attribute that is a string of the full path to where the dataset should be in the datastore. 3.7.32.6 Calls 3.7.33 checkGeography: Check geographic specifications. 3.7.33.1 Description checkGeography a visioneval framework control function that checks geographic specifications file for model. 3.7.33.2 Usage checkGeography(Directory, Filename) 3.7.33.3 Arguments Argument Description Directory A string identifying the path to the geographic specifications file. Filename A string identifying the name of the geographic specifications file. 3.7.33.4 Details This function reads the file containing geographic specifications for the model and checks the file entries to determine whether they are internally consistent. This function is called by the readGeography function. 3.7.33.5 Value A list having two components. The first component, Messages, contains a string vector of error messages. It has a length of 0 if there are no error messages. The second component, Update, is a list of components to update in the model state file. The components of this list include: Geo, a data frame that contains the geographic specifications; BzoneSpecified, a logical identifying whether Bzones are specified; and CzoneSpecified, a logical identifying whether Czones are specified. 3.7.33.6 Calls writeLog 3.7.34 checkInputYearGeo: Check years and geography of input file 3.7.34.1 Description checkInputYearGeo a visioneval framework control function that checks the Year and Geo columns of an input file to determine whether they are complete and have no duplications. 3.7.34.2 Usage checkInputYearGeo(Year_, Geo_, Group, Table) 3.7.34.3 Arguments Argument Description Year_ the vector extract of the Year column from the input data. Geo_ the vector extract of the Geo column from the input data. Group a string identifying the GROUP specification for the data sets contained in the input file. Table a string identifying the TABLE specification for the data sets contained in the input file. 3.7.34.4 Details This function checks the Year and Geo columns of an input file to determine whether there are records for all run years specified for the model and for all geographic areas for the level of geography. It also checks for redundant year and geography entries. 3.7.34.5 Value A list containing the results of the check. The list has two mandatory components and two optional components. CompleteInput is a logical that identifies whether records are present for all years and geographic areas. DupInput identifies where are any redundant year and geography entries. If CompleteInput is FALSE, the list contains a MissingInputs component that is a string identifying the missing year and geography records. If DupInput is TRUE, the list contains a component that is a string identifying the duplicated year and geography records. 3.7.34.6 Calls getModelState 3.7.35 checkIsElementOf: Check if data values are in a specified set of values 3.7.35.1 Description checkIsElementOf a visioneval framework control function that checks whether a data vector contains any elements that are not in an allowed set of values. 3.7.35.2 Usage checkIsElementOf(Data_, SetElements_, DataName) 3.7.35.3 Arguments Argument Description Data_ A vector of data of type integer, double, character, or logical. SetElements_ A vector of allowed values. DataName A string identifying the field name of the data being compared (used for composing message identifying non-compliant fields). 3.7.35.4 Details This function is used to check whether categorical data values are consistent with the defined set of allowed values. 3.7.35.5 Value A character vector of messages which identify the data field and the condition that is not met. A zero-length vector is returned if none of the conditions are met. 3.7.35.6 Calls 3.7.36 checkMatchConditions: Check values with conditions. 3.7.36.1 Description checkMatchConditions a visioneval framework control function that checks whether a data vector contains any elements that match a set of conditions. 3.7.36.2 Usage checkMatchConditions(Data_, Conditions_, DataName, ConditionType) 3.7.36.3 Arguments Argument Description Data_ A vector of data of type integer, double, character, or logical. Conditions_ A character vector of valid R comparison expressions or an empty vector if there are no conditions. DataName A string identifying the field name of the data being compared (used for composing message identifying non-compliant fields). ConditionType A string having a value of either PROHIBIT or UNLIKELY, the two data specifications which use conditions. 3.7.36.4 Details This function checks whether any of the values in a data vector match one or more conditions. The conditions are specified in a character vector where each element is either NA (to match for the existence of NA values) or a character representation of a valid R comparison expression for comparing each element with a specified value (e.g.Â &lt; 0, &gt; 1, != 10). This function is used both for checking for the presence of prohibited values and for the presence of unlikely values. 3.7.36.5 Value A character vector of messages which identify the data field and the condition that is not met. A zero-length vector is returned if none of the conditions are met. 3.7.36.6 Calls 3.7.37 checkMatchType: Check data type 3.7.37.1 Description checkMatchType a visioneval framework control function that checks whether the data type of a data vector is consistent with specifications. 3.7.37.2 Usage checkMatchType(Data_, Type, DataName) 3.7.37.3 Arguments Argument Description Data_ A data vector. Type A string identifying the specified data type. DataName A string identifying the field name of the data being compared (used for composing message identifying non-compliant fields). 3.7.37.4 Details This function checks whether the data type of a data vector is consistent with a specified data type. An error message is generated if data cant be coerced into the specified data type without the possibility of error or loss of information (e.g.Â if a double is coerced to an integer). A warning message is generated if the specified type is character but the input data type is integer, double or logical since these can be coerced correctly, but that may not be what is intended (e.g.Â zone names may be input as numbers). Note that some modules may use NA inputs as a flag to identify case when result does not need to match a target. In this case, R will read in the type of data as logical. In this case, the function sets the data type to be the same as the specification for the data type so the function not flag a data type error. 3.7.37.5 Value A list having 2 components, Errors and Warnings. If no error or warning is identified, both components will contain a zero-length character string. If either an error or warning is identified, the relevant component will contain a character string that identifies the data field and the type mismatch. 3.7.37.6 Calls 3.7.38 checkModuleExists: Check whether a module required to run a model is present 3.7.38.1 Description checkModuleExists a visioneval framework control function that checks whether a module required to run a model is present. 3.7.38.2 Usage checkModuleExists(ModuleName, PackageName, InstalledPkgs_ = rownames(installed.packages()), CalledBy = NA) 3.7.38.3 Arguments Argument Description ModuleName A string identifying the module name. PackageName A string identifying the package name. InstalledPkgs_ A string vector identifying the names of packages that are installed. CalledBy A string vector having two named elements. The value of the Module element is the name of the calling module. The value of the Package element is the name of the package that the calling module is in. 3.7.38.4 Details This function takes a specified module and package, checks whether the package has been installed and whether the module is in the package. The function returns an error message is the package is not installed or if the module is not present in the package. If the module has been called by another module the value of the CalledBy argument will be used to identify the calling module as well so that the user understands where the call is coming from. 3.7.38.5 Value TRUE if all packages and modules are present and FALSE if not. 3.7.38.6 Calls 3.7.39 checkModuleSpecs: Checks all module specifications for completeness and for incorrect entries 3.7.39.1 Description checkModuleSpecs a visioneval framework control function that checks all module specifications for completeness and for proper values. 3.7.39.2 Usage checkModuleSpecs(Specs_ls, ModuleName) 3.7.39.3 Arguments Argument Description Specs_ls a module specifications list. ModuleName a string identifying the name of the module. This is used in the error messages to identify which module has errors. 3.7.39.4 Details This function iterates through all the specifications for a module and calls the checkSpec function to check each specification for completeness and for proper values. 3.7.39.5 Value A vector containing messages identifying any errors that are found. 3.7.39.6 Calls checkSpec 3.7.40 checkSpec: Checks a module specifications for completeness and for incorrect entries 3.7.40.1 Description checkSpec a visioneval framework control function that checks a single module specification for completeness and for proper values. 3.7.40.2 Usage checkSpec(Spec_ls, SpecGroup, SpecNum) 3.7.40.3 Arguments Argument Description Spec_ls a list containing the specifications for a single item in a module specifications list. SpecGroup a string identifying the specifications group the specification is in (e.g.Â RunBy, NewInpTable, NewSetTable, Inp, Get, Set). This is used in the error messages to identify which specification has errors. SpecNum an integer identifying which specification in the specifications group has errors. 3.7.40.4 Details This function checks whether a single module specification (i.e.Â the specification for a single dataset contains the minimum required attributes and that the values of the attributes are correct. 3.7.40.5 Value A vector containing messages identifying any errors that are found. 3.7.40.6 Calls checkSpecTypeUnits, SpecRequirements 3.7.41 checkSpecConsistency: Check specification consistency 3.7.41.1 Description checkSpecConsistency a visioneval framework control function that checks whether the specifications for a dataset are consistent with the data attributes in the datastore. 3.7.41.2 Usage checkSpecConsistency(Spec_ls, DstoreAttr_) 3.7.41.3 Arguments Argument Description Spec_ls a list of data specifications consistent with a module Get or Set specifications. DstoreAttr_ a named list where the components are the attributes of a dataset. 3.7.41.4 Details This function compares the specifications for a dataset identified in a module Get or Set are consistent with the attributes for that data in the datastore. 3.7.41.5 Value A list containing two components, Errors and Warnings. If no inconsistencies are found, both components will have zero-length character vectors. If there are one or more inconsistencies, then these components will hold vectors of error and warning messages. Mismatch between UNITS will produce a warning message. All other inconsistencies will produce error messages. 3.7.41.6 Calls 3.7.42 checkSpecTypeUnits: Checks the TYPE and UNITS and associated MULTIPLIER and YEAR attributes of a Inp, Get, or Set specification for consistency. 3.7.42.1 Description checkSpecTypeUnits a visioneval framework control function that checks correctness of TYPE, UNITS, MULTIPLIER and YEAR attributes of a specification that has been processed with the parseUnitsSpec function. 3.7.42.2 Usage checkSpecTypeUnits(Spec_ls, SpecGroup, SpecNum) 3.7.42.3 Arguments Argument Description Spec_ls a list for a single specification (e.g.Â a Get specification for a dataset) that has been processed with the parseUnitsSpec function to split the name, multiplier, and year elements of the UNITS specification. SpecGroup a string identifying the group that this specification comes from (e.g.Â Inp, Get, Set). SpecNum a number identifying which specification in the order of the SpecGroup. This is used to identify the subject specification if an error is identified. 3.7.42.4 Details This function checks whether the TYPE and UNITS of a modules specification contain errors. The check is done on a module specification in which the modules UNITS attribute has been parsed by the parseUnitsSpec function to split the name, multiplier, and years parts of the UNITS attribute. The TYPE is checked against the types catalogued in the Types function. The units name in the UNITS attribute is checked against the units names corresponding to each type catalogued in the Types function. The MULTIPLIER is checked to determine whether a value is a valid number, NA, or not a number (NaN). A NA value means that no multiplier was specified (this is OK) a NaN value means that a multiplier that is not a number was specified which is an error. The YEAR attribute is checked to determine whether there is a proper specification if the specified TYPE is currency. If the TYPE is currency, a YEAR must be specified for Get and Set specifications. 3.7.42.5 Value A vector containing messages identifying any errors that are found. 3.7.42.6 Calls checkUnits, Types 3.7.43 checkTableExistence: Check whether table exists in the datastore 3.7.43.1 Description checkTableExistence a visioneval framework control function that checks whether a table is present in the datastore. 3.7.43.2 Usage checkTableExistence(Table, Group, DstoreListing_df) 3.7.43.3 Arguments Argument Description Table a string identifying the table. Group a string or numeric representation of the group the table is a part of. DstoreListing_df a dataframe which lists the contents of the datastore as contained in the model state file. 3.7.43.4 Details This function checks whether a table is present in the datastore. 3.7.43.5 Value A logical identifying whether a table is present in the datastore. 3.7.43.6 Calls 3.7.44 checkUnits: Check measurement units for consistency with recognized units for stated type. 3.7.44.1 Description checkUnits a visioneval framework control function that checks the specified UNITS for a dataset for consistency with the recognized units for the TYPE specification for the dataset. It also splits compound units into elements. 3.7.44.2 Usage checkUnits(DataType, Units) 3.7.44.3 Arguments Argument Description DataType a string which identifies the data type as specified in the TYPE attribute for a data set. Units a string identifying the measurement units as specified in the UNITS attribute for a data set after processing with the parseUnitsSpec function. 3.7.44.4 Details The visioneval code recognizes 4 simple data types (integer, double, logical, and character) and 9 complex data types (e.g.Â distance, time, mass). The simple data types can have any units of measure, but the complex data types must use units of measure that are declared in the Types() function. In addition, there is a compound data type that can have units that are composed of the units of two or more complex data types. For example, speed is a compound data type composed of distance divided by speed. With this example, speed in miles per hour would be represented as MI/HR. This function checks the UNITS specification for a dataset for consistency with the recognized units for the given data TYPE. To check the units of a compound data type, the function splits the units into elements and the operators that separate the elements. It identifies the element units, the complex data type for each element and the operators that separate the elements. 3.7.44.5 Value A list which contains the following elements: DataType: a string identifying the data type. UnitType: a string identifying whether the units correspond to a simple data type, a complex data type, or a compound data type. Units: a string identifying the units. Elements: a list containing the elements of a compound units. Components of this list are: Types: the complex type of each element, Units: the units of each element, Operators: the operators that separate the units. Errors: a string containing an error message or character(0) if no error. 3.7.44.6 Calls Types 3.7.45 convertMagnitude: Convert values between different magnitudes. 3.7.45.1 Description convertMagnitude a visioneval framework control function that converts values between different magnitudes such as between dollars and thousands of dollars. 3.7.45.2 Usage convertMagnitude(Values_, FromMagnitude, ToMagnitude) 3.7.45.3 Arguments Argument Description Values_ a numeric vector of values to convert from one unit to another. FromMagnitude a number or string identifying the magnitude of the units of the input Values_. ToMagnitude a number or string identifying the magnitude to convert the Values_ to. 3.7.45.4 Details The visioneval framework stores all quantities in single units to be unambiguous about the data contained in the datastore. For example, total income for a region would be stored in dollars rather than in thousands of dollars or millions of dollars. However, often inputs for large quantities are expressed in thousands or millions. Also submodels may be estimated using values expressed in multiples, or they might produce results that are multiples. Where that is the case, the framework enables model users and developers to encode the data multiplier in the input file field name or the UNITS specification. The framework functions then use that information to convert units to and from the single units stored in the datastore. This function implements the conversion. The multiplier must be specified in scientific notation used in R with the additional constraint that the digit term must be 1. For example, a multiplier of 1000 would be represented as 1e3. The multiplier is separated from the units name by a period (.). For example if the units of a dataset to be retrieved from the datastore are thousands of miles, the UNITS specification would be written as MI.1e3. 3.7.45.5 Value A numeric vector of values corresponding the the input Values_ but converted from the magnitude identified in the FromMagnitude argument to the magnitude identified in the ToMagnitude argument. If either the FromMagnitude or the ToMagnitude arguments is NA, the original Values_ are returned. The Converted attribute of the returned values is FALSE. Otherwise the conversion is done and the Converted attribute of the returned values is TRUE. 3.7.45.6 Calls 3.7.46 convertUnits: Convert values between units of measure. 3.7.46.1 Description convertUnits a visioneval framework control function that converts values between different units of measure for complex and compound data types recognized by the visioneval code. 3.7.46.2 Usage convertUnits(Values_, DataType, FromUnits, ToUnits = &quot;default&quot;) 3.7.46.3 Arguments Argument Description Values_ a numeric vector of values to convert from one unit to another. DataType a string identifying the data type. FromUnits a string identifying the units of measure of the Values_. ToUnits a string identifying the units of measure to convert the Values_ to. If the ToUnits are default the Values_ are converted to the default units for the model. 3.7.46.4 Details The visioneval code recognizes 4 simple data types (integer, double, logical, and character) and 9 complex data types (e.g.Â distance, time, mass). The simple data types can have any units of measure, but the complex data types must use units of measure that are declared in the Types() function. In addition, there is a compound data type that can have units that are composed of the units of two or more complex data types. For example, speed is a compound data type composed of distance divided by speed. With this example, speed in miles per hour would be represented as MI/HR. This function converts a vector of values from one unit of measure to another unit of measure. For compound data type it combines multiple unit conversions. The framework converts units based on the default units declared in the units.csv model definition file and in UNITS specifications declared in modules. 3.7.46.5 Value A list containing the converted values and additional information as follows: Values - a numeric vector containing the converted values. FromUnits - a string representation of the units converted from. ToUnits - a string representation of the units converted to. Errors - a string containing an error message or character(0) if no errors. Warnings - a string containing a warning message or character(0) if no warning. 3.7.46.6 Calls checkUnits, getUnits, Types 3.7.47 createGeoIndex: Create datastore index. 3.7.47.1 Description createIndex a visioneval framework control function that creates an index for reading or writing module data to the datastore. 3.7.47.2 Usage createGeoIndex(Table, Group, RunBy, Geo, GeoIndex_ls) 3.7.47.3 Arguments Argument Description Table A string identifying the name of the table the index is being created for. Group A string identifying the name of the group where the table is located in the datastore. RunBy A string identifying the level of geography the module is being run at (e.g.Â Azone). Geo A string identifying the geographic unit to create the index for (e.g.Â the name of a particular Azone). GeoIndex_ls a list of geographic indices used to determine the positions to extract from a dataset corresponding to the specified geography. 3.7.47.4 Details This function creates indexing functions which return an index to positions in datasets that correspond to positions in an index field of a table. For example if the index field is Azone in the Household table, this function will return a function that when provided the name of a particular Azone, will return the positions corresponding to that Azone. 3.7.47.5 Value A function that creates a vector of positions corresponding to the location of the supplied value in the index field. 3.7.47.6 Calls 3.7.48 createGeoIndexList: Create a list of geographic indices for all tables in a datastore. 3.7.48.1 Description createGeoIndexList a visioneval framework control function that creates a list containing the geographic indices for tables in the operating datastore for identified tables. 3.7.48.2 Usage createGeoIndexList(Specs_ls, RunBy, RunYear) 3.7.48.3 Arguments Argument Description Specs_ls A Get or Set specifications list for a module. RunBy The value of the RunBy specification for a module. RunYear A string identifying the model year that is being run. 3.7.48.4 Details This function takes a Get or Set specifications list for a module and the RunBy specification and returns a list which has a component for each table identified in the specifications. Each component includes all geographic datasets for the table. 3.7.48.5 Value A list that contains a component for each table identified in the specifications in which each component includes all the geographic datasets for the table represented by the component. 3.7.48.6 Calls getModelState 3.7.49 deflateCurrency: Convert currency values to different years. 3.7.49.1 Description deflateCurrency a visioneval framework control function that converts currency values between different years of measure. 3.7.49.2 Usage deflateCurrency(Values_, FromYear, ToYear) 3.7.49.3 Arguments Argument Description Values_ a numeric vector of values to convert from one currency year to another. FromYear a number or string identifying the currency year of the input Values_. ToYear a number or string identifying the currency year to convert the Values_ to. 3.7.49.4 Details The visioneval framework stores all currency values in the base year real currency (e.g.Â dollar) values. However, currency inputs may be in different nominal year currency. Also modules may be estimated using different nominal year currency data. For example, the original vehicle travel model in GreenSTEP used 2001 NHTS data while the newer model uses 2009 NHTS data. The framework enables model uses to specify the currency year in the field name of an input file that contains currency data. Likewise, the currency year can be encoded in the UNIT attributes for a modules Get and Set specifications. The framework converts dollars to and from specified currency year values and base year real dollar values. The model uses a set of deflator values that the user inputs for the region to make the adjustments. These values are stored in the model state list. 3.7.49.5 Value A numeric vector of values corresponding the the input Values_ but converted from the currency year identified in the FromYear argument to the currency year identified in the ToYear argument. If either the FromYear or the ToYear arguments is unaccounted for in the deflator series, the original Values_ are returned with a Converted attribute of FALSE. Otherwise the conversion is done and the Converted attribute of the returned values is TRUE. 3.7.49.6 Calls getModelState 3.7.50 doProcessInpSpec: Filters Inp specifications list based on OPTIONAL specification attributes. 3.7.50.1 Description doProcessInpSpec a visioneval framework control function that filters out Inp specifications whose OPTIONAL specification attribute is TRUE but the specified input file is not present. 3.7.50.2 Usage doProcessInpSpec(InpSpecs_ls, InputDir = &quot;inputs&quot;) 3.7.50.3 Arguments Argument Description InpSpecs_ls A standard specifications list for Inp specifications. InputDir The path to the input directory. 3.7.50.4 Details An Inp specification component may have an OPTIONAL specification whose value is TRUE. If so, and if the specified input file is present, then the input specification needs to be processed. This function checks whether the OPTIONAL specification is present, whether its value is TRUE, and whether the file exists. If all of these are true, then the input specification needs to be processed. The input specification also needs to be processed if it is not optional. A specification is not optional if the OPTIONAL attribute is not present or if it is present and the value is not TRUE. The function returns a list of all the Inp specifications that meet these criteria. 3.7.50.5 Value A list containing the Inp specification components that meet the criteria of either not being optional or being optional and the specified input file is present. 3.7.50.6 Calls 3.7.51 expandSpec: Expand a Inp, Get, or Set specification so that is can be used by other functions to process inputs and to read from or write to the datastore. 3.7.51.1 Description expandSpec a visioneval framework control function that takes a Inp, Get, or Set specification and processes it to be in a form that can be used by other functions which use the specification in processing inputs or reading from or writing to the datastore. The parseUnitsSpec function is called to parse the UNITS attribute to extract name, multiplier, and year values. When the specification has multiple values for the NAME attribute, the function creates a specification for each name value. 3.7.51.2 Usage expandSpec(SpecToExpand_ls, ComponentName) 3.7.51.3 Arguments Argument Description SpecToExpand_ls A standard specifications list for a specification whose NAME attribute has multiple values. ComponentName A string that is the name of the specifications that the specification is a part of (e.g.Â Inp, Get, Set). 3.7.51.4 Details The VisionEval design allows module developers to assign multiple values to the NAME attributes of a Inp, Get, or Set specification where the other attributes for those named datasets (or fields) are the same. This greatly reduces duplication and the potential for error in writing module specifications. However, other functions that check or use the specifications are not capable of handling specifications which have NAME attributes containing multiple values. This function expands a specification with multiple values for a NAME attribute into multiple specifications, each with a single value for the NAME attribute. In addition, the function calls the parseUnitsSpec function to extract multiplier and year information from the value of the UNITS attribute. See that function for details. 3.7.51.5 Value A list of standard specifications lists which has a component for each value in the NAME attribute of the input specifications list. 3.7.51.6 Calls parseUnitsSpec 3.7.52 findSpec: Find the full specification corresponding to a defined NAME, TABLE, and GROUP 3.7.52.1 Description findSpec a visioneval framework control function that returns the full dataset specification for defined NAME, TABLE, and GROUP. 3.7.52.2 Usage findSpec(Specs_ls, Name, Table, Group) 3.7.52.3 Arguments Argument Description Specs_ls a standard specifications list for Inp, Get, or Set Name a string for the name of the dataset Table a string for the table that the dataset resides in Group a string for the generic group that the table resides in 3.7.52.4 Details This function finds and returns the full specification from a specifications list whose NAME, TABLE and GROUP values correspond to the Name, Table, and Group argument values. The specifications list must be in standard format and must be for only Inp, Get, or Set specifications. 3.7.52.5 Value A list containing the full specifications for the dataset 3.7.52.6 Calls 3.7.53 getDatasetAttr: Get attributes of a dataset 3.7.53.1 Description getDatasetAttr a visioneval framework control function that retrieves the attributes for a dataset in the datastore. 3.7.53.2 Usage getDatasetAttr(Name, Table, Group, DstoreListing_df) 3.7.53.3 Arguments Argument Description Name a string identifying the dataset name. Table a string identifying the table the dataset is a part of. Group a string or numeric representation of the group the table is a part of. DstoreListing_df a dataframe which lists the contents of the datastore as contained in the model state file. 3.7.53.4 Details This function extracts the listed attributes for a specific dataset from the datastore listing. 3.7.53.5 Value A named list of the dataset attributes. 3.7.53.6 Calls 3.7.54 getFromDatastore: Retrieve data identified in Get specifications from datastore 3.7.54.1 Description getFromDatastore a visioneval framework control function that retrieves datasets identified in a modules Get specifications from the datastore. 3.7.54.2 Usage getFromDatastore(ModuleSpec_ls, RunYear, Geo = NULL, GeoIndex_ls = NULL) 3.7.54.3 Arguments Argument Description ModuleSpec_ls a list of module specifications that is consistent with the VisionEval requirements RunYear a string identifying the model year being run. The default is the Year object in the global workspace. Geo a string identifying the name of the geographic area to get the data for. For example, if the module is specified to be run by Azone, then Geo would be the name of a particular Azone. GeoIndex_ls a list of geographic indices used to determine the positions to extract from a dataset corresponding to the specified geography. 3.7.54.4 Details This function retrieves from the datastore all of the data sets identified in a modules Get specifications. If the modules specifications include the name of a geographic area, then the function will retrieve the data for that geographic area. 3.7.54.5 Value A list containing all the data sets specified in the modules Get specifications for the identified geographic area. 3.7.54.6 Calls checkDataset, convertMagnitude, convertUnits, createGeoIndex, deflateCurrency, getDatasetAttr, getModelState, initDataList, readModelState, Types 3.7.55 getModelState: Get values from model state list. 3.7.55.1 Description getModelState a visioneval framework control function that reads components of the list that keeps track of the model state. 3.7.55.2 Usage getModelState(Names_ = &quot;All&quot;) 3.7.55.3 Arguments Argument Description Names_ A string vector of the components to extract from the ModelState_ls list. 3.7.55.4 Details Key variables that are important for managing the model run are stored in a list (ModelState_ls) that is managed in the global environment. This function extracts named components of the list. 3.7.55.5 Value A list containing the specified components from the model state file. 3.7.55.6 Calls 3.7.56 getModuleSpecs: Retrieve module specifications from a package 3.7.56.1 Description getModuleSpecs a visioneval framework control function that retrieves the specifications list for a module and returns the specifications list. 3.7.56.2 Usage getModuleSpecs(ModuleName, PackageName) 3.7.56.3 Arguments Argument Description ModuleName A string identifying the name of the module. PackageName A string identifying the name of the package that the module is in. 3.7.56.4 Details This function loads the specifications for a module in a package. It returns the specifications list. 3.7.56.5 Value A specifications list that is the same as the specifications list defined for the module in the package. 3.7.56.6 Calls 3.7.57 getUnits: Retrieve default units for model 3.7.57.1 Description getUnits a visioneval framework control function that retrieves the default model units for a vector of complex data types. 3.7.57.2 Usage getUnits(Type_) 3.7.57.3 Arguments Argument Description Type_ A string vector identifying the complex data type(s). 3.7.57.4 Details This is a convenience function to make it easier to retrieve the default units for a complex data type (e.g.Â distance, volume, speed). The default units are the units used to store the complex data type in the datastore. 3.7.57.5 Value A string vector identifying the default units for the complex data type(s) or NA if any of the type(s) are not defined. 3.7.57.6 Calls getModelState 3.7.58 initDatastoreGeography: Initialize datastore geography. 3.7.58.1 Description initDatastoreGeography a visioneval framework control function that initializes tables and writes datasets to the datastore which describe geographic relationships of the model. 3.7.58.2 Usage initDatastoreGeography() 3.7.58.3 Details This function writes tables to the datastore for each of the geographic levels. These tables are then used during a model run to store values that are either specified in scenario inputs or that are calculated during a model run. The function populates the tables with cross-references between geographic levels. The function reads the model geography (Geo_df) from the model state file. Upon successful completion, the function calls the listDatastore function to update the datastore listing in the global list. 3.7.58.4 Value The function returns TRUE if the geographic tables and datasets are sucessfully written to the datastore. 3.7.58.5 Calls getModelState, writeLog 3.7.59 initLog: Initialize run log. 3.7.59.1 Description initLog a visioneval framework control function that creates a log (text file) that stores messages generated during a model run. 3.7.59.2 Usage initLog(Suffix = NULL) 3.7.59.3 Arguments Argument Description Suffix A character string appended to the file name for the log file. For example, if the suffix is CreateHouseholds, the log file is named Log_CreateHouseholds.txt. The default value is NULL in which case the suffix is the date and time. 3.7.59.4 Details This function creates a log file that is a text file which stores messages generated during a model run. The name of the log is Log  where  is the initialization date and  is the initialization time. The log is initialized with the scenario name, scenario description and the date and time of initialization. 3.7.59.5 Value TRUE if the log is created successfully. It creates a log file in the working directory and identifies the name of the log file in the model state file. 3.7.59.6 Calls getModelState, setModelState 3.7.60 initModelStateFile: Initialize model state. 3.7.60.1 Description initModelState a visioneval framework control function that loads model run parameters into the model state list in the global workspace and saves as file. 3.7.60.2 Usage initModelStateFile(Dir = &quot;defs&quot;, ParamFile = &quot;run_parameters.json&quot;, DeflatorFile = &quot;deflators.csv&quot;, UnitsFile = &quot;units.csv&quot;) 3.7.60.3 Arguments Argument Description Dir A string identifying the name of the directory where the global parameters, deflator, and default units files are located. The default value is defs. ParamFile A string identifying the name of the global parameters file. The default value is parameters.json. DeflatorFile A string identifying the name of the file which contains deflator values by year (e.g.Â consumer price index). The default value is deflators.csv. UnitsFile A string identifying the name of the file which contains default units for complex data types (e.g.Â currency, distance, speed, etc.). The default value is units.csv. 3.7.60.4 Details This function creates the model state list and loads model run parameters recorded in the parameters.json file into the model state list. It also saves the model state list in a file (ModelState.Rda). 3.7.60.5 Value TRUE if the model state list is created and file is saved. It creates the model state list and loads parameters recorded in the parameters.json file into the model state lists and saves a model state file. 3.7.60.6 Calls 3.7.61 inputsToDatastore: Write the datasets in a list of module inputs that have been processed to the datastore. 3.7.61.1 Description inputsToDatastore a visioneval framework control function that takes a list of processed module input files and writes the datasets to the datastore. 3.7.61.2 Usage inputsToDatastore(Inputs_ls, ModuleSpec_ls, ModuleName) 3.7.61.3 Arguments Argument Description Inputs_ls a list processes module inputs as created by the processModuleInputs function. ModuleSpec_ls a list of module specifications that is consistent with the VisionEval requirements. ModuleName a string identifying the name of the module (used to document the dataset in the datastore). 3.7.61.4 Details This function takes a processed list of input datasets specified by a module created by the application of the processModuleInputs function and writes the datasets in the list to the datastore. 3.7.61.5 Value A logical indicating successful completion. Most of the outputs of the function are the side effects of writing data to the datastore. 3.7.61.6 Calls findSpec, getModelState, processModuleSpecs, sortGeoTable 3.7.62 loadDatastore: Load saved datastore. 3.7.62.1 Description loadDatastore a visioneval framework control function that copies an existing saved datastore and writes information to run environment. 3.7.62.2 Usage loadDatastore(FileToLoad, Dir = &quot;defs/&quot;, GeoFile, SaveDatastore = TRUE) 3.7.62.3 Arguments Argument Description FileToLoad A string identifying the full path name to the saved datastore. Path name can either be relative to the working directory or absolute. Dir A string identifying the path of the geography definition file (GeoFile), default to defs relative to the working directory GeoFile A string identifying the name of the geography definition file (see readGeography function) that is consistent with the saved datastore. The geography definition file must be located in the defs directory. SaveDatastore A logical identifying whether an existing datastore will be saved. It is renamed by appending the system time to the name. The default value is TRUE. 3.7.62.4 Details This function copies a saved datastore as the working datastore attributes the global list with related geographic information. This function enables scenario variants to be built from a constant set of starting conditions. 3.7.62.5 Value TRUE if the datastore is loaded. It copies the saved datastore to working directory as datastore.h5. If a datastore.h5 file already exists, it first renames that file as archive-datastore.h5. The function updates information in the model state file regarding the model geography and the contents of the loaded datastore. If the stored file does not exist an error is thrown. 3.7.62.6 Calls getModelState, setModelState, writeLog 3.7.63 loadModelParameters: Load model global parameters file into datastore. 3.7.63.1 Description loadModelParameters a visioneval framework control function reads the model_parameters.json file and stores the contents in the Global/Model group of the datastore. 3.7.63.2 Usage loadModelParameters(ModelParamFile = &quot;model_parameters.json&quot;) 3.7.63.3 Arguments Argument Description ModelParamFile A string identifying the name of the parameter file. The default value is model_parameters.json. 3.7.63.4 Details This function reads the model_parameters.json file in the defs directory which contains parameters specific to a model rather than to a module. These area parameters that may be used by any module. Parameters are specified by name, value, and data type. The function creates a Model group in the Global group and stores the values of the appropriate type in the Model group. 3.7.63.5 Value The function returns TRUE if the model parameters file exists and its values are sucessfully written to the datastore. 3.7.63.6 Calls getModelState, writeLog 3.7.64 parseInputFieldNames: Parse field names of input file to separate out the field name, currency year, and multiplier. 3.7.64.1 Description parseInputFieldNames a visioneval framework control function that parses the field names of an input file to separate out the field name, currency year (if data is currency type), and value multiplier. 3.7.64.2 Usage parseInputFieldNames(FieldNames_, Specs_ls, FileName) 3.7.64.3 Arguments Argument Description FieldNames_ A character vector containing the field names of an input file. Specs_ls A list of specifications for fields in the input file. FileName A string identifying the name of the file that the field names are from. This is used for writing error messages. 3.7.64.4 Details The field names of input files can be used to encode more information than the name itself. It can also encode the currency year for currency type data and also if the values are in multiples (e.g.Â thousands of dollars). For currency type data it is mandatory that the currency year be specified so that the data can be converted to base year currency values (e.g.Â dollars in base year dollars). The multiplier is optional, but needless to say, it can only be applied to numeric data. The function returns a list with a component for each field. Each component identifies the field name, year, multiplier, and error status for the result of parsing the field name. If the field name was parsed successfully, the error status is character(0). If the field name was not successfully parsed, the error status contains an error message, identifying the problem. 3.7.64.5 Value A named list with one component for each field. Each component is a list having 4 named components: Error, Name, Year, Multiplier. The Error component has a value of character(0) if there are no errors or a character vector of error messages if there are errors. The Name component is a string with the name of the field. The Year component is a string with the year component if the data type is currency or NA if the data type is not currency or if the Year component has an invalid value. The Multiplier is a number if the multiplier component is present and is valid. It is NA if there is no multiplier component and NaN if the multiplier is invalid. Each component of the list is named with the value of the Name component (i.e.Â the field name without the year and multiplier elements.) 3.7.64.6 Calls getModelState 3.7.65 parseModelScript: Parse model script. 3.7.65.1 Description parseModel a visioneval framework control function that reads and parses the model script to identify the sequence of module calls and the associated call arguments. 3.7.65.2 Usage parseModelScript(FilePath = &quot;run_model.R&quot;, TestMode = FALSE) 3.7.65.3 Arguments Argument Description FilePath A string identifying the relative or absolute path to the model run script is located. TestMode A logical identifying whether the function is to run in test mode. When in test mode the function returns the parsed script but does not change the model state or write results to the log. 3.7.65.4 Details This function reads in the model run script and parses the script to identify the sequence of module calls. It extracts each call to runModule and identifies the values assigned to the function arguments. It creates a list of the calls with their arguments in the order of the calls in the script. 3.7.65.5 Value A data frame containing information on the calls to runModule in the order of the calls. Each row represents a module call in order. The columns identify the ModuleName, the PackageName, and the RunFor value. 3.7.65.6 Calls setModelState, writeLog 3.7.66 parseUnitsSpec: Parse units specification into components and add to specifications list. 3.7.66.1 Description parseUnitsSpec a visioneval framework control function that parses the UNITS attribute of a standard Inp, Get, or Set specification for a dataset to identify the units name, multiplier, and year for currency data. Returns a modified specifications list whose UNITS value is only the units name, and includes a MULTIPLIER attribute and YEAR attribute. 3.7.66.2 Usage parseUnitsSpec(Spec_ls, ComponentName) 3.7.66.3 Arguments Argument Description Spec_ls A standard specifications list for a Inp, Get, or Set item. ComponentName A string that is the name of the specifications the the specification comes from (e.g.Â Inp, Get, Set). 3.7.66.4 Details The UNITS component of a specifications list can encode information in addition to the units name. This includes a value units multiplier and in the case of currency values the year for the currency measurement. The multiplier element can only be expressed in scientific notation where the number before the e can only be 1. If the year element for a currency specification is missing, it is replaced by the model base year which is recorded in the model state file. If this is done, a WARN attribute is added to the specifications list notifying the module developer that there is no year element and the model base year will be used when the module is called. The test module function reads this warning and writes it to the module test log. This way the module developer is made aware of the situation so that it may be corrected if necessary. The model user is not bothered by the warning. 3.7.66.5 Value a list that is a standard specifications list with the addition of a MULTIPLIER component and a YEAR component as well as a modification of the UNIT component. The MULTIPLIER component can have the value of NA, a number, or NaN. The value is NA if the multiplier is missing. It is a number if the multiplier is a valid number. The value is NaN if the multiplier is not a valid number. The YEAR component is a character string that is a 4-digit representation of a year or NA if the component is not a proper year. If the year component is missing from the UNITS specification for currency data, the model base year is substituted. In that case, a WARN attribute is added to the returned specifications list. This is read by the testModule function and written to the module test log to notify the module developer. After the UNITS component has been parsed and the YEAR and MULTIPLIER components extracted, the UNITS component is modified to only be the units name. 3.7.66.6 Calls getModelState 3.7.67 processModuleInputs: Process module input files 3.7.67.1 Description processModuleInputs a visioneval framework control function that processes input files identified in a modules Inp specifications in preparation for saving in the datastore. 3.7.67.2 Usage processModuleInputs(ModuleSpec_ls, ModuleName, Dir = &quot;inputs&quot;) 3.7.67.3 Arguments Argument Description ModuleSpec_ls a list of module specifications that is consistent with the VisionEval requirements. ModuleName a string identifying the name of the module (used to document module in error messages). Dir a string identifying the relative path to the directory where the model inputs are contained. 3.7.67.4 Details This function processes the input files identified in a modules Inp specifications in preparation for saving the data in the datastore. Several processes are carried out. The existence of each specified input file is checked. Any file whose corresponding GROUP specification is Year, is checked to determine that it has Year and Geo columns. The entries in the Year and Geo columns are checked to make sure they are complete and there are no duplicates. Any file whose GROUP specification is Global or BaseYear and whose TABLE specification is a geographic specification other than Region is checked to determine if it has a Geo column and the entries are checked for completeness. The data in each column are checked against specifications to determine conformance. The function returns a list which contains a list of error messages and a list of the data inputs. The function also writes error messages and warnings to the log file. 3.7.67.5 Value A list containing the results of the input processing. The list has two components. The first (Errors) is a vector of identified file and data errors. The second (Data) is a list containing the data in the input files organized in the standard format for data exchange with the datastore. 3.7.67.6 Calls checkDataConsistency, checkInputYearGeo, convertMagnitude, convertUnits, deflateCurrency, getModelState, initDataList, parseInputFieldNames, Types, writeLog 3.7.68 processModuleSpecs: Process module specifications to expand items with multiple names. 3.7.68.1 Description processModuleSpecs a visioneval framework control function that processes a full module specifications list, expanding all elements in the Inp, Get, and Set components by parsing the UNITS attributes and duplicating every specification which has multiple values for the NAME attribute. 3.7.68.2 Usage processModuleSpecs(Spec_ls) 3.7.68.3 Arguments Argument Description Spec_ls A specifications list. 3.7.68.4 Details This function process a module specification list. If any of the specifications include multiple listings of data sets (i.e.Â fields) in a table, this function expands the listing to establish a separate specification for each data set. 3.7.68.5 Value A standard specifications list with expansion of the multiple item specifications. 3.7.68.6 Calls doProcessInpSpec, expandSpec, getModelState 3.7.69 readGeography: Read geographic specifications. 3.7.69.1 Description readGeography a visioneval framework control function that reads the geographic specifications file for the model. 3.7.69.2 Usage readGeography(Dir = &quot;defs&quot;, GeoFile = &quot;geo.csv&quot;) 3.7.69.3 Arguments Argument Description Dir A string identifying the path to the geographic specifications file. Note: dont include the final separator in the path name e.g.Â not defs/. GeoFile A string identifying the name of the geographic specifications file. This is a csv-formatted text file which contains columns named Azone, Bzone, Czone, and Marea. The Azone column must have zone names in all rows. The Bzone and Czone columns can be unspecified (NA in all rows) or may have have unique names in every row. The Marea column (referring to metropolitan areas) identifies metropolitan areas corresponding to the most detailed level of specified geography (or None no metropolitan area occupies any portion of the zone. 3.7.69.4 Details This function manages the reading and error checking of geographic specifications for the model. It calls the checkGeography function to check for errors in the specifications. The checkGeography function reads in the file and checks for errors. It returns a list of any errors that are found and a data frame containing the geographic specifications. If errors are found, the functions writes the errors to a log file and stops model execution. If there are no errors, the function adds the geographic in the geographic specifications file, the errors are written to the log file and execution stops. If no errors are found, the geographic specifications are added to the model state file. 3.7.69.5 Value The value TRUE is returned if the function is successful at reading the file and the specifications are consistent. It stops if there are any errors in the specifications. All of the identified errors are written to the run log. A data frame containing the file entries is added to the model state file as Geo_df. 3.7.69.6 Calls checkGeography, setModelState, writeLog 3.7.70 readModelState: Reads values from model state file. 3.7.70.1 Description readModelState a visioneval framework control function that reads components of the file that saves a copy of the model state. 3.7.70.2 Usage readModelState(Names_ = &quot;All&quot;, FileName = &quot;ModelState.Rda&quot;) 3.7.70.3 Arguments Argument Description Names_ A string vector of the components to extract from the ModelState_ls list. FileName A string vector with the full path name of the model state file. 3.7.70.4 Details The model state is stored in a list (ModelState_ls) that is also saved as a file (ModelState.Rda) whenever the list is updated. This function reads the contents of the ModelState.Rda file. 3.7.70.5 Value A list containing the specified components from the model state file. 3.7.70.6 Calls 3.7.71 setInDatastore: Save the data sets returned by a module in the datastore 3.7.71.1 Description setInDatastore a visioneval framework control function saves to the datastore the data returned in a standard list by a module. 3.7.71.2 Usage setInDatastore(Data_ls, ModuleSpec_ls, ModuleName, Year, Geo = NULL, GeoIndex_ls = NULL) 3.7.71.3 Arguments Argument Description Data_ls a list containing the data to be saved. The list is organized by group, table, and data set. ModuleSpec_ls a list of module specifications that is consistent with the VisionEval requirements ModuleName a string identifying the name of the module (used to document the module creating the data in the datastore) Year a string identifying the model run year Geo a string identifying the name of the geographic area to get the data for. For example, if the module is specified to be run by Azone, then Geo would be the name of a particular Azone. GeoIndex_ls a list of geographic indices used to determine the positions to extract from a dataset corresponding to the specified geography. 3.7.71.4 Details This function saves to the datastore the data sets identified in a modules Set specifications and included in the list returned by the module. If a particular geographic area is identified, the data are saved to the positions in the data sets in the datastore corresponding to the identified geographic area. 3.7.71.5 Value A logical value which is TRUE if the data are successfully saved to the datastore. 3.7.71.6 Calls checkTableExistence, convertMagnitude, convertUnits, createGeoIndex, deflateCurrency, getModelState, Types, writeLog 3.7.72 setModelState: Update model state. 3.7.72.1 Description setModelState a visioneval framework control function that updates the list that keeps track of the model state with list of components to update and resaves in the model state file. 3.7.72.2 Usage setModelState(ChangeState_ls, FileName = &quot;ModelState.Rda&quot;) 3.7.72.3 Arguments Argument Description ChangeState_ls A named list of components to change in ModelState_ls FileName A string identifying the name of the file that contains the ModelState_ls list. The default name is ModelState.Rda. 3.7.72.4 Details Key variables that are important for managing the model run are stored in a list (ModelState_ls) that is in the global workspace and saved in the ModelState.Rda file. This function updates entries in the model state list with a supplied named list of values, and then saves the results in the file. 3.7.72.5 Value TRUE if the model state list and file are changed. 3.7.72.6 Calls getModelState 3.7.73 simDataTransactions: Create simulation of datastore transactions. 3.7.73.1 Description simDataTransactions a visioneval framework control function that loads all module specifications in order (by run year) and creates a simulated listing of the data which is in the datastore and the requests of data from the datastore and checks whether tables will be present to put datasets in and that datasets will be present that data is to be retrieved from. 3.7.73.2 Usage simDataTransactions(AllSpecs_ls) 3.7.73.3 Arguments Argument Description AllSpecs_ls A list containing the processed specifications of all of the modules run by model script in the order that the modules are called with duplicated module calls removed. Information about each module call is a component of the list in the order of the module calls. Each component is composed of 3 components: ModuleName contains the name of the module, PackageName contains the name of the package the module is in, and Specs contains the processed specifications of the module. The Get specification component includes the Get specifications of all modules that are called by the module. 3.7.73.4 Details This function creates a list of the datastore listings for the working datastore and for all datastore references. The list includes a Global component, in which Global references are simulated, components for each model run year, in which Year references are simulated, and if the base year is not one of the run years, a base year component, in which base year references are simulated. For each model run year the function steps through a data frame of module calls as produced by parseModelScript, and loads and processes the module specifications in order: adds NewInpTable references, adds Inp dataset references, checks whether references to datasets identified in Get specifications are present, adds NewSetTable references, and adds Set dataset references. The function compiles a vector of error and warning messages. Error messages are made if: 1) a NewInpTable or NewSetTable specification of a module would create a new table for a table that already exists; 2) a dataset identified by a Get specification would not be present in the working datastore or any referenced datastores; 3) the Get specifications for a dataset would not be consistent with the specifications for the dataset in the datastore. The function compiles warnings if a Set specification will cause existing data in the working datastore to be overwritten. The function writes warning and error messages to the log and stops program execution if there are any errors. 3.7.73.5 Value There is no return value. The function has the side effect of writing messages to the log and stops program execution if there are any errors. 3.7.73.6 Calls checkDataset, checkSpecConsistency, checkTableExistence, getDatasetAttr, getModelState, getModuleSpecs, getYears, processModuleSpecs, readModelState, writeLog 3.7.74 sortGeoTable: Sort a data frame so that the order of rows matches the geography in a datastore table. 3.7.74.1 Description sortGeoTable a visioneval framework control function that returns a data frame whose rows are sorted to match the geography in a specified table in the datastore. 3.7.74.2 Usage sortGeoTable(Data_df, Table, Group) 3.7.74.3 Arguments Argument Description Data_df a data frame that contains a Geo field containing the names of the geographic areas to sort by and any number of additional data fields. Table a string for the table that is to be matched against. Group a string for the generic group that the table resides in. 3.7.74.4 Details This function sorts the rows of a data frame that the Geo field in the data frame matches the corresponding geography names in the specified table in the datastore. The function returns the sorted table. 3.7.74.5 Value The data frame which has been sorted to match the order of geography in the specified table in the datastore. 3.7.74.6 Calls 3.7.75 SpecRequirements: List basic module specifications to check for correctness 3.7.75.1 Description SpecRequirements a visioneval framework control function that returns a list of basic requirements for module specifications to be used for checking correctness of specifications. 3.7.75.2 Usage SpecRequirements() 3.7.75.3 Details This function returns a list of the basic requirements for module specifications. The main components of the list are the components of module specifications: RunBy, NewInpTable, NewSetTable, Inp, Get, Set. For each item of each module specifications component, the list identifies the required data type of the attribute entry and the allowed values for the attribute entry. 3.7.75.4 Value A list comprised of six named components: RunBy, NewInpTable, NewSetTable, Inp, Get, Set. Each main component is a list that has a component for each specification item that has values to be checked. For each such item there is a list having two components: ValueType and ValuesAllowed. The ValueType component identifies the data type that the data entry for the item must have (e.g.Â character, integer). The ValuesAllowed item identifies what values the item may have. 3.7.75.5 Calls 3.7.76 Types: Returns a list of returns a list of recognized data types, the units for each type, and storage mode of each type. 3.7.76.1 Description Types a visioneval framework control function that returns a list of returns a list of recognized data types, the units for each type, and storage mode of each type. 3.7.76.2 Usage Types() 3.7.76.3 Details This function stores a listing of the dataset types recognized by the visioneval framework, the units recognized for each type, and the storage mode used for each type. Types include simple types (e.g.Â integer, double, character, logical) as well as complex types (e.g.Â distance, time, mass). For the complex types, units are specified as well. For example for the distance type, allowed units are MI (miles), FT (feet), KM (kilometers), M (meters). The listing includes conversion factors between units of each complex type. The listing also contains the storage mode (i.e.Â integer, double, character, logical of each type. For simple types, the type and the storage mode are the same). 3.7.76.4 Value A list containing a component for each recognized type. Each component lists the recognized units for the type and the storage mode. There are currently 4 simple types and 10 complex type. The simple types are integer, double, character and logical. The complex types are currency, distance, area, mass, volume, time, speed, vehicle_distance, passenger_distance, and payload_distance. 3.7.76.5 Calls 3.7.77 writeLog: Write to log. 3.7.77.1 Description writeLog a visioneval framework control function that writes a message to the run log. 3.7.77.2 Usage writeLog(Msg = &quot;&quot;, Print = FALSE) 3.7.77.3 Arguments Argument Description Msg A character string. Print logical (default: FALSE). If True Msg will be printed in additon to being added to log 3.7.77.4 Details This function writes a message in the form of a string to the run log. It logs the time as well as the message to the run log. 3.7.77.5 Value TRUE if the message is written to the log uccessfully. It appends the time and the message text to the run log. 3.7.77.6 Calls getModelState 3.7.78 writeVENameRegistry: Writes module Inp and Set specifications to the VisionEval name registry. 3.7.78.1 Description writeVENameRegistry a visioneval framework control function that writes module Inp and Set specifications to the VisionEval name registry. 3.7.78.2 Usage writeVENameRegistry(ModuleName, PackageName, NameRegistryDir = NULL) 3.7.78.3 Arguments Argument Description ModuleName a string identifying the module name. PackageName a string identifying the package name. NameRegistryDir a string identifying the path to the directory where the name registry file is located. 3.7.78.4 Details The VisionEval name registry (VENameRegistry.json) keeps track of the dataset names created by all registered modules by reading in datasets specified in the module Inp specifications or by returning calculated datasets as specified in the module Set specifications. This functions adds the Inp and Set specifications for a module to the registry. It removes any existing entries for the module first. 3.7.78.5 Value TRUE if successful. Has a side effect of updating the VisionEval name registry. 3.7.78.6 Calls getModuleSpecs, processModuleSpecs, readVENameRegistry 3.7.79 Appendix J: VisionEval Framework Datastore Functions 3.7.80 initDatasetH5: Initialize dataset in an HDF5 (H5) type datastore table. 3.7.80.1 Description initDatasetH5 a visioneval framework datastore connection function that initializes a dataset in an HDF5 (H5) type datastore table. 3.7.80.2 Usage initDatasetH5(Spec_ls, Group) 3.7.80.3 Arguments Argument Description Spec_ls a list containing the standard module Set specifications described in the model system design documentation. Group a string representation of the name of the group the table is to be created in. 3.7.80.4 Details This function initializes a dataset in an HDF5 (H5) type datastore table. 3.7.80.5 Value TRUE if dataset is successfully initialized. If the dataset already exists the function throws an error and writes an error message to the log. Updates the model state file. 3.7.80.6 Calls getModelState, listDatastoreH5, Types, writeLog 3.7.81 initDatasetRD: Initialize dataset in an RData (RD) type datastore table. 3.7.81.1 Description initDatasetRD a visioneval framework datastore connection function initializes a dataset in an RData (RD) type datastore table. 3.7.81.2 Usage initDatasetRD(Spec_ls, Group) 3.7.81.3 Arguments Argument Description Spec_ls a list containing the standard module specifications described in the model system design documentation. Group a string representation of the name of the top-level subdirectory the table is to be created in (i.e.Â either Global or the name of the year). 3.7.81.4 Details This function initializes a dataset in an RData (RD) type datastore table. 3.7.81.5 Value TRUE if dataset is successfully initialized. If the identified table does not exist, the function throws an error. 3.7.81.6 Calls getModelState, listDatastoreRD, Types, writeLog 3.7.82 initDatastoreH5: Initialize Datastore for an HDF5 (H5) type datastore. 3.7.82.1 Description initDatastoreH5 a visioneval framework datastore connection function that creates datastore with starting structure for an HDF5 (H5) type datastore. 3.7.82.2 Usage initDatastoreH5() 3.7.82.3 Details This function creates the datastore for the model run with the initial structure for an HDF5 (H5) type datastore. 3.7.82.4 Value TRUE if datastore initialization is successful. Calls the listDatastore function which adds a listing of the datastore contents to the model state file. 3.7.82.5 Calls getModelState, listDatastoreH5 3.7.83 initDatastoreRD: Initialize Datastore for an RData (RD) type datastore. 3.7.83.1 Description initDatastoreRD a visioneval framework datastore connection function that creates a datastore with starting structure for an RData (RD) type datastore. 3.7.83.2 Usage initDatastoreRD() 3.7.83.3 Details This function creates the datastore for the model run with the initial structure for an RData (RD) type datastore. 3.7.83.4 Value TRUE if datastore initialization is successful. Calls the listDatastore function which adds a listing of the datastore contents to the model state file. 3.7.83.5 Calls getModelState, getYears, listDatastoreRD, setModelState 3.7.84 initTableH5: Initialize table in an HDF5 (H5) type datastore. 3.7.84.1 Description initTableH5 a visioneval framework datastore connection function that initializes a table in an HDF5 (H5) type datastore. 3.7.84.2 Usage initTableH5(Table, Group, Length) 3.7.84.3 Arguments Argument Description Table a string identifying the name of the table to initialize. Group a string representation of the name of the group the table is to be created in. Length a number identifying the table length. 3.7.84.4 Details This function initializes a table in an HDF5 (H5) type datastore. 3.7.84.5 Value The value TRUE is returned if the function is successful at creating the table. In addition, the listDatastore function is run to update the inventory in the model state file. The function stops if the group in which the table is to be placed does not exist in the datastore and a message is written to the log. 3.7.84.6 Calls getModelState, listDatastoreH5 3.7.85 initTableRD: Initialize table in an RData (RD) type datastore. 3.7.85.1 Description initTableRD a visioneval framework datastore connection function initializes a table in an RData (RD) type datastore. 3.7.85.2 Usage initTableRD(Table, Group, Length) 3.7.85.3 Arguments Argument Description Table a string identifying the name of the table to initialize. Group a string representation of the name of the top-level subdirectory the table is to be created in (i.e.Â either Global or the name of the year). Length a number identifying the table length. 3.7.85.4 Details This function initializes a table in an RData (RD) type datastore. 3.7.85.5 Value The value TRUE is returned if the function is successful at creating the table. In addition, the listDatastore function is run to update the inventory in the model state file. The function stops if the group in which the table is to be placed does not exist in the datastore and a message is written to the log. 3.7.85.6 Calls getModelState, listDatastoreRD 3.7.86 listDatastoreH5: List datastore contents for an HDF5 (H5) type datastore. 3.7.86.1 Description listDatastoreH5 a visioneval framework datastore connection function that lists the contents of an HDF5 (H5) type datastore. 3.7.86.2 Usage listDatastoreH5() 3.7.86.3 Details This function lists the contents of a datastore for an HDF5 (H5) type datastore. 3.7.86.4 Value TRUE if the listing is successfully read from the datastore and written to the model state file. 3.7.86.5 Calls getModelState, setModelState 3.7.87 listDatastoreRD: List datastore contents for an RData (RD) type datastore. 3.7.87.1 Description listDatastoreRD a visioneval framework datastore connection function that lists the contents of an RData (RD) type datastore. 3.7.87.2 Usage listDatastoreRD(DataListing_ls = NULL) 3.7.87.3 Arguments Argument Description DataListing_ls a list containing named elements describing a new data item being added to the datastore listing and the model state file. The list components are: group - the name of the group (path) the item is being added to; name - the name of the data item (directory or dataset); groupname - the full path to the data item; attributes - a list containing the named attributes of the data item. 3.7.87.4 Details This function lists the contents of a datastore for an RData (RD) type datastore. 3.7.87.5 Value TRUE if the listing is successfully read from the datastore and written to the model state file. 3.7.87.6 Calls getModelState, readModelState, setModelState 3.7.88 readFromTableH5: Read from an HDF5 (H5) type datastore table. 3.7.88.1 Description readFromTableH5 a visioneval framework datastore connection function that reads a dataset from an HDF5 (H5) type datastore table. 3.7.88.2 Usage readFromTableH5(Name, Table, Group, File = NULL, Index = NULL, ReadAttr = FALSE) 3.7.88.3 Arguments Argument Description Name A string identifying the name of the dataset to be read from. Table A string identifying the complete name of the table where the dataset is located. Group a string representation of the name of the datastore group the data is to be read from. File a string representation of the file path of the datastore Index A numeric vector identifying the positions the data is to be written to. NULL if the entire dataset is to be read. ReadAttr A logical identifying whether to return the attributes of the stored dataset. The default value is FALSE. 3.7.88.4 Details This function reads a dataset from an HDF5 (H5) type datastore table. 3.7.88.5 Value A vector of the same type stored in the datastore and specified in the TYPE attribute. 3.7.88.6 Calls checkDataset, getModelState, readModelState, writeLog 3.7.89 readFromTableRD: Read from an RData (RD) type datastore table. 3.7.89.1 Description readFromTableRD a visioneval framework datastore connection function that reads a dataset from an RData (RD) type datastore table. 3.7.89.2 Usage readFromTableRD(Name, Table, Group, DstoreLoc = NULL, Index = NULL, ReadAttr = FALSE) 3.7.89.3 Arguments Argument Description Name A string identifying the name of the dataset to be read from. Table A string identifying the complete name of the table where the dataset is located. Group a string representation of the name of the datastore group the data is to be read from. DstoreLoc a string representation of the file path of the datastore. NULL if the datastore is the current directory. Index A numeric vector identifying the positions the data is to be written to. NULL if the entire dataset is to be read. ReadAttr A logical identifying whether to return the attributes of the stored dataset. The default value is FALSE. 3.7.89.4 Details This function reads a dataset from an RData (RD) type datastore table. 3.7.89.5 Value A vector of the same type stored in the datastore and specified in the TYPE attribute. 3.7.89.6 Calls checkDataset, getModelState, readModelState, writeLog 3.7.90 writeToTableH5: Write to an RData (RD) type datastore table. 3.7.90.1 Description writeToTableRD a visioneval framework datastore connection function that writes data to an RData (RD) type datastore table and initializes dataset if needed. 3.7.90.2 Usage writeToTableH5(Data_, Spec_ls, Group, Index = NULL) 3.7.90.3 Arguments Argument Description Data_ A vector of data to be written. Spec_ls a list containing the standard module Set specifications described in the model system design documentation. Group a string representation of the name of the datastore group the data is to be written to. Index A numeric vector identifying the positions the data is to be written to. 3.7.90.4 Details This function writes a dataset file to an RData (RD) type datastore table. It initializes the dataset if the dataset does not exist. Enables data to be written to specific location indexes in the dataset. 3.7.90.5 Value TRUE if data is sucessfully written. Updates model state file. 3.7.90.6 Calls checkDataset, getModelState, initDatasetH5, listDatastoreH5, writeLog 3.7.91 writeToTableRD: Write to an RData (RD) type datastore table. 3.7.91.1 Description writeToTableRD a visioneval framework datastore connection function that writes data to an RData (RD) type datastore table and initializes dataset if needed. 3.7.91.2 Usage writeToTableRD(Data_, Spec_ls, Group, Index = NULL) 3.7.91.3 Arguments Argument Description Data_ A vector of data to be written. Spec_ls a list containing the standard module Set specifications described in the model system design documentation. Group a string representation of the name of the datastore group the data is to be written to. Index A numeric vector identifying the positions the data is to be written to. 3.7.91.4 Details This function writes a dataset file to an RData (RD) type datastore table. It initializes the dataset if the dataset does not exist. Enables data to be written to specific location indexes in the dataset. 3.7.91.5 Value TRUE if data is sucessfully written. 3.7.91.6 Calls checkDataset, getModelState, listDatastoreRD, readFromTableRD, Types, writeLog "],["verspm.html", "Chapter 4 VERSPM Tutorial 4.1 Overview 4.2 Inputs and Parameters 4.3 Modules and Outputs 4.4 Development and Installation", " Chapter 4 VERSPM Tutorial 4.1 Overview VERSPM is a strategic planning model that assists state and metropolitan area planners with the evaluation of transportation and land use policy scenarios. It considers a large number of factors which affect the performance of transportation systems and their effects on people and the environment. The Regional Strategic Planning Model (RSPM), was developed by the Oregon Department of Transportation (ODOT) for the purpose of estimating and forecasting the effects of various policies and other influences on the amount of vehicle travel, the types of vehicles and fuels used, and the resulting greenhouse gas (GHG) emissions among other outcomes. The VERSPM model was initially developed to address the following factors: Changes in population demographics (age structure); Changes in personal income; Relative amounts of development occurring in metropolitan, urban and rural areas; Metropolitan, other urban, and rural area densities; Urban form in metropolitan areas (proportion of population living in mixed use areas with a well interconnected street and walkway system); Amounts of metropolitan area transit service; Metropolitan freeway and arterial supplies; Auto and light truck proportions by year; Average vehicle fuel economy by vehicle type and year; Vehicle age distribution by vehicle type; Electric vehicles (EVs), plug-in hybrid electric vehicles (PHEVs) Light-weight vehicles such as bicycles, electric bicycles, electric scooters, etc.; Pricing  fuel, vehicle miles traveled (VMT), parking; Demand management  employer-based and individual marketing; Car-sharing; Effects of congestion on fuel economy; Effects of incident management on fuel economy; Vehicle operation and maintenance  eco-driving, low rolling resistance tires, speed limits; Carbon intensity of fuels, including the well to wheels emissions; and Carbon production from the electric power that is generated to run electric vehicles. 4.1.1 Structure VERSPM is a disaggregate policy model that predicts travel demand impacts at an individual household level. The model estimates vehicle ownership, vehicle travel, fuel consumption, and GHG emissions at the individual household level. This structure accounts for the synergistic and antagonistic effects of multiple policies and factors (e.g.Â gas prices) on vehicle travel and emissions. For example, the battery range of electric vehicles (EVs) and plugin hybrid electric vehicles (PHEVs) is less of an issue for households residing in compact mixeduse neighborhoods because those households tend to drive fewer miles each day. Modeling at the household level makes it possible to evaluate the relationships between travel, emissions and the characteristics of households, land use, transportation systems, vehicles, and other factors. In addition, household level analysis makes it possible to evaluate the equitability of the costs and benefits of different strategies. The model comprises sequential steps with feedback. Each calculation step is composed of a number of calculations that operate on the results of the previous calculation step and on input data that reflect inputs. The VERSPM steps are grouped as follows: The iterative process to balance the VMT with travel costs allows congestion and other costs introduced at this step influence the amount of travel. This step balances the amount of household travel with the cost of travel and recalculates household VMT, Fuel &amp; GHG in the process. The primary outputs of the RSPM are household travel, fuel and power consumption, and GHG emissions calculations, but other information is produced for households and commercial vehicles as well. The amount of commercial (lightduty) and freight (heavy duty) travel is calculated as well as associated fuel, power consumption and GHG emissions for those vehicles. 4.1.2 Modules Household Modules - VESimHouseholds package The following four modules create a set of households for each forecast year that represents each resident in the model area with the likely household mix of household and person characteristics: Create Households Predict Workers Assign Life Cycle Predict Income Land Use Modules - VELandUse package The following five modules assigns a housing type to households (e.g.Â single-family, multi-family, etc.) and a development type (metropolitan, town, rural) based on available input dwelling units. Households are assigned a location in the metropolitan area based on the projected supply of housing and neighborhood affordability. Neighborhood population density and mixed-use character are calculated. Predict Housing Locate Employment Assign Location Types Calculate 4D Measures Calculate Urban Mix Measures The following three modules identifies parking restrictions and prices affecting households, identifies households participating in TDM programs and assigns car service availability to zones (including car sharing and taxis): Assign Parking Restrictions Assign Demand Management Assign Car Service Availability Transport Supply Modules - VETransportSupply package The following two modules gather details about the relevant roadway and public transport systems considered in the simulation of travel: Assign Transit Service Assign Road Miles Household Vehicle Modules - VEHouseholdVehicles package The following seven modules simulate details about the drivers of vehicles in the simulation and types of vehicles they drive: Assign Drivers Assign Vehicle Ownership Assign Vehicle Type Create Vehicle Table Assign Vehicle Age Calculate Vehicle Ownership Cost Adjust Vehicle Ownership Household Travel Modules - VEHouseholdTravel package The following four module provides an initial estimate of average daily vehicle miles traveled (DVMT) for each household based on the household characteristics (e.g., demographics, income, transportation options, and land use). They also calculate the households non-motorized trips. Calculate Household Daily Vehicle Miles Traveled Calculate Non-Automobile or Alternative Mode Trips Calculate Vehicle Trips Divert Single-occupant Vehicle Travel. Powertrain and Fuel Modules - VEPowertrainsAndFuels package The following two modules identifies the vehicles powertrain as an internal combustion engine (ICE), hybrid-electric vehicle (HEV), plug-in hybrid electric vehicle (PHEV), or electric vehicle (EV) and calculates each household vehicles emission. Calculate Carbon Intensity Assign Household Vehicle Powertrains 4.1.3 Feedback THe next step balance the amount of household travel with the cost of travel and recalculate household VMT, Fuel and GHG emissions . This is necessary because: 1) congestion calculations affect fuel economy and thus the amount and cost of fuel consumed; 2) congestion pricing affects the amount of travel and household travel costs; 3) fuel, vehicle travel, and other taxes and fees affect the amount and cost of travel; and 4) eco-driving improves fuel economy and reduces fuel cost. The effect of these adjustments to household travel costs need to be included in the total household travel costs and the adjustment to household DVMT. Travel Performance - VETravelPerformance package The following modules run iteratively to balance the DVMT and travel costs. Total light duty vehicle (household and commercial service vehicle), truck and bus DVMT is calculated for the metropolitan area and assigned to portions of the road system (freeway, arterial, other). Congestion levels are and associated speed reductions are calculated considering the traffic loads and inputs regarding the deployment of traffic operations programs (e.g.Â ramp metering, traffic signal coordination) and congestion pricing. Speed-adjusted fuel economy is calculated considering variations by powertrain. Travel cost per mile due to congestion pricing is also calculated. Household travel costs are calculated from the amounts of miles driven, fuel consumed, electricity consumed, and GHG emitted. Other inputs establish the rates for fuel costs, power costs, fuel taxes, VMT taxes, PAYD insurance, and several external costs. Finally a household budget model is used to adjust household DVMT to reflect the effect of household travel costs on the amount of household travel. The adjusted household DVMT is allocated to vehicles in proportion to the previous allocation. This process can run multiple times until DVMT changes very little between iterations. Calculate Road VMT Calculate Road Performance; Calculate Fuel and Electric Energy Economy Adjust Fuel and Electric Energy Economy Calculate Vehicle Operating Cost Adjust DVMT Based on Budget Heavy Vehicles Emissions - VETravelPerformance The following two modules calculate heavy vehicle fuel and power consumption and GHG emissions: Calculate Commercial Vehicles Emissions Calculate Transit Vehicles Emissions 4.2 Inputs and Parameters The VERSPM model directory is organized with the following subdirectories: defs inputs results (created after a completed model run) scripts Generally speaking, the VERPSM inputs are classified into the five following categories: User input model parameters: These are input parameters (model or scenario specific), or model definition files, that users should review and modify as needed. Fixed input model parameters: These are input parameters, or model definition files, specific to the model that users should not typically modify. User input files: These are input files(model or scenario specific) that users should review and modify as needed. Fixed input files: These are input files specific to the model that that users should not typically modify. Internal module inputs: These are inputs created by other VERSPM modules. 4.2.1 Model Definition Files The following five files are located in the defs directory: run_parameters.json model_parameters.json deflators.csv geo.csv units.csv 4.2.1.1 run_parameters.json This file contains parameters that define key attributes of the model run and relationships to other model runs. This file is a needs to be modified by the user to specify the model base year and run years. A more detailed description of the file can be found here. The results of model run are stored in a directory with the name specified by \"DatastoreName\". This name should be changed when running different scenarios. For e.g.Â when running base scenario the output directory name can be set to BaseScenario by using \"DatastoreName\": \"BaseScenario\" in the file. The format of this file is as follows: { &quot;Model&quot;: &quot;VERSPM&quot;, &quot;Scenario&quot;: &quot;Test&quot;, &quot;Description&quot;: &quot;Test of VERSPM&quot;, &quot;Region&quot;: &quot;RVMPO&quot;, &quot;BaseYear&quot;: &quot;2010&quot;, &quot;Years&quot;: [&quot;2010&quot;, &quot;2038&quot;], &quot;DatastoreName&quot;: &quot;Datastore&quot;, &quot;DatastoreType&quot;: &quot;RD&quot;, &quot;Seed&quot;: 1 } 4.2.1.2 model_parameters.json This file contains global parameters for a particular model configuration that may be used by multiple modules. A more detailed description of the file and its structure can be found here. The source of the default $16/hr is per a Nov 2016 ODOT Report: The Value of Travel-Time: Estimates of the Hourly Value of Time for Vehicles in Oregon. The format of this file is as follows: [ {&quot;NAME&quot;: &quot;ValueOfTime&quot;, &quot;VALUE&quot;: &quot;16&quot;, &quot;TYPE&quot;: &quot;double&quot;, &quot;UNITS&quot;: &quot;base cost year dollars per hour&quot; } ] 4.2.1.3 deflators.csv This file defines the annual deflator values, such as the consumer price index, that are used to convert currency values between different years for currency denomination. This file does not need to be modified unless the years for which the dollar values used in the input dataset is not contained in this file. The format of the file is as follows: Year Value 1999 172.6 2000 178.0 2001 182.4   2010 218.344   2016 249.426 4.2.1.4 geo.csv This file describes all of the geographic relationships for the model and the names of geographic entities in a CSV formatted text file. Azone, Bzone, and Marea should remain consistent with the input data. The format of the file is as follows: Azone Bzone Czone Marea RVMPO D410290001001 NA RVMPO RVMPO D410290001002 NA RVMPO RVMPO D410290002011 NA RVMPO RVMPO D410290002012 NA RVMPO RVMPO D410290002013 NA RVMPO RVMPO D410290002021 NA RVMPO RVMPO D410290002022 NA RVMPO RVMPO D410290002023 NA RVMPO RVMPO D410290002031 NA RVMPO RVMPO D410290002032 NA RVMPO RVMPO D410290002033 NA RVMPO RVMPO D410290003001 NA RVMPO RVMPO  NA RVMPO To learn more about VERSPM model geographic relationships see here 4.2.1.5 units.csv This file describes the default units to be used for storing complex data types in the model. This file should NOT be modified by the user. The format of the file is as follows: Type Units currency USD distance MI area SQMI mass KG volume GAL time DAY energy GGE people PRSN trips VEH area TRIP households HH employment JOB activity HHJOB The VisionEval model system keeps track of the types and units of measure of all data that is processed. More details about the file and structure can be found here. 4.2.2 Input Files azone_carsvc_characteristics.csv: This file specifies the different characteristics for high and low car service level and is used in the CreateVehicleTable and AssignVehicleAge modules. azone_charging_availability.csv This file has data on proportion of different household types who has EV charging available and is used in the AssignHHVehiclePowertrain module. azone_electricity_carbon_intensity.csv This file is used to specify the carbon intensity of electricity and is optional (only needed if user wants to modify the values). The file is used in Initialize (VEPowertrainsAndFuels) and CalculateCarbonIntensity modules. azone_fuel_power_cost.csv This file supplies data for retail cost of fuel and electricity and is used in the CalculateVehicleOperatingCost module. azone_gq_pop_by_age.csv: This file contains group quarters population estimates/forecasts by age and is used in the CreateHouseholds module. azone_hh_pop_by_age.csv This file contains population estimates/forecasts by age and is used in the CreateHouseholds module. azone_hh_veh_mean_age.csv This file provides inputs for mean auto age and mean light truck age and is used in the AssignVehicleAge module. azone_hh_veh_own_taxes.csv This file provides inputs for flat fees/taxes (i.e.Â annual cost per vehicle) and ad valorem taxes (i.e.Â percentage of vehicle value paid in taxes). The file is used in CalculateVehicleOwnCost module. azone_hhsize_targets.csv: This file contains the household specific targets and is used in CreateHouseholds module. azone_lttrk_prop.csv This file specifies the light truck proportion of the vehicle fleet and is used in AssignVehicleType module. azone_payd_insurance_prop.csv This file provides inputs on the proportion of households having PAYD (pay-as-you-drive) insurance and is used in the CalculateVehicleOwnCost module. azone_per_cap_inc.csv This file contains information on regional average per capita household and group quarters income in year 2010 dollars and is used in the PredictIncome module. azone_prop_sov_dvmt_diverted.csv This file provides inputs for a goal for diverting a portion of SOV travel within a 20-mile tour distance and is used in the DivertSovTravel module. azone_relative_employment.csv: This file contains ratio of workers to persons by age and is used in the PredictWorkers module. azone_veh_use_taxes.csv This file supplies data for vehicle related taxes and is used in the CalculateVehicleOperatingCost module. azone_vehicle_access_times.csv This file supplies data for vehicle access and egress time and is used in the CalculateVehicleOperatingCost module. bzone_transit_service.csv This file supplies the data on relative public transit accessibility and is used in the AssignTransitService module. bzone_carsvc_availability.csv This file contains the information about level of car service availability and is used in the AssignCarSvcAvailability module. bzone_dwelling_units.csv: This file contains the number single-family, multi-family and group-quarter dwelling units and is used in the PredictHousing module. bzone_employment.csv: This file contains the total, retail and service employment by zone and is used in the LocateEmployment module. - bzone_hh_inc_qrtl_prop.csv This file contains the proportion of households in 1st, 2nd, 3rd, and 4th quartile of household income and is used in the PredictHousing module. bzone_lat_lon.csv This file contains the latitude and longitude of the centroid of the zone and is used in the LocateEmployment module. bzone_network_design.csv This file contains the intersection density in terms of pedestrian-oriented intersections having four or more legs per square mile and is used in the Calculate4DMeasures module. bzone_parking.csv This file contains the parking information and is used in the AssignParkingRestrictions module. bzone_travel_demand_mgt.csv This file contains the information about workers and households participating in demand management programs and is used in the AssignDemandManagement module. bzone_unprotected_area.csv This file contains the information about unprotected (i.e., developable) area within the zone and is used in the Calculate4DMeasures module. bzone_urban-mixed-use_prop.csv This file contains the target proportion of households located in mixed-used neighborhoods in zone and is used in the CalculateUrbanMixMeasure module. bzone_urban-town_du_proportions.csv This file contains proportion of Single-Family, Multi-Family and Group Quarter dwelling units within the urban portion of the zone and is used in the AssignLocTypes module. marea_base_year_dvmt.csv This file is used to specify to adjust the dvmt growth factors and is optional (only needed if user wants to modify the values). The file is used in the Initialize (VETravelPerformance), CalculateBaseRoadDvmt and CalculateFutureRoadDvmt modules. marea_congestion_charges.csv This file is used to specify the charges of vehicle travel for different congestion levels and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateRoadPerformance modules. marea_dvmt_split_by_road_class.csv This file is used to specify the dvmt split for different road classes and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateBaseRoadDvmt modules. marea_lane_miles.csv This file contains inputs on the numbers of freeway lane-miles and arterial lane-miles and is used in the AssignRoadMiles module. marea_operations_deployment.csv This file is used to specify the proportion of dvmt affected by operations for different road classes and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateRoadPerformance modules. marea_speed_smooth_ecodrive.csv This input file supplies information of deployment of speed smoothing and ecodriving by road class and vehicle type and is used in the CalculateMpgMpkwhAdjustments module. marea_transit_ave_fuel_carbon_intensity.csv This file is used to specify the average carbon intensity of fuel used by transit and is optional. The file is used in the Initialize (VETravelPerformance) module. marea_transit_biofuel_mix.csv This file is used to specify the biofuel used by transit and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateCarbonIntensity modules. marea_transit_fuel.csv This file is used to specify the transit fuel proportions and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateCarbonIntensity modules. marea_transit_powertrain_prop.csv This file is used to specify the mixes of transit vehicle powertrains and is optional. The file is used in the Initialize (VETravelPerformance) and CalculatePtranEnergyAndEmissions modules. marea_transit_service.csv This file contains annual revenue-miles for different transit modes for metropolitan area and is used in the AssignTransitService module. other_ops_effectiveness.csv This file is used to specify the delay effects of operations in different road classes and is optional (only needed if user wants to modify the values). The file is used in the Initialize (VETravelPerformance) and CalculateRoadPerformance modules. region_ave_fuel_carbon_intensity.csv This file is used to specify the average carbon density for different vehicle types and is optional (only needed if user wants to modify the values). The file is used in the Initialize (VETravelPerformance) and CalculateCarbonIntensity modules. region_base_year_hvytrk_dvmt.csv This file is used to specify the heavy truck dvmt for base year and is optional. The file is used in the Initialize (VETravelPerformance), CalculateBaseRoadDvmt and CalculateFutureRoadDvmt modules. region_carsvc_powertrain_prop.csv This file is used to specify the powertrain proportion of car services and is optional. The file is used in the Initialize (VETravelPerformance), AssignHhVehiclePowertrain and AdjustHhVehicleMpgMpkwh modules. region_comsvc_lttrk_prop.csv This file supplies data for the light truck proportion of commercial vehicles and is used in the CalculateComEnergyAndEmissions module. region_comsvc_powertrain_prop.csv This file is used to specify the powertrain proportion of commercial vehicles and is optional. The file is used in the Initialize (VEPowertrainsAndFuels) and CalculateComEnergyAndEmissions modules. region_hh_driver_adjust_prop.csv This file specifies the relative driver licensing rate relative to the model estimation data year and is used in the AssignDrivers module. region_hvytrk_powertrain_prop.csv This file is used to specify the powertrain proportion of heavy duty trucks and is optional. The file is used in the Initialize (VEPowertrainsAndFuels) and CalculateComEnergyAndEmissions modules. region_prop_externalities_paid.csv This file supplies data for climate change and other social costs and is used in the CalculateVehicleOperatingCost module. 4.3 Modules and Outputs The VERSPM model is a compilation of several modules, listed below: MODULE PACKAGE CreateHouseholds VESimHouseholds PredictWorkers VESimHouseholds AssignLifeCycle VESimHouseholds PredictIncome VESimHouseholds PredictHousing VELandUse LocateEmployment VELandUse AssignLocTypes VELandUse Calculate4DMeasures VELandUse CalculateUrbanMixMeasure VELandUse AssignParkingRestrictions VELandUse AssignDemandManagement VELandUse AssignCarSvcAvailability VELandUse AssignTransitService VETransportSupply AssignRoadMiles VETransportSupply AssignDrivers VEHouseholdVehicles AssignVehicleOwnership VEHouseholdVehicles AssignVehicleType VEHouseholdVehicles CreateVehicleTable VEHouseholdVehicles AssignVehicleAge VEHouseholdVehicles CalculateVehicleOwnCost VEHouseholdVehicles AdjustVehicleOwnership VEHouseholdVehicles CalculateHouseholdDvmt VEHouseholdTravel CalculateAltModeTrips VEHouseholdTravel CalculateVehicleTrips VEHouseholdTravel DivertSovTravel VEHouseholdTravel Initialize VEPowertrainsAndFuels CalculateCarbonIntensity VEPowertrainsAndFuels AssignHhVehiclePowertrain VEPowertrainsAndFuels Initialize VETravelPerformance CalculateBaseRoadDvmt VETravelPerformance CalculateFutureRoadDvmt VETravelPerformance CalculateRoadPerformance VETravelPerformance CalculateMpgMpkwhAdjustments VETravelPerformance AdjustHhVehicleMpgMpkwh VETravelPerformance CalculateVehicleOperatingCost VETravelPerformance BudgetHouseholdDvmt VETravelPerformance CalculateComEnergyAndEmissions VETravelPerformance CalculatePtranEnergyAndEmission VETravelPerformance The following section describes each module, its required inputs, and its generated outputs. 4.3.1 CreateHouseholds This module creates simulated households using inputs of population by age group by simulation year. User Input Files Household Population (azone_hh_pop_by_age.csv) This file contains population estimates/forecasts by age for each of the base and future years. The file format includes number of persons within six age groups: 0-14 15-19 20-29 30-54 55-64 65 Plus Base year data for population by age category can be sourced from the Census. Future year data must be developed by the user; in many regions population forecasts are available from regional or state agencies and/or local academic sources. Here is a snapshot of the file: Geo Year Age0to14 Age15to19 Age20to29 Age30to54 Age55to64 Age65Plus RVMPO 2010 30193 10970 20557 52327 24840 29240 RVMPO 2038 39759 12781 24972 75984 27563 66139 Household Size (azone_hhsize_targets.csv) This file contains the household-specific targets for the population synthesizer. This file contains two attributes: AveHhSize: Average household size for non-group quarters households Prop1PerHh: Proportion of non-group quarters households having only one person Household size data for the base year can be sourced from the Census. Here is a snapshot of the file: Geo Year AveHhSize Prop1PerHh RVMPO 2010 NA 0.3 RVMPO 2038 NA NA Group Quarter Population (azone_gq_pop_by_age.csv) This file contains group quarters population estimates/forecasts by age for each of the base and future years. The file format includes number of persons within the following six age categories: 0-14 15-19 20-29 30-54 55-64 65 Plus Group quarters are distinguished between two types: institutional and non-institutional. Institutional group quarter populations are those in correctional facilities or nursing homes. Non-institutional group quarters include college dormitories, military barracks, group homes, missions, or shelters. Only non-institutional group quarters are included in the modeled population, given the assumption that institutional group quarters populations do not account for much, if any, travel. Base year data for group quarter populations can be sourced from the Census. Here is a snapshot of the file: Geo Year GrpAge0to14 GrpAge15to19 GrpAge20to29 GrpAge30to54 GrpAge55to64 GrpAge65Plus RVMPO 2010 0 666 382 66 7 0 RVMPO 2038 0 666 382 66 7 0 Module Outputs Households are created with the number of persons in each of six age categories (0-14, 15-19, 20-29, 30-54, 55-64, and 65+) and the total number of persons in the household. Two types of households are created: regular households (i.e.Â not persons living in group quarters) and group quarters households . HhId: Unique household ID HhSize: Number of persons Age0to14: Persons in 0 to 14 year old age group Age15to19: Persons in 15 to 19 year old age group Age20to29: Persons in 20 to 29 year old age group Age30to54: Persons in 30 to 54 year old age group Age55to64: Persons in 55 to 64 year old age group Age65Plus: Persons in 65 or older age group HhType: Coded household age composition (e.g., 2-1-0-2-0-0) or Grp for group quarters 4.3.2 PredictWorkers This module assigns workers by age to households and to non-institutional group quarters population. It is a simple model which predicts workers as a function of the household type and age composition. User Input Files Relative employment (azone_relative_employment.csv) This file contains the ratio of workers to persons by age cohort in the model year relative to the model estimation data year. This file contains five age cohorts: RelEmp15to19: Ratio of workers to persons age 15 to 19 in model year versus in estimation data year RelEmp20to29: Ratio of workers to persons age 20 to 29 in model year versus in estimation data year RelEmp30to54: Ratio of workers to persons age 30 to 54 in model year versus in estimation data year RelEmp55to64: Ratio of workers to persons age 55 to 64 in model year versus in estimation data year RelEmp65Plus: Ratio of workers to persons age 65 or older in model year versus in estimation data year Setting a value of 1 assumes that the ratio of workers to persons is consistent with estimation data for that specific age cohort. Here is a snapshot of the file: Geo Year RelEmp15to19 RelEmp20to29 RelEmp30to54 RelEmp55to64 RelEmp65Plus RVMPO 2010 1 1 1 1 1 RVMPO 2038 1 1 1 1 1 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HHType Coded household age composition Module Outputs Wkr15to19: Workers in 15 to 19 year old age group Wkr20to29: Workers in 20 to 29 year old age group Wkr30to54: Workers in 30 to 54 year old age group Wkr55to64: Workers in 55 to 64 year old age group Wkr65Plus: Workers in 65 or older age group Workers: Total workers NumWkr: Number of workers residing in the zone For more information see here 4.3.3 AssignLifeCycle This module assigns a life cycle category to each household. The life cycle categories are similar, but not the same as, those established for the National Household Travel Survey (NHTS). The age categories used in VisionEval models are broader than those used by the NHTS to identify children of different ages. This is a simple model with set of rules that assigns age group categories based on the age of persons and workers in the household. User Input Files This module has no user input requirements. Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HHType Coded household age composition VESimHouseholds PredictWorkers Wrk15to19 Workers in 15 to 19 year old age group VESimHouseholds PredictWorkers Wrk20to29 Workers in 20 to 29 year old age group VESimHouseholds PredictWorkers Wrk30to54 Workers in 30 to 54 year old age group VESimHouseholds PredictWorkers Wrk55to64 Workers in 55 to 64 year old age group VESimHouseholds PredictWorkers Wrk65Plus Workers in 65 or older age group Module Outputs LifeCycle: Household life cycle as defined by 2009 NHTS LIF_CYC variable For more information see here 4.3.4 PredictIncome This module predicts the income for each simulated household given the number of workers in each age group and the average per capita income for the Azone where the household resides. User Input Files Regional Income (azone_per_cap_inc.csv) This file contains information on regional average per capita household (HHIncomePC) and group quarters (GQIncomePC) income by forecast year in year 2010 dollars. The data can be obtained from the U.S. Department of Commerce Bureau of Economic Analysis for the current year or from regional or state sources for forecast years. In order to use current year dollars just replace 2010 in column labels with current year. For example, if the data is obtained in year 2015 dollars then the column labels in the file shown below will become HHIncomePC.2015 and GQIncomePC.2015. Here is a snapshot of the file: Geo Year HHIncomePC.2010 GQIncomePC.2010 RVMPO 2010 32164 7500 RVMPO 2038 43334 10000 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HHSize Number of persons in the household VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HHType Coded household age composition VESimHouseholds PredictWorkers Wrk15to19 Workers in 15 to 19 year old age group VESimHouseholds PredictWorkers Wrk20to29 Workers in 20 to 29 year old age group VESimHouseholds PredictWorkers Wrk30to54 Workers in 30 to 54 year old age group VESimHouseholds PredictWorkers Wrk55to64 Workers in 55 to 64 year old age group Module Outputs Income: Total annual household (non-qroup and group quarters) income For more information see here 4.3.5 PredictHousing This module assigns a housing type, either single-family (SF) or multifamily (MF) to non-group quarters households based on the respective supplies of SF and MF dwelling units in the housing market to which the household is assigned (i.e.Â the Azone the household is assigned to) and household characteristics. The model then assigns each household to a Bzone based on the households housing type and income quartile as well as the supply of housing by type and Bzone (an input), and the distribution of households by income quartile for each Bzone (an input). The module assigns non-institutional group quarters households to Bzones based on the supply of group quarters units by Bzone. User Input Files Dwelling Units (bzone_dwelling_units.csv) This file contains the number single-family dwelling units (SFDU), multifamily dwelling units (MFDU) and group-quarter dwelling units (GQDU) by Bzone for each of the base and future years. Data for the base year for single-family and multifamily dwelling units can be sourced from Census housing data with information on units in structure, with multifamily dwelling units defined as any structures with 2-or-more units. For group quarters, unless more detailed local data is available, Census data for non-institutionalized group quarter population can serve as a proxy for dwelling units assuming a 1:1 ratio of dwelling unit per GQ population. Here is a snapshot of the file: Geo Year SFDU MFDU GQDU D410290014002 2010 559 0 0 D410290013012 2010 79 8 523 D410290014001 2010 1398 180 0 D410290014003 2010 1385 172 0 D410290013021 2010 271 0 0 Household Proportion by Income (bzone_hh_inc_qrtl_prop.csv) This file contains the proportion of Bzone non-group quarters households by quartile of Azone household income category for each of the base and future years. The total for each Bzone should sum to 1. Here is a snapshot of the file: Geo Year HhPropIncQ1 HhPropIncQ2 HhPropIncQ3 HhPropIncQ4 D410290014002 2010 0.12 0.54 0.26 0.54 D410290013012 2010 0.00 0.32 0.36 0.32 D410290014001 2010 0.24 0.16 0.26 0.16 D410290014003 2010 0.16 0.19 0.36 0.19 D410290013021 2010 0.29 0.29 0.15 0.29 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HHSize Number of persons in the household VESimHouseholds CreateHouseholds HHType Coded household age composition VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds PredictWorkers Workers Total workers in the household VESimHouseholds PredictIncome Income Total annual income of household Module Outputs HouseType: Type of dwelling unit of the household SF: Number of households living in single family dwelling units in zone MF: Number of households living in multi-family dwelling units in zone GQ: Number of persons living in group quarters in zone Pop: Population residing in zone NumHh: Number of households in zone NumWkr: Number of workers in zone For more information see here 4.3.6 LocateEmployment This module places employment in Bzones based on input assumptions of employment by type and Bzone. The model adjusts the employment numbers to balance with the number of workers in the region. The module creates a worker table and assigns workers to Bzone employment locations as a function of the number of jobs in each Bzone and the distance between residence and employment Bzones. User Input Files Employment Data (bzone_employment.csv) This file contains the total, retail and service employment by zone for each of the base and future years. Employment categorizations are from the Environmental Protection Agencys (EPA) Smart Location Database 5-tier employment classification. TotEmp: Total number of jobs in zone RetEmp: Number of jobs in retail sector in zone (Census LEHD: CNS07) SvcEmp: Number of jobs in service sector in zone (Census LEHD: CNS12 + CNS14 + CNS15 + CNS16 + CNS19) Here is a snapshot of the file: Geo Year TotEmp RetEmp SvcEmp D410290014002 2010 403 262 96 D410290013012 2010 1382 73 880 D410290014001 2010 271 12 172 D410290014003 2010 609 66 413 D410290013021 2010 49 1 41 Zonal Latituted Longitude (bzone_lat_lon.csv) This file contains the latitude and longitude of the centroid of the zone. Here is a snapshot of the file: Geo Year Latitude Longitude D410290014002 2010 42.48657 -122.8014 D410290013012 2010 42.44259 -122.8461 D410290014001 2010 42.46010 -122.7925 D410290014003 2010 42.47673 -122.8008 D410290013021 2010 42.37304 -122.7793 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds PredictWorkers Workers Total workers in the household VESimHouseholds PredictWorkers NumWkr Number of workers residing in the zone Module Outputs TotEmp: Total number of jobs in zone RetEmp: Number of jobs in retail sector in zone SvcEmp: Number of jobs in service sector in zone WkrId: Unique worker ID DistanceToWork: Distance from home to work assuming location at Bzone centroid and Manhattan distance For more information see here 4.3.7 AssignLocTypes This module assigns households to location types: Urban (located within an urbanized area boundary), Town (located in a smaller urban area that does not have enough population to qualify as an urbanized area), and Rural (located in an area characterized by low density dispersed development). User Input Files Urban dwelling proportion (bzone_urban-town_du_proportions.csv) This file contains proportion of SF, MF and GQ dwelling units within the urban portion of the zone. PropUrbanSFDU: Proportion of single family dwelling units located within the urban portion of the zone PropUrbanMFDU: Proportion of multi-family dwelling units located within the urban portion of the zone PropUrbanGQDU: Proportion of group quarters accommodations located within the urban portion of the zone PropTownSFDU: Proportion of single family dwelling units located within the town portion of the zone PropTownMFDU: Proportion of multi-family dwelling units located within the town portion of the zone PropTownGQDU: Proportion of group quarters accommodations located within the town portion of the zone Here is a snapshot of the file: Geo Year PropUrbanSFDU PropUrbanMFDU PropUrbanGQDU PropTownSFDU PropTownMFDU PropTownGQDU D410290014002 2010 0.4686941 1 1 0 0 0 D410290013012 2010 0.8860759 1 1 0 0 0 D410290014001 2010 0.8626609 1 1 0 0 0 D410290014003 2010 0.9906137 1 1 0 0 0 D410290013021 2010 0.0147601 1 1 0 0 0 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds PredictWorkers HhSize Number of persons in household VESimHouseholds PredictIncome Income Total annual income of household VELandUse PredictHousing HouseType Type of dwelling unit of the household Module Outputs LocType: Location type (Urban, Town, Rural) of the place where the household resides UrbanPop: Urbanized area population RuralPop: Rural (i.e.Â non-urbanized area) population TownPop: Town (i.e.Â urban but non-urbanized area) population UrbanIncome: Total household income of the urbanized area population TownIncome: Total household income of the town (i.e.Â urban but non-urbanized area) population RuralIncome: Total household income of the rural (i.e.Â non-urbanized area) population For more information see here 4.3.8 Calculate4DMeasures This module calculates several so-called 4D measures by Bzone including density, diversity (i.e.Â mixing of land uses), transportation network design, and destination accessibility, i.e., the four Ds of density, diversity, design, and destination accessibility. These measures are the same as or are similar to measures included in the EPAs Smart Location Database User Input Files Developable Area (bzone_unprotected_area.csv) This file contains the information about unprotected (i.e., developable) area within the zone. UrbanArea: Area that is Urban and unprotected (i.e.Â developable) within the zone (Acres) TownArea: Area that is Town and unprotected within the zone (Acres) RuralArea: Area that is Rural and unprotected within the zone (Acres) Here is a snapshot of the file: Geo Year UrbanArea TownArea RuralArea D410290014002 2010 298.6487137 0 4996.11876 D410290013012 2010 830.6009450 0 384.80922 D410290014001 2010 983.1506646 0 3699.94017 D410290014003 2010 439.2145619 0 90.86259 D410290013021 2010 0.3548548 0 6212.57640 Network density (bzone_network_design.csv): This file contains the intersection density measured by the number of pedestrian-oriented intersections having four or more legs per square mile (Ref: EPA 2010 Smart Location Database). Here is a snapshot of the file: 4.3.8.1 Internal Module Inputs Package Module Outputs Description VELandUse PredictHousing Pop Population residing in zone VELandUse PredictHousing NumHh Number of households in zone VELandUse PredictHousing NumWkr Number of workers in zone VELandUse LocateEmployment TotEmp Total number of jobs in zone VELandUse LocateEmployment RetEmp Number of jobs in retail sector in zone VELandUse LocateEmployment SvcEmp Number of jobs in service sector in zone 4.3.8.2 Module Outputs D1B: Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone D1C: Gross employment density (jobs/acre) on unprotected land land in zone D1D: Gross activity density (employment + households) on unprotected land in zone D2A_JPHH: Ratio of jobs to households in zone D2A_WRKEMP: Ratio of workers to jobs in zone D2A_EPHHM: Employment and household entropy measure for zone considering numbers of households, retail jobs, service jobs, and other jobs D5: Destination accessibility of zone calculated as harmonic mean of jobs within two (2) miles and population within five (5) miles For more information see here Top 4.3.9 CalculateUrbanMixMeasure This module calculates an urban mixed-use measure based on the 2001 National Household Travel Survey (NHTS) measure of the tract level urban/rural indicator. This measure, developed by Claritas, uses the density of the tract and surrounding tracts to identify the urban/rural context of the tract. The categories include urban, suburban, second city, town and rural. Mapping of example metropolitan areas shows that places identified as urban correspond to central city and inner neighborhoods characterized by mixed use, higher levels of urban accessibility, and higher levels of walk/bike/transit accessibility. 4.3.9.1 User Input Files Household neighborhood (bzone_urban-mixed-use_prop.csv): This file contains the target proportion of households located in mixed-used neighborhoods in each zone. MixUseProp: Target for proportion of households located in mixed-use neighborhoods in zone (or NA if no target) Here is a snapshot of the file: Developable area (bzone_unprotected_area.csv): This file contains the information about unprotected (i.e., developable) area within the zone. UrbanArea: Area that is Urban and unprotected within the zone TownArea: Area that is Town and unprotected within the zone RuralArea: Area that is Rural and unprotected within the zone Here is a snapshot of the file: 4.3.9.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VELandUse PredictHousing HouseType Type of dwelling unit of the household VELandUse PredictHousing NumHh Number of households in zone VELandUse AssignLocTypes UrbanPop Urbanized area population VELandUse AssignLocTypes RuralPop Rural (i.e.Â non-urbanized area) population 4.3.9.3 Module Outputs IsUrbanMixNbrhd: Flag identifying whether household is (1) or is not (0) in an urban, mixed-use neighborhood For more information see here Top 4.3.10 AssignParkingRestrictions This module identifies parking restrictions and prices affecting households at their residences, workplaces, and other places they are likely to visit in the urban area. The parking restriction/cost information is used by other modules in calculating the cost of vehicle ownership and the cost of vehicle use. 4.3.10.1 User Input Files Household neighborhood (bzone_parking.csv): This file contains the parking information by Bzone for each of the base and future years. PkgSpacesPerSFDU: Average number of free parking spaces available to residents of single-family dwelling units PkgSpacesPerMFDU: Average number of free parking spaces available to residents of multifamily dwelling units PkgSpacesPerGQ: Average number of free parking spaces available to group quarters residents PropWkrPay: Proportion of workers who pay for parking PropCashOut: Proportions of workers paying for parking in a cash-out-buy-back program PkgCost: Average daily cost for long-term parking (e.g.Â paid on monthly basis) Here is a snapshot of the file: 4.3.10.2 Internal Module Inputs Package Module Outputs Description VELandUse PredictHousing NumHh Number of households in zone VELandUse PredictHousing HouseType Type of dwelling unit of the household VELandUse LocateEmployment RetEmp Number of jobs in retail sector in zone VELandUse LocateEmployment SvcEmp Number of jobs in service sector in zone 4.3.10.3 Module Outputs FreeParkingSpaces: Number of free parking spaces available to the household ParkingUnitCost: Daily cost for long-term parking (e.g., parking paid for on a monthly basis) OtherParkingCost: Daily cost for parking at shopping locations or other locations of paid parking not including work PaysForParking: Does worker pay for parking: 1 = yes, 0 = no IsCashOut: Is worker part of a cash-out-buy-back program: 1 = yes, 0 = no ParkingCost: Daily cost for long-term parking (e.g., parking paid for on a monthly basis) For more information see here Top 4.3.11 AssignDemandManagement This module assigns demand management program participation to households and to workers. Households are assigned to individualized marketing program participation. Workers are assigned to employee commute options participation. The module computes the net proportional reduction in household daily VMT (DVMT) based on the participation in travel demand management programs. 4.3.11.1 User Input Files Demand management (bzone_travel_demand_mgt.csv): This file contains the information about workers and households participating in demand management programs. EcoProp: Proportion of workers working in Bzone who participate in strong employee commute options program ImpProp: Proportion of households residing in Bzone who participate in strong individualized marketing program Here is a snapshot of the file: 4.3.11.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds CreateHouseholds HHSize Number of persons in the household VESimHouseholds PredictWorkers Workers Total workers in the household 4.3.11.3 Module Outputs IsIMP: Identifies whether household is participant in travel demand management individualized marketing program (IMP): 1 = yes, 0 = no PropTdmDvmtReduction: Proportional reduction in household DVMT due to participation in travel demand management programs IsECO: Identifies whether worker is a participant in travel demand management employee commute options program: 1 = yes, 0 = no For more information see here Top 4.3.12 AssignCarSvcAvailability This module reads in and assigns car service availability in Bzones. Car services include taxis, car sharing services (e.g.Â Car-To-Go, Zipcar), and future automated taxi services. A high level of car service is increases household car availability  similar to owning a car. Low levels of car service does not have competitive access time and therefore does not increase household car availability. 4.3.12.1 User Input Files Car service availability (bzone_carsvc_availability.csv): This file contains the information about level of car service availability for Bzones. Here is a snapshot of the file: 4.3.12.2 Internal Module Inputs This module does not have any internal module inputs 4.3.12.3 Module Outputs CarSvcLevel: Level of car service availability for household. High means access is competitive with household owned car; Low is not competitive. For more information see here Top 4.3.13 AssignTransitService This module assigns transit service level to the metropolitan area (Marea) and neighborhoods (Bzones). Annual revenue-miles (i.e.Â transit miles in revenue service) by transit mode type are read from an input file. The following eight modes are recognized: * DR = Demand-responsive * VP = Vanpool and similar * MB = Standard motor bus * RB = Bus rapid transit and commuter bus * MG = Monorail/automated guideway * SR = Streetcar/trolley bus/inclined plain * HR = Heavy Rail/Light Rail * CR = Commuter Rail/Hybrid Rail/Cable Car/Aerial Tramway Revenue miles are converted to bus (i.e., MB) equivalents using factors derived from urbanized area data from the National Transit Database (NTD). Bus-equivalent revenue miles are used in models which predict vehicle ownership and household DVMT. Revenue miles by mode type are also translated (using NTD data) into vehicle miles by three vehicle types: van, bus, and rail. Miles by vehicle type are used to calculate public transit energy consumption and emissions. 4.3.13.1 User Input Files Transit service for Marea (marea_transit_service.csv): This file contains annual revenue-miles for different transit modes for metropolitan area. DRRevMi: Annual revenue-miles of demand-responsive public transit service VPRevMi: Annual revenue-miles of van-pool and similar public transit service MBRevMi: Annual revenue-miles of standard bus public transit service RBRevMi: Annual revenue-miles of rapid-bus and commuter bus public transit service MGRevMi: Annual revenue-miles of monorail and automated guideway public transit service SRRevMi: Annual revenue-miles of streetcar and trolleybus public transit service HRRevMi: Annual revenue-miles of light rail and heavy rail public transit service CRRevMi: Annual revenue-miles of commuter rail, hybrid rail, cable car, and aerial tramway public transit service Here is a snapshot of the file: Transit service for Bzone (bzone_transit_service.csv): This file supplies the data on relative public transit accessibility for Bzones D4c: Aggregate frequency of transit service within 0.25 miles of block group boundary per hour during evening peak period (Ref: EPA 2010 Smart Location Database) Here is a snapshot of the file: 4.3.13.2 Internal Module Inputs Package Module Outputs Description VELandUse AssignLocTypes UrbanPop Urbanized area population 4.3.13.3 Module Outputs TranRevMiPC: Ratio of annual bus-equivalent revenue-miles (i.e., revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population VanDvmt: Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services. BusDvmt: Total daily miles traveled by buses of various sizes to provide bus service of various types. RailDvmt: Total daily miles traveled by light rail, heavy rail, commuter rail, and similar types of vehicles. For more information see here Top 4.3.14 AssignRoadMiles This module assigns freeway and arterial lane-miles to metropolitan areas (Marea) and calculates freeway lane-miles per capita. 4.3.14.1 User Input Files Lane-Miles for Marea (marea_lane_miles.csv): This file contains inputs on the numbers of freeway lane-miles and arterial lane-miles by Marea and year. FwyLaneMi: Lane-miles of roadways functionally classified as freeways or expressways in the urbanized portion of the metropolitan area ArtLaneMi: Lane-miles of roadways functionally classified as arterials (but not freeways or expressways) in the urbanized portion of the metropolitan area Here is a snapshot of the file: 4.3.14.2 Internal Module Inputs Package Module Outputs Description VELandUse AssignLocTypes UrbanPop Urbanized area population 4.3.14.3 Module Outputs FwyLaneMiPC: Ratio of urbanized area freeway and expressway lane-miles to urbanized area population For more information see here Top 4.3.15 AssignDrivers This module assigns drivers by age group to each household as a function of the numbers of persons and workers by age group, the household income, land use characteristics, and public transit availability. 4.3.15.1 User Input Files Adjustment proportion for household drivers by age group for the region (region_hh_driver_adjust_prop.csv): This file specifies the relative driver licensing rate relative to the model estimation data year in order to account for observed or projected changes in licensing rates. Drv15to19AdjProp: Target proportion of unadjusted model number of drivers 15 to 19 years old (1 = no adjustment) Drv20to29AdjProp: Target proportion of unadjusted model number of drivers 20 to 29 years old (1 = no adjustment) Drv30to54AdjProp: Target proportion of unadjusted model number of drivers 30 to 54 years old (1 = no adjustment) Drv55to64AdjProp: Target proportion of unadjusted model number of drivers 55 to 64 years old (1 = no adjustment) Drv65PlusAdjProp: Target proportion of unadjusted model number of drivers 65 or older (1 = no adjustment) Here is a snapshot of the file: 4.3.15.2 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService TranRevMiPC Ratio of annual bus-equivalent revenue-miles (i.e.Â revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds PredictIncome Income Total annual income of household VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides 4.3.15.3 Module Outputs Drv15to19: Number of drivers 15 to 19 years old Drv20to29: Number of drivers 20 to 29 years old Drv30to54: Number of drivers 30 to 54 years old Drv55to64: Number of drivers 55 to 64 years old Drv65Plus: Number of drivers 65 or older Drivers: Number of drivers in household DrvAgePersons: Number of people 15 year old or older in the household For more information see here Top 4.3.16 AssignVehicleOwnership This module determines the number of vehicles owned or leased by each household as a function of household characteristics, land use characteristics, and transportation system characteristics. 4.3.16.1 User Input Files This module has no user input requirements. 4.3.16.2 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService TranRevMiPC Ratio of annual bus-equivalent revenue-miles to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds PredictWorkers Workers Total workers in the household VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VELandUse PredictHousing HouseType Type of dwelling unit of the household VESimHouseholds PredictIncome Income Total annual income of household VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides 4.3.16.3 Module Outputs Vehicles: Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons For more information see here Top 4.3.17 AssignVehicleType This module identifies how many household vehicles are light trucks and how many are automobiles. Light trucks include pickup trucks, sport utility vehicles, vans, and any other vehicle not classified as a passenger car. Automobiles are vehicles classified as passenger cars. 4.3.17.1 User Input Files Light truck proportion for Azone (azone_lttrk_prop.csv): This file specifies the light truck proportion of the vehicle fleet. LtTrkProp: Proportion of household vehicles that are light trucks (pickup, SUV, van). Here is a snapshot of the file: 4.3.17.2 Internal Module Inputs Package Module Outputs Description VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VELandUse PredictHousing HouseType Type of dwelling unit of the household VESimHouseholds PredictIncome Income Total annual income of household VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood 4.3.17.3 Module Outputs NumLtTrk: Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household NumAuto: Number of automobiles (i.e., four-tire passenger vehicles that are not light trucks) owned or leased by household For more information see here Top 4.3.18 CreateVehicleTable This module creates a vehicle table and populates it with household ID and geography fields. 4.3.18.1 User Input Files 4.3.18.1.1 Car service characteristics (azone_carsvc_characteristics.csv) This file specifies the different characteristics for high and low car service levels by Azone. More information on car service can be found here(placeholder). Changing this input is optional and using the default input values is standard practice. - HighCarSvcCost: Average cost in dollars per mile for travel by high service level car service exclusive of the cost of fuel, road use taxes, and carbon taxes (and any other social costs charged to vehicle use) - LowCarSvcCost: Average cost in dollars per mile for travel by low service level car service exclusive of the cost of fuel, road use taxes, and carbon taxes (and any other social costs charged to vehicle use) - AveCarSvcVehicleAge: Average age of car service vehicles in years - LtTrkCarSvcSubProp: The proportion of light-truck owners who would substitute a less-costly car service option for owning their light truck - AutoCarSvcSubProp: The proportion of automobile owners who would substitute a less-costly car service option for owning their automobile Here is a snapshot of the file: Geo Year HighCarSvcCost.2010 LowCarSvcCost.2010 AveCarSvcVehicleAge LtTrkCarSvcSubProp AutoCarSvcSubProp RVMPO 2010 1 3 3 0.75 1 RVMPO 2038 1 3 3 0.75 1 4.3.18.2 Internal Module Inputs Package Module Outputs Description VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignDrivers DrvAgePersons Number of people 15 year old or older in the household VELandUse AssignCarSvcAvailability CarSvcLevel Level of car service availability for household. High means access is competitive with household owned car. Low is not competitive. 4.3.18.3 Module Outputs VehId: Unique vehicle ID VehicleAccess: Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) For more information see here Top 4.3.19 AssignVehicleAge This module assigns vehicle ages to each household vehicle. Vehicle age is assigned as a function of the vehicle type (auto or light truck), household income, and assumed mean vehicle age by vehicle type and Azone. Car service vehicles are assigned an age based on input assumptions with no distinction between vehicle type. 4.3.19.1 User Input Files Vehicles mean age for Azone (azone_hh_veh_mean_age.csv): This file provides inputs for mean auto age and mean light truck age in azone. AutoMeanAge: Mean age of automobiles owned or leased by households. LtTrkMeanAge: Mean age of light trucks owned or leased by households. Here is a snapshot of the file: Car service characteristics for Azone (azone_carsvc_characteristics.csv): This file specifies the different characteristics for high and low car service levels AveCarSvcVehicleAge: Average age of car service vehicles in years Here is a snapshot of the file: 4.3.19.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VESimHouseholds PredictIncome Income Total annual income of household VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) 4.3.19.3 Module Outputs Type: Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) Age: Vehicle age in years For more information see here Top 4.3.20 CalculateVehicleOwnCost This module calculates average vehicle ownership cost for each vehicle based on the vehicle type and age using data from the American Automobile Association (AAA). To this are added the cost of parking at the vehicle residence if free parking is not available for all household vehicles. The ownership cost is converted into an average ownership cost per mile by predicting the household DVMT, given the number of owned vehicles and splitting the miles equally among each vehicle. #### User Input Files 1. Vehicle ownership taxes for Azone (azone_hh_veh_own_taxes.csv): This file provides inputs for flat fees/taxes (i.e.Â annual cost per vehicle) and ad valorem taxes (i.e.Â percentage of vehicle value paid in taxes). * VehOwnFlatRateFee: Annual flat rate tax per vehicle in dollars * VehOwnAdValoremTax: Annual proportion of vehicle value paid in taxes Here is a snapshot of the file: Proportion of pay-as-you-drive (PAYD) insurance users for Azone (azone_payd_insurance_prop.csv): This file provides inputs on the proportion of households having PAYD insurance. PaydHhProp: Proportion of households in the Azone who have pay-as-you-drive insurance for their vehicles Here is a snapshot of the file: 4.3.20.1 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleAge Age Vehicle age in years VELandUse AssignParkingRestrictions FreeParkingSpaces Number of free parking spaces available to the household VELandUse AssignParkingRestrictions ParkingUnitCost Daily cost for long-term parking (e.g.Â paid on monthly basis) VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VEHouseholdVehicles AssignDrivers Drv15to19 Number of drivers 15 to 19 years old VEHouseholdVehicles AssignDrivers Drv20to29 Number of drivers 20 to 29 years old VEHouseholdVehicles AssignDrivers Drv30to54 Number of drivers 30 to 54 years old VEHouseholdVehicles AssignDrivers Drv55to64 Number of drivers 55 to 64 years old VEHouseholdVehicles AssignDrivers Drv65Plus Number of drivers 65 and older VESimHouseholds PredictIncome Income Total annual income of household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household 4.3.20.2 Module Outputs OwnCost: Annual cost of vehicle ownership including depreciation, financing, insurance, taxes, and residential parking in dollars OwnCostPerMile: Annual cost of vehicle ownership per mile of vehicle travel (dollars per mile) InsCost: Annual vehicle insurance cost in dollars HasPaydIns: Identifies whether household has pay-as-you-drive insurance for vehicles: 1 = Yes, 0 = no For more information see here Top 4.3.21 AdjustVehicleOwnership This module adjusts household vehicle ownership based on a comparison of the cost of owning a vehicle per mile of travel compared to the cost per mile of using a car service in locations where the level of car service quality is high. The determination of whether car services are substituted for ownership also depends on input assumptions regarding the average likelihood that an owner would substitute car services for a household vehicle. 4.3.21.1 User Input Files Car service characteristics for Azone (azone_carsvc_characteristics.csv): This file specifies the different characteristics for high and low car service levels HighCarSvcCost: Average cost in dollars per mile for travel by high service level car service LowCarSvcCost: Average cost in dollars per mile for travel by low service level car service AveCarSvcVehicleAge: Average age of car service vehicles in years LtTrkCarSvcSubProp: The proportion of light-truck owners who would substitute a less-costly car service option for owning their light truck AutoCarSvcSubProp: The proportion of automobile owners who would substitute a less-costly car service option for owning their automobile Here is a snapshot of the file: 4.3.21.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household VELandUse AssignCarSvcAvailability CarSvcLevel Level of car service availability for household. High means access is competitive with household owned car. Low is not competitive. VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleAge Age Vehicle age in years ouseholdVehicles CalculateVehicleOwnCost OwnCost Annual cost of vehicle ownership including depreciation, financing, insurance, taxes, and residential parking in dollars VEHouseholdVehicles CalculateVehicleOwnCost OwnCostPerMile Annual cost of vehicle ownership per mile of vehicle travel (dollars per mile) VEHouseholdVehicles CalculateVehicleOwnCost InsCost Annual vehicle insurance cost in dollars 4.3.21.3 Module Outputs VehicleAccess: Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) OwnCost: Annual cost of vehicle ownership per mile of vehicle travel (dollars per mile) OwnCostPerMile:Annual cost of vehicle ownership per mile of vehicle travel (dollars per mile) InsCost: Annual vehicle insurance cost in dollars SwitchToCarSvc: Identifies whether a vehicle was switched from owned to car service OwnCostSavings: Annual vehicle ownership cost (depreciation, finance, insurance, taxes) savings in dollars resulting from substituting the use of car services for a household vehicle OwnCost:Annual household vehicle ownership cost (depreciation, finance, insurance, taxes) savings in dollars Vehicles:Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons NumLtTrk:Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household NumAuto:Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household NumHighCarSvc:Number of high level service car service vehicles available to the household (difference between number of vehicles owned by the household and number of driving age persons for households having availability of high level car services For more information see here Top 4.3.22 CalculateHouseholdDvmt This module models household average daily vehicle miles traveled as a function of household characteristics, vehicle ownership, and attributes of the neighborhood and metropolitan area where the household resides. #### User Input Files This module has no user input requirements. 4.3.22.1 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService TranRevMiPC Ratio of annual bus-equivalent revenue-miles (i.e.Â revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population VETransportSupply AssignRoadMiles FwyLaneMiPC Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e., developable) land in zone VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VESimHouseholds PredictWorkers Workers Total workers in the household VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VESimHouseholds PredictIncome Income Total annual income of household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood 4.3.22.2 Module Outputs Dvmt: Average daily vehicle miles traveled by the household in autos or light trucks UrbanHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the urbanized portion of the Marea TownHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in town (urban but not urbanized) portion of the Marea RuralHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the rural (non-urban) portion of the Marea For more information see here Top 4.3.23 CalculateAltModeTrips This module calculates household transit trips, walk trips, and bike trips. The models are sensitive to household DVMT so they are run after all household DVMT adjustments (e.g.Â to account for cost on household DVMT) are made. #### User Input Files This module has no user input requirements. 4.3.23.1 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService TranRevMiPC Ratio of annual bus-equivalent revenue-miles (i.e.Â revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VESimHouseholds PredictIncome Income Total annual income of household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks 4.3.23.2 Module Outputs WalkTrips: Average number of walk trips per year by household members BikeTrips: Average number of bicycle trips per year by household members TransitTrips:Average number of public transit trips per year by household members For more information see here Top 4.3.24 CalculateVehicleTrips This module calculates average daily vehicle trips for households consistent with the household DVMT. An average trip length model is applied to estimate average length of household trips reflecting the characteristics of the household and the place where they live. The average trip length is divided into the average household DVMT to get an estimate of average number of daily vehicle trips. #### User Input Files This module has no user input requirements. 4.3.24.1 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignRoadMiles FwyLaneMiPC Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VESimHouseholds PredictIncome Income Total annual income of household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks 4.3.24.2 Module Outputs VehicleTrips: Average number of vehicle trips per day by household members AveVehTripLen: Average household vehicle trip length in miles For more information see here Top 4.3.25 DivertSovTravel This module reduces household single-occupant vehicle (SOV) travel to achieve goals that are inputs to the model. The purpose of this module is to enable users to do what if analysis of the potential of light-weight vehicles (e.g.Â bicycles, electric bikes, electric scooters) and infrastructure to support their use to reduce SOV travel. Note: SOV DVMT reduction is only applied to households in urban and town location types (LocTypes) because it is unlikely that actions/services could be provided in rural areas that could significantly divert SOV DVMT to bicycles, electric bicycles, scooters or other similar modes. 4.3.25.1 User Input Files Proportion of diverted SOVs for Azone (azone_prop_sov_dvmt_diverted.csv): This file provides inputs for a goal for diverting a portion of SOV travel within a 20-mile tour distance (round trip distance). PropSovDvmtDiverted: Goals for the proportion of household DVMT in single occupant vehicle tours with round-trip distances of 20 miles or less be diverted to bicycling or other slow speed modes of travel Here is a snapshot of the file: 4.3.25.2 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignRoadMiles FwyLaneMiPC Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VESimHouseholds PredictIncome Income Total annual income of household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VELandUse PredictHousing HouseType Type of dwelling unit of the household 4.3.25.3 Module Outputs PropDvmtDiverted: Proportion of household DVMT diverted to bicycling, electric bikes, or other low-speed travel modes AveTrpLenDiverted: Average length in miles of vehicle trips diverted to bicycling, electric bikes, or other low-speed travel modes For more information see here Top 4.3.26 Initialize-vepowertrainsandfuels This module processes vehicle and fuel characteristics files that model users may optionally supply. When these files are supplied, modules in the package that compute carbon intensities of vehicle travel will use the user-supplied data instead of the datasets that are part of the package (see the LoadDefaultValues.R script). User Input Files Carbon Intensity of Electricity (azone_electricity_carbon_intensity.csv) This input file specifies the carbon intensity of electricity by Azone. This input file is OPTIONAL and is only needed if the user wants to modify the carbon intensity of electricity. ElectricityCI: Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) Here is a snapshot of the file: Geo Year ElectricityCI RVMPO 2010 153 RVMPO 2038 23 Average fuel carbon intensity of transit for Marea (marea_transit_ave_fuel_carbon_intensity.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the average carbon intensity of fuel used by transit. TransitVanFuelCI: Average carbon intensity of fuel used by transit vans (grams CO2e per megajoule) TransitBusFuelCI: Average carbon intensity of fuel used by transit buses (grams CO2e per megajoule) TransitRailFuelCI: Average carbon intensity of fuel used by transit rail vehicles (grams CO2e per megajoule) Here is a snapshot of the file: Biofuels proportions of transit fuels by Marea (marea_transit_biofuel_mix.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the biofuel used by transit services. TransitEthanolPropGasoline: Ethanol proportion of gasoline used by transit vehicles TransitBiodieselPropDiesel: Biodiesel proportion of diesel used by transit vehicles TransitRngPropCng: Renewable natural gas proportion of compressed natural gas used by transit vehicles Here is a snapshot of the file: Transit fuels proportions by transit vehicle type and Marea (marea_transit_fuel.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the transit fuels proportions. VanPropDiesel: Proportion of non-electric transit van travel powered by diesel VanPropGasoline: Proportion of non-electric transit van travel powered by gasoline VanPropCng: Proportion of non-electric transit van travel powered by compressed natural gas BusPropDiesel: Proportion of non-electric transit bus travel powered by diesel BusPropGasoline: Proportion of non-electric transit bus travel powered by gasoline BusPropCng: Proportion of non-electric transit bus travel powered by compressed natural gas RailPropDiesel: Proportion of non-electric transit rail travel powered by diesel RailPropGasoline: Proportion of non-electric transit rail travel powered by gasoline Here is a snapshot of the file: Transit powertrain proportions by transit vehicle type and Marea (marea_transit_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the mixes of transit vehicle powertrains. VanPropIcev: Proportion of transit van travel using internal combustion engine powertrains VanPropHev: Proportion of transit van travel using hybrid electric powertrains VanPropBev: Proportion of transit van travel using battery electric powertrains BusPropIcev: Proportion of transit bus travel using internal combustion engine powertrains BusPropHev: Proportion of transit bus travel using hybrid electric powertrains BusPropBev: Proportion of transit bus travel using battery electric powertrains RailPropIcev: Proportion of transit rail travel using internal combustion engine powertrains RailPropHev: Proportion of transit rail travel using hybrid electric powertrains RailPropEv: Proportion of transit rail travel using electric powertrains Here is a snapshot of the file: Average carbon intensities of fuels by vehicle category for the model region (region_ave_fuel_carbon_intensity.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the average carbon density for different vehicle types. HhFuelCI: Average carbon intensity of fuels used by household vehicles (grams CO2e per megajoule) CarSvcFuelCI: Average carbon intensity of fuels used by car service vehicles (grams CO2e per megajoule) ComSvcFuelCI: Average carbon intensity of fuels used by commercial service vehicles (grams CO2e per megajoule) HvyTrkFuelCI: Average carbon intensity of fuels used by heavy trucks (grams CO2e per megajoule) TransitVanFuelCI: Average carbon intensity of fuels used by transit vans (grams CO2e per megajoule) TransitBusFuelCI: Average carbon intensity of fuels used by transit buses (grams CO2e per megajoule) TransitRailFuelCI: Average carbon intensity of fuels used by transit rail vehicles (grams CO2e per megajoule) Here is a snapshot of the file: Car service vehicle powertrain proportions by vehicle type for the model region (region_carsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of car services. CarSvcAutoPropIcev: Proportion of car service automobile travel powered by internal combustion engine powertrains CarSvcAutoPropHev: Proportion of car service automobile travel powered by hybrid electric powertrains CarSvcAutoPropBev: Proportion of car service automobile travel powered by battery electric powertrains CarSvcLtTrkPropIcev: Proportion of car service light truck travel powered by internal combustion engine powertrains CarSvcLtTrkPropHev: Proportion of car service light truck travel powered by hybrid electric powertrains CarSvcLtTrkPropBev: Proportion of car service light truck travel powered by battery electric powertrains Here is a snapshot of the file: Commercial service vehicle powertrain proportions by vehicle type (region_comsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of commercial vehicles. ComSvcAutoPropIcev: Proportion of commercial service automobile travel powered by internal combustion engine powertrains ComSvcAutoPropHev: Proportion of commercial service automobile travel powered by hybrid electric powertrains ComSvcAutoPropBev: Proportion of commercial service automobile travel powered by battery electric powertrains ComSvcLtTrkPropIcev: Proportion of commercial service light truck travel powered by internal combustion engine powertrains ComSvcLtTrkPropHev: Proportion of commercial service light truck travel powered by hybrid electric powertrains ComSvcLtTrkPropBev: Proportion of commercial service light truck travel powered by battery electric powertrainss Here is a snapshot of the file: Heavy duty truck powertrain proportions (region_hvytrk_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of heavy duty trucks. HvyTrkPropIcev: Proportion of heavy truck travel powered by internal combustion engine powertrains HvyTrkPropHev: Proportion of heavy truck travel powered by hybrid electric powertrains HvyTrkPropBev: Proportion of heavy truck travel powered by battery electric powertrains Here is a snapshot of the file: 4.3.26.1 Internal Module Inputs This module uses no datasets that are in the datastore. 4.3.26.2 Module Outputs This module produces no datasets to store in the datastore. For more information see here Top 4.3.27 CalculateCarbonIntensity This module calculates the average carbon intensity of fuels (grams CO2e per megajoule) by transportation mode and vehicle type. The transportation modes and vehicle types are: Mode Vehicle Types Household automobile, light truck Car Service automobile, light truck Commercial Service automobile, light truck Heavy Truck heavy truck Public Transit van, bus, rail Average fuel carbon intensities for public transit vehicles are calculated by Marea. The average fuel carbon intensities for the other mode vehicles are calculated for the entire model region. The module also calculates the average carbon intensity of electricity at the Azone level. Note that this module uses the user input files only if the user runs Initialize module. Otherwise the module uses default inputs in the instfolder. 4.3.27.1 User Input Files Carbon intensity of electricity for Azone (azone_electricity_carbon_intensity.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the carbon intensity of electricity. ElectricityCI: Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) Here is a snapshot of the file: Biofuels proportions of transit fuels by Marea (marea_transit_biofuel_mix.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the biofuel used by transit services. TransitEthanolPropGasoline: Ethanol proportion of gasoline used by transit vehicles TransitBiodieselPropDiesel: Biodiesel proportion of diesel used by transit vehicles TransitRngPropCng: Renewable natural gas proportion of compressed natural gas used by transit vehicles Here is a snapshot of the file: Transit fuels proportions by transit vehicle type and Marea (marea_transit_fuel.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the transit fuels proportions. VanPropDiesel: Proportion of non-electric transit van travel powered by diesel VanPropGasoline: Proportion of non-electric transit van travel powered by gasoline VanPropCng: Proportion of non-electric transit van travel powered by compressed natural gas BusPropDiesel: Proportion of non-electric transit bus travel powered by diesel BusPropGasoline: Proportion of non-electric transit bus travel powered by gasoline BusPropCng: Proportion of non-electric transit bus travel powered by compressed natural gas RailPropDiesel: Proportion of non-electric transit rail travel powered by diesel RailPropGasoline: Proportion of non-electric transit rail travel powered by gasoline Here is a snapshot of the file: Average carbon intensities of fuels by vehicle category for the model region (region_ave_fuel_carbon_intensity.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the average carbon density for different vehicle types. HhFuelCI: Average carbon intensity of fuels used by household vehicles (grams CO2e per megajoule) CarSvcFuelCI: Average carbon intensity of fuels used by car service vehicles (grams CO2e per megajoule) ComSvcFuelCI: Average carbon intensity of fuels used by commercial service vehicles (grams CO2e per megajoule) HvyTrkFuelCI: Average carbon intensity of fuels used by heavy trucks (grams CO2e per megajoule) TransitVanFuelCI: Average carbon intensity of fuels used by transit vans (grams CO2e per megajoule) TransitBusFuelCI: Average carbon intensity of fuels used by transit buses (grams CO2e per megajoule) TransitRailFuelCI: Average carbon intensity of fuels used by transit rail vehicles (grams CO2e per megajoule) Here is a snapshot of the file: 4.3.27.2 Internal Module Inputs This module does not have any internal module inputs 4.3.27.3 Module Outputs ElectricityCI: Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) HhAutoFuelCI: Average carbon intensity of fuels used by household automobiles (grams CO2e per megajoule) HhLtTrkFuelCI: Average carbon intensity of fuels used by household light trucks (grams CO2e per megajoule) CarSvcAutoFuelCI: Average carbon intensity of fuels used by car service automobiles (grams CO2e per megajoule) CarSvcLtTrkFuelCI: Average carbon intensity of fuels used by car service light trucks (grams CO2e per megajoule) ComSvcAutoFuelCI: Average carbon intensity of fuels used by commercial service automobiles (grams CO2e per megajoule) ComSvcLtTrkFuelCI: Average carbon intensity of fuels used by commercial service light trucks (grams CO2e per megajoule) HvyTrkFuelCI: Average carbon intensity of fuels used by heavy trucks (grams CO2e per megajoule) TransitVanFuelCI: Average carbon intensity of fuel used by transit vans (grams CO2e per megajoule) TransitBusFuelCI: Average carbon intensity of fuel used by transit buses (grams CO2e per megajoule) TransitRailFuelCI: Average carbon intensity of fuel used by transit rail vehicles (grams CO2e per megajoule) For more information see here Top 4.3.28 AssignHhVehiclePowertrain This module assigns a powertrain type to each household vehicle. The powertrain types are internal combustion engine vehicle (ICEV), hybrid electric vehicle (HEV), plug-in hybrid electric vehicle (PHEV), and battery electric vehicles (BEV). The module also assigns related characteristics to household vehicles including: Battery range (for PHEV and BEV) Miles per gallon (MPG) and gallons per mile (GPM) Miles per kilowatt-hour (MPKWH) and kilowatt-hours per mile (KWHPM) Miles per gasoline gallon equivalent (MPGe) The proportion of DVMT powered by electricity Carbon dioxide equivalent emissions per mile powered by hydrocarbon fuel Carbon dioxide equivalent emissions per mile powered by electricity 4.3.28.1 User Input Files Charging availability (azone_charging_availability.csv) This input file supplies data on proportion of different household types with plug-in electric vehicle (PEV) charging available by Azone. - PropSFChargingAvail: Proportion of single-family dwellings in Azone that have PEV charging facilities installed or able to be installed - PropMFChargingAvail: Proportion of multifamily dwelling units in Azone that have PEV charging facilities available - PropGQChargingAvail: Proportion of group quarters dwelling units in Azone that have PEV charging facilities available Car service vehicle powertrain proportions by vehicle type for the model region (region_carsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of car services. CarSvcAutoPropIcev: Proportion of car service automobile travel powered by internal combustion engine powertrains CarSvcAutoPropHev: Proportion of car service automobile travel powered by hybrid electric powertrains CarSvcAutoPropBev: Proportion of car service automobile travel powered by battery electric powertrains CarSvcLtTrkPropIcev: Proportion of car service light truck travel powered by internal combustion engine powertrains CarSvcLtTrkPropHev: Proportion of car service light truck travel powered by hybrid electric powertrains CarSvcLtTrkPropBev: Proportion of car service light truck travel powered by battery electric powertrains Here is a snapshot of the file: 4.3.28.2 Internal Module Inputs Package Module Outputs Description VEPowertrainsAndFuels CalculateCarbonIntensity ElectricityCI Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity HhAutoFuelCI Average carbon intensity of fuels used by household automobiles (grams CO2e per megajoule)) VEPowertrainsAndFuels CalculateCarbonIntensity HhLtTrkFuelCI Average carbon intensity of fuels used by household light trucks (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity CarSvcAutoFuelCI Average carbon intensity of fuels used by car service automobiles (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity CarSvcLtTrkFuelCI Average carbon intensity of fuels used by car service light trucks (grams CO2e per megajoule) ESimHouseholds CreateHouseholds HhId Household id VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VELandUse PredictHousing HouseType Type of dwelling unit of the household VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleAge Age Vehicle age in years VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) 4.3.28.3 Module Outputs Powertrain: Vehicle powertrain type: ICEV = internal combustion engine vehicle, HEV = hybrid electric vehicle, PHEV = plug-in hybrid electric vehicle, BEV = battery electric vehicle, NA = not applicable because is a car service vehicle BatRng: Miles of travel possible on fully charged battery MPG: Average miles of vehicle travel powered by fuel per gasoline equivalent gallon GPM: Average gasoline equivalent gallons per mile of vehicle travel powered by fuel MPKWH: Average miles of vehicle travel powered by electricity per kilowatt-hour KWHPM: Average kilowatt-hours per mile of vehicle travel powered by electricity MPGe: Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) ElecDvmtProp: Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) FuelCO2ePM: Average grams of carbon-dioxide equivalents produced per mile of travel powered by fuel ElecCO2ePM: Average grams of carbon-dioxide equivalents produced per mile of travel powered by electricity For more information see here Top 4.3.29 Initialize-vetravelperformance This module reads and processes roadway DVMT and operations inputs. The following input files are optional. If these data are not provided, the model calculates values based on default data included with the package and processed by the LoadDefaultRoadDvmtValues.R script. 4.3.29.1 User Input Files Base year highway truck dvmt for region (region_base_year_hvytrk_dvmt.csv): This input file is OPTIONAL. It is only needed if the user wants to adjust heavy truck dvmt for base year HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value HvyTrkDvmt: Average daily vehicle miles of travel on roadways in the region by heavy trucks during he base year HvyTrkDvmtUrbanProp: Proportion of Region heavy truck daily vehicle miles of travel occurring on urbanized area roadways Here is a snapshot of the file: Base year dvmt for Marea (marea_base_year_dvmt.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the adjust dvmt growth factors from base year in by Marea ComSvcDvmtGrowthBasis: Factor used to grow commercial service vehicle DVMT in Marea from base year value HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value UrbanLdvDvmt: Average daily vehicle miles of travel on roadways in the urbanized portion of the Marea by light-duty vehicles during the base year UrbanHvyTrkDvmt: Average daily vehicle miles of travel on roadways in the urbanized portion of the Marea by heavy trucks during he base year Here is a snapshot of the file: DVMT split by road class by Marea (marea_dvmt_split_by_road_class.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the dvmt split for different road classes. LdvFwyArtDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways Here is a snapshot of the file: Operations deployment effects on dvmt for Marea (marea_operations_deployment.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the proportion of dvmt affected by operations for different road classes. RampMeterDeployProp: Proportion of freeway DVMT affected by ramp metering deployment IncidentMgtDeployProp: Proportion of freeway DVMT affected by incident management deployment SignalCoordDeployProp: Proportion of arterial DVMT affected by signal coordination deployment AccessMgtDeployProp: Proportion of arterial DVMT affected by access management deployment OtherFwyOpsDeployProp: Proportion of freeway DVMT affected by deployment of other user-defined freeway operations measures OtherArtOpsDeployProp: Proportion of arterial DVMT affected by deployment of other user-defined arterial operations measures Here is a snapshot of the file: Other operations effects (other_ops_effectiveness.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the other delay effects of operations in different road classes Level: Congestion levels: None = none, Mod = moderate, Hvy = heavy, Sev = severe, Ext = extreme Art_Rcr: Percentage reduction of recurring arterial delay that would occur with full deployment of other user-defined arterial operations measures Art_NonRcr: Percentage reduction of non-recurring arterial delay that would occur with full deployment of other user-defined arterial operations measures Fwy_Rcr: Percentage reduction of recurring freeway delay that would occur with full deployment of other user-defined freeway operations measures Fwy_NonRcr: Percentage reduction of non-recurring freeway delay that would occur with full deployment of other user-defined freeway operations measures Here is a snapshot of the file: Charges by congestion levels by road class for Marea (marea_congestion_charges.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the charges of vehicle travel for different congestion levels FwyNoneCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of no congestion FwyModCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of moderate congestion FwyHvyCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of heavy congestion FwySevCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of severe congestion FwyExtCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of extreme congestion ArtNoneCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of no congestion ArtModCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of moderate congestion ArtHvyCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of heavy congestion ArtSevCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of severe congestion ArtExtCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of extreme congestion Here is a snapshot of the file: 4.3.29.2 Internal Module Inputs This module uses no datasets that are in the datastore. 4.3.29.3 Module Outputs This module produces no datasets to store in the datastore. Top 4.3.30 CalculateBaseRoadDvmt This module calculates base year roadway DVMT by vehicle type (light-duty, heavy truck, bus) and the distribution of roadway DVMT by vehicle type to roadway classes (freeway, arterial, other) This module uses optional user inputs if Initialize module is run. Otherwise, it uses default data in instfolder 4.3.30.1 User Input Files Base year highway truck dvmt for region (region_base_year_hvytrk_dvmt.csv): This input file is OPTIONAL. It is only needed if the user wants to adjust heavy truck dvmt for base year HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value HvyTrkDvmt: Average daily vehicle miles of travel on roadways in the region by heavy trucks during he base year HvyTrkDvmtUrbanProp: Proportion of Region heavy truck daily vehicle miles of travel occurring on urbanized area roadways Here is a snapshot of the file: Base year dvmt for Marea (*marea_base_year_dvmt.csv**): This input file is OPTIONAL. It is only needed if the user wants to modify the adjust dvmt growth factors from base year in by Marea ComSvcDvmtGrowthBasis: Factor used to grow commercial service vehicle DVMT in Marea from base year value HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value UrbanLdvDvmt: Average daily vehicle miles of travel on roadways in the urbanized portion of the Marea by light-duty vehicles during the base year UrbanHvyTrkDvmt: Average daily vehicle miles of travel on roadways in the urbanized portion of the Marea by heavy trucks during he base year Here is a snapshot of the file: DVMT split by road class by Marea (marea_dvmt_split_by_road_class.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the dvmt split for different road classes. LdvFwyArtDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways 4.3.30.2 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService VanDvmt Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services VETransportSupply AssignTransitService BusDvmt Total daily miles traveled by buses of various sizes to provide bus service of various types VETransportSupply AssignTransitService RailDvmt Total daily miles traveled by light rail, heavy rail, commuter rail, and similar types of vehicles VELandUse AssignLocTypes UrbanPop Urbanized area population VELandUse AssignLocTypes RuralPop Rural (i.e.Â non-urbanized area) population VELandUse AssignLocTypes RuralIncome Total household income of the rural (i.e.Â non-urbanized area) population VELandUse AssignLocTypes UrbanIncome Total household income of the rural (i.e.Â non-urbanized area) population VEHouseholdTravel CalculateHouseholdDvmt UrbanHhDvmt Average daily vehicle miles traveled in autos or light trucks by households residing in the urbanized portion of the Marea VEHouseholdTravel CalculateHouseholdDvmt RuralHhDvmt Average daily vehicle miles traveled in autos or light trucks by households residing in the rural (non-urban) portion of the Marea 4.3.30.3 Module Outputs HvyTrkDvmtUrbanProp: Proportion of Region heavy truck daily vehicle miles of travel occurring on urbanized area roadways HvyTrkDvmtIncomeFactor: Ratio of Region base year heavy truck DVMT to household income HvyTrkDvmtPopulationFactor: Ratio of Region base year heavy truck DVMT to population HvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles of travel in urbanized areas HvyTrkRuralDvmt: Base year Region heavy truck daily vehicle miles of travel in rural (i.e.Â non-urbanized) areas ComSvcDvmtHhDvmtFactor: Ratio of Marea base year commercial service DVMT to household DVMT ComSvcDvmtIncomeFactor: Ratio of base year commercial service vehicle DVMT to household income ComSvcDvmtPopulationFactor: Ratio of base year commercial service vehicle DVMT to population HvyTrkDvmtPopulationFactor: Ratio of base year heavy truck DVMT to population LdvRoadDvmtLdvDemandRatio: Ratio between light-duty vehicle (LDV) daily vehicle miles of travel (DVMT) on urbanized area roadways in the Marea to the total LDV DVMT of households residing in the urbanized area, the commercial service vehicle travel related to household demand, and LDV public transit DVMT. ComSvcUrbanDvmt: Commercial service daily vehicle miles of travel associated with Marea urbanized household activity ComSvcRuralDvmt: Commercial service daily vehicle miles of travel associated with Marea rural household activity LdvFwyArtDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways LdvFwyArtDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmt:Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways Top 4.3.31 CalculateFutureRoadDvmt This module calculates future year roadway DVMT by vehicle type (light-duty, heavy truck, bus) and the distribution of roadway DVMT by vehicle type to roadway classes (freeway, arterial, other) This module uses optional user inputs if Initialize module is run. Otherwise, it uses default data in instfolder 4.3.31.1 User Input Files Base year highway truck dvmt for region (region_base_year_hvytrk_dvmt.csv): This input file is OPTIONAL. It is only needed if the user wants to adjust heavy truck dvmt for base year HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value Base year dvmt for Marea (*marea_base_year_dvmt.csv**): This input file is OPTIONAL. It is only needed if the user wants to modify the adjust dvmt growth factors from base year in by Marea ComSvcDvmtGrowthBasis: Factor used to grow commercial service vehicle DVMT in Marea from base year value Here is a snapshot of the file: Here is a snapshot of the file: 4.3.31.2 Internal Module Inputs Package Module Outputs Description VETravelPerformance CalculateBaseRoadDvmt HvyTrkDvmtIncomeFactor Ratio of Region base year heavy truck DVMT to household income vetravelperformance CalculateBaseRoadDvmt HvyTrkDvmtUrbanProp proportion of region heavy truck daily vehicle miles of travel occurring on urbanized area roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkDvmtPopulationFactor Ratio of Region base year heavy truck DVMT to population VETravelPerformance CalculateBaseRoadDvmt LdvFwyArtDvmtProp Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways VETravelPerformance CalculateBaseRoadDvmt LdvOthDvmtProp Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkFwyDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt LdvOthDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt HvyTrkFwyDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkArtDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkOthDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateBaseRoadDvmt BusFwyDvmtProp Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt BusArtDvmtProp Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt BusOthDvmtProp Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways VETravelPerformance CalculateBaseRoadDvmt ComSvcDvmtHhDvmtFactor Ratio of Marea base year commercial service DVMT to household DVMT VETravelPerformance CalculateBaseRoadDvmt ComSvcDvmtIncomeFactor Ratio of base year commercial service vehicle DVMT to household income VELandUse CalculateBaseRoadDvmt ComSvcDvmtPopulationFactor Ratio of base year commercial service vehicle DVMT to population VELandUse CalculateBaseRoadDvmt HvyTrkDvmtPopulationFactor Ratio of base year heavy truck DVMT to population VELandUse CalculateBaseRoadDvmt LdvRoadDvmtLdvDemandRatio Ratio between light-duty vehicle (LDV) daily vehicle miles of travel (DVMT) on urbanized area roadways in the Marea to the total LDV DVMT of households residing in the urbanized area, the commercial service vehicle travel related to household demand, and LDV public transit DVMT VETransportSupply AssignTransitService VanDvmt Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services VETransportSupply AssignTransitService BusDvmt Total daily miles traveled by buses of various sizes to provide bus service of various types VELandUse AssignLocTypes UrbanPop Urbanized area population VELandUse AssignLocTypes RuralPop Rural (i.e.Â non-urbanized area) population VELandUse AssignLocTypes RuralIncome Total household income of the rural (i.e.Â non-urbanized area) population VELandUse AssignLocTypes UrbanIncome Total household income of the rural (i.e.Â non-urbanized area) population VEHouseholdTravel CalculateHouseholdDvmt UrbanHhDvmt Average daily vehicle miles traveled in autos or light trucks by households residing in the urbanized portion of the Marea VEHouseholdTravel CalculateHouseholdDvmt RuralHhDvmt Average daily vehicle miles traveled in autos or light trucks by households residing in the rural (non-urban) portion of the Marea 4.3.31.3 Module Outputs HvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles of travel in urbanized areas HvyTrkRuralDvmt: Base year Region heavy truck daily vehicle miles of travel in rural (i.e.Â non-urbanized) areas ComSvcUrbanDvmt: Commercial service daily vehicle miles of travel associated with Marea urbanized household activity ComSvcRuralDvmt: Commercial service daily vehicle miles of travel associated with Marea rural household activity LdvFwyArtDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmt:Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways Top 4.3.32 CalculateRoadPerformance This module splits light-duty vehicle (LDV) daily vehicle miles of travel DVHT between freeways and arterials as a function of relative speeds and congestion prices. Speeds and prices are combined to calculate an average effective speed for freeways and for arterials. The ratio of freeway and arterial effective speeds and a split factor calculated for the metropolitan area are used to split the LDV DVMT. Iteration is used to find an equilibrium split value. In addition to the LDV freeway DVMT and arterial DVMT, the following performance measures are saved to the datastore: Average freeway speed by congestion level; Average arterial speed by congestion level; Average freeway delay by congestion level; Average arterial delay by congestion level; Freeway DVMT proportions by congestion level; Arterial DVMT proportions by congestion level; Average amount paid per mile in congestion pricing fees; and, Vehicle hours of delay by vehicle type. 4.3.32.1 User Input Files Operations deployment effects on dvmt for Marea (marea_operations_deployment.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the proportion of dvmt affected by operations for different road classes. RampMeterDeployProp: Proportion of freeway DVMT affected by ramp metering deployment IncidentMgtDeployProp: Proportion of freeway DVMT affected by incident management deployment SignalCoordDeployProp: Proportion of arterial DVMT affected by signal coordination deployment AccessMgtDeployProp: Proportion of arterial DVMT affected by access management deployment OtherFwyOpsDeployProp: Proportion of freeway DVMT affected by deployment of other user-defined freeway operations measures OtherArtOpsDeployProp: Proportion of arterial DVMT affected by deployment of other user-defined arterial operations measures Here is a snapshot of the file: Other operations effects (other_ops_effectiveness.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the other delay effects of operations in different road classes Level: Congestion levels: None = none, Mod = moderate, Hvy = heavy, Sev = severe, Ext = extreme Art_Rcr: Percentage reduction of recurring arterial delay that would occur with full deployment of other user-defined arterial operations measures Art_NonRcr: Percentage reduction of non-recurring arterial delay that would occur with full deployment of other user-defined arterial operations measures Fwy_Rcr: Percentage reduction of recurring freeway delay that would occur with full deployment of other user-defined freeway operations measures Fwy_NonRcr: Percentage reduction of non-recurring freeway delay that would occur with full deployment of other user-defined freeway operations measures Here is a snapshot of the file: Charges by congestion levels by road class for Marea (marea_congestion_charges.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the charges of vehicle travel for different congestion levels FwyNoneCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of no congestion FwyModCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of moderate congestion FwyHvyCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of heavy congestion FwySevCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of severe congestion FwyExtCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of extreme congestion ArtNoneCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of no congestion ArtModCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of moderate congestion ArtHvyCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of heavy congestion ArtSevCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of severe congestion ArtExtCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of extreme congestion Here is a snapshot of the file: 4.3.32.2 User Input Parameters Value of time (valueoftime) : This parameter set the value of time (base cost year dollars per hour). It should be defined in model_parameters.json {&quot;NAME&quot;: &quot;ValueOfTime&quot;, &quot;VALUE&quot;: &quot;16&quot;, &quot;TYPE&quot;: &quot;double&quot;, &quot;UNITS&quot;: &quot;base cost year dollars per hour&quot; } 4.3.32.3 Internal Module Inputs Package Module Outputs Description VELandUse AssignLocTypes UrbanPop Urbanized area population VETransportSupply AssignRoadMiles FwyLaneMi Lane-miles of roadways functionally classified as freeways or expressways in the urbanized portion of the metropolitan area VETravelPerformance CalculateBaseRoadDvmt LdvFwyArtDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways VETravelPerformance CalculateBaseRoadDvmt LdvOthDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkFwyDvmt Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt HvyTrkArtDvmt Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkOthDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateBaseRoadDvmt BusFwyDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt BusArtDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt BusOthDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways VELandUse Calculate4DMeasures UrbanArea Area that is Urban and unprotected (i.e.Â developable) within the zone 4.3.32.4 Module Outputs LdvFwyDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways LdvArtDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways FwyNoneCongSpeed: Average freeway speed (miles per hour) when there is no congestion FwyModCongSpeed: Average freeway speed (miles per hour) when congestion is moderate FwyHvyCongSpeed: Average freeway speed (miles per hour) when congestion is heavy FwySevCongSpeed: Average freeway speed (miles per hour) when congestion is severe FwyExtCongSpeed: Average freeway speed (miles per hour) when congestion is extreme ArtNoneCongSpeed: Average arterial speed (miles per hour) when there is no congestion ArtModCongSpeed: Average arterial speed (miles per hour) when congestion is moderate ArtHvyCongSpeed: Average arterial speed (miles per hour) when congestion is heavy ArtSevCongSpeed: Average arterial speed (miles per hour) when congestion is severe ArtExtCongSpeed: Average arterial speed (miles per hour) when congestion is extreme OthSpd: Average speed (miles per hour) on other roadways AveLdvSpd: Average light-duty vehicle speed (miles per hour) on all roadways weighted by the proportions of light-duty vehicle travel FwyNoneCongDelay: Average freeway delay (hours per mile) occurring when there is no congestion FwyModCongDelay: Average freeway delay (hours per mile) occurring when congestion is moderate FwyHvyCongDelay: Average freeway delay (hours per mile) occurring when congestion is heavy FwySevCongDelay: Average freeway delay (hours per mile) occurring when congestion is severe FwyExtCongDelay: Average freeway delay (hours per mile) occurring when congestion is extreme ArtNoneCongDelay: Average arterial delay (hours per mile) occurring when there is no congestion ArtModCongDelay: Average arterial delay (hours per mile) occurring when congestion is moderate ArtHvyCongDelay: Average arterial delay (hours per mile) occurring when congestion is heavy ArtSevCongDelay: Average arterial delay (hours per mile) occurring when congestion is severe ArtExtCongDelay: Average arterial delay (hours per mile) occurring when congestion is extreme FwyDvmtPropNoneCong: Proportion of freeway DVMT occurring when there is no congestion FwyDvmtPropModCong: Proportion of freeway DVMT occurring when congestion is moderate FwyDvmtPropHvyCong: Proportion of freeway DVMT occurring when congestion is heavy FwyDvmtPropSevCong: Proportion of freeway DVMT occurring when congestion is severe FwyDvmtPropExtCong: Proportion of freeway DVMT occurring when congestion is extreme ArtDvmtPropNoneCong: Proportion of arterial DVMT occurring when there is no congestion ArtDvmtPropModCong: Proportion of arterial DVMT occurring when congestion is moderate ArtDvmtPropHvyCong: Proportion of arterial DVMT occurring when congestion is heavy ArtDvmtPropSevCong: Proportion of arterial DVMT occurring when congestion is severe ArtDvmtPropExtCong: Proportion of arterial DVMT occurring when congestion is extreme AveCongPrice: Average price paid (dollars per mile) in congestion fees For more information see here Top 4.3.33 CalculateMpgMpkwhAdjustments This module calculates adjustments to fuel economy and electric energy economy for plug-in vehicles) resulting from traffic congestion, speed smoothing(i.e.Â active traffic management which reduces speed variation), and ecodriving practices. 4.3.33.1 User Input Files Speed smoothing and ecodriving for Marea (marea_speed_smooth_ecodrive.csv): This input file supplies information of deployment of speed smoothing and ecodriving by road class and vehicle type FwySmooth:Fractional deployment of speed smoothing traffic management on freeways, where 0 is no deployment and 1 is the full potential fuel savings ArtSmooth: Fractional deployment of speed smoothing traffic management on arterials, where 0 is no deployment and 1 is the full potential fuel savings LdvEcoDrive: Eco-driving penetration for light-duty vehicles; the fraction of vehicles from 0 to 1 HvyTrkEcoDrive: Eco-driving penetration for heavy-duty vehicles; the fraction of vehicles from 0 to 1 Here is a snapshot of the file: 4.3.33.2 Internal Module Inputs Package Module Outputs Description VETravelPerformance CalculateRoadPerformance LdvFwyDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateRoadPerformance LdvArtDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt LdvOthDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkFwyDvmt Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt HvyTrkArtDvmt Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkOthDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateBaseRoadDvmt BusFwyDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt BusArtDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt BusOthDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways VETravelPerformance CalculateRoadPerformance FwyNoneCongSpeed Average freeway speed (miles per hour) when there is no congestion VETravelPerformance CalculateRoadPerformance FwyModCongSpeed Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateRoadPerformance FwyHvyCongSpeed Average freeway speed (miles per hour) when congestion is heavy VETravelPerformance CalculateRoadPerformance FwySevCongSpeed Average freeway speed (miles per hour) when congestion is severe VETravelPerformance CalculateRoadPerformance FwyExtCongSpeed Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateRoadPerformance BusFwyDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateRoadPerformance BusArtDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateRoadPerformance BusOthDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways VETravelPerformance CalculateRoadPerformance FwyDvmtPropNoneCong Proportion of freeway DVMT occurring when there is no congestion VETravelPerformance CalculateRoadPerformance FwyDvmtPropModCong Proportion of freeway DVMT occurring when congestion is moderate VETravelPerformance CalculateRoadPerformance FwyDvmtPropHvyCong Proportion of freeway DVMT occurring when congestion is heavy VETravelPerformance CalculateRoadPerformance FwyDvmtPropSevCong Proportion of freeway DVMT occurring when congestion is severe VETravelPerformance CalculateRoadPerformance FwyDvmtPropExtCong Proportion of freeway DVMT occurring when congestion is extreme VETravelPerformance CalculateRoadPerformance ArtDvmtPropNoneCong Proportion of arterial DVMT occurring when there is no congestion VETravelPerformance CalculateRoadPerformance ArtDvmtPropModCong Proportion of arterial DVMT occurring when congestion is moderate VETravelPerformance CalculateRoadPerformance ArtDvmtPropHvyCong Proportion of arterial DVMT occurring when congestion is heavy VETravelPerformance CalculateRoadPerformance ArtDvmtPropSevCong Proportion of arterial DVMT occurring when congestion is severe VETravelPerformance CalculateRoadPerformance ArtDvmtPropExtCong Proportion of arterial DVMT occurring when congestion is extereme 4.3.33.3 Module Outputs LdvSpdSmoothFactor: Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to speed smoothing HvyTrkSpdSmoothFactor: Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to speed smoothing BusSpdSmoothFactor: Proportional adjustment of bus internal combustion engine (ICE) vehicle MPG due to speed smoothing LdvEcoDriveFactor: Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to eco-driving HvyTrkEcoDriveFactor: Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to eco-driving BusEcoDriveFactor: Proportional adjustment of bus internal combustion engine (ICE) vehicle MPG due to eco-driving LdIceFactor: Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to congestion LdHevFactor: Proportional adjustment of light-duty hybrid-electric vehicle (HEV) MPG due to congestion LdEvFactor: Proportional adjustment of light-duty battery electric vehicle (EV) MPkWh due to congestion LdFcvFactor: Proportional adjustment of light-duty fuel cell vehicle (FCV) MPkWh due to congestion HdIceFactor: Proportional adjustment of heavy-duty internal combustion engine (ICE) vehicle MPG due to congestion Top 4.3.34 AdjustHhVehicleMpgMpkwh This module adjusts the fuel economy and power efficiency of household vehicles to reflect roadway congestion. #### User Input Files 1. Car service vehicle powertrain proportions by vehicle type for the model region (region_carsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of car services. CarSvcAutoPropIcev: Proportion of car service automobile travel powered by internal combustion engine powertrains CarSvcAutoPropHev: Proportion of car service automobile travel powered by hybrid electric powertrains CarSvcAutoPropBev: Proportion of car service automobile travel powered by battery electric powertrains CarSvcLtTrkPropIcev: Proportion of car service light truck travel powered by internal combustion engine powertrains CarSvcLtTrkPropHev: Proportion of car service light truck travel powered by hybrid electric powertrains CarSvcLtTrkPropBev: Proportion of car service light truck travel powered by battery electric powertrains Here is a snapshot of the file: 4.3.34.1 Internal Module Inputs Package Module Outputs Description VETravelPerformance CalculateMpgMpkwhAdjustments LdvEcoDrive Eco-driving penetration for light-duty vehicles; the fraction of vehicles from 0 to 1 VETravelPerformance CalculateMpgMpkwhAdjustments LdvSpdSmoothFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to speed smoothing VETravelPerformance CalculateMpgMpkwhAdjustments LdvEcoDriveFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to eco-driving VETravelPerformance CalculateMpgMpkwhAdjustments LdIceFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments LdHevFactor Proportional adjustment of light-duty hybrid-electric vehicle (HEV) MPG due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments LdFcvFactor Proportional adjustment of light-duty fuel cell vehicle (FCV) MPkWh due to congestion VESimHouseholds CreateHouseholds HhId Household id VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEPowertrainsAndFuels AssignHhVehiclePowertrain Powertrain Vehicle powertrain type: ICEV = internal combustion engine vehicle, HEV = hybrid electric vehicle, PHEV = plug-in hybrid electric vehicle, BEV = battery electric vehicle, NA = not applicable because is a car service vehicle VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) VEPowertrainsAndFuels AssignHhVehiclePowertrain MPG Average miles of vehicle travel powered by fuel per gasoline equivalent gallon VEPowertrainsAndFuels AssignHhVehiclePowertrain GPM Average gasoline equivalent gallons per mile of vehicle travel powered by fuel VEPowertrainsAndFuels AssignHhVehiclePowertrain MPKWH Average miles of vehicle travel powered by electricity per kilowatt-hour VEPowertrainsAndFuels AssignHhVehiclePowertrain KWHPM Average kilowatt-hours per mile of vehicle travel powered by electricity VEPowertrainsAndFuels AssignHhVehiclePowertrain MPGe Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) VEPowertrainsAndFuels AssignHhVehiclePowertrain ElecDvmtProp Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) VEPowertrainsAndFuels AssignHhVehiclePowertrain FuelCO2ePM Average grams of carbon-dioxide equivalents produced per mile of travel powered by fuel VEPowertrainsAndFuels AssignHhVehiclePowertrain ElecCO2ePM Average grams of carbon-dioxide equivalents produced per mile of travel powered by electricity 4.3.34.2 Module Outputs MPG: Average miles of vehicle travel powered by fuel per gasoline equivalent gallon GPM: Average gasoline equivalent gallons per mile of vehicle travel powered by fuel MPKWH: Average miles of vehicle travel powered by electricity per kilowatt-hour KWHPM: Average kilowatt-hours per mile of vehicle travel powered by electricity MPGe: Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) ElecDvmtProp: Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) FuelCO2ePM: Average grams of carbon-dioxide equivalents produced per mile of travel powered by fuel IsEcoDrive: Flag identifying whether drivers in household are eco-drivers Top 4.3.35 CalculateVehicleOperatingCost This module calculates vehicle operating costs per mile of travel and uses those costs to determine the proportional split of DVMT among household vehicles. The module also calculates the average out-of-pocket costs per mile of vehicle by household, as well as the cost of social and environmental impacts, and road use taxes per mile of vehicle travel. 4.3.35.1 User Input Files Vehicle access time for Azone (azone_vehicle_access_times.csv): This file supplies data for vehicle access and eagress time. OwnedVehAccessTime:Average amount of time in minutes required for access to and egress from a household-owned vehicle for a trip HighCarSvcAccessTime: Average amount of time in minutes required for access to and egress from a high service level car service for a trip LowCarSvcAccessTime: Average amount of time in minutes required for access to and egress from a low service level car service for a trip Here is a snapshot of the file: Fuel and Electricity Cost (azone_fuel_power_cost.csv) This file supplies data for retail cost of fuel and electricity by Azone. This input can be developed using local history or querying the Energy Information Administration (EIA) for historical gasoline and diesel and power prices. FuelCost:Retail cost of fuel per gas gallon equivalent in dollars (before taxes are added) PowerCost: Retail cost of electric power per kilowatt-hour in dollars (before taxes are added) Here is a snapshot of the file: Geo Year FuelCost.2005 PowerCost.2005 RVMPO 2010 2.43 0.08 RVMPO 2038 5.75 0.208 Vehicle taxes for Azone (azone_veh_use_taxes.csv): This file supplies data for vehicle related taxes FuelTax:Tax per gas gallon equivalent of fuel in dollars VmtTax: Tax per gas gallon equivalent of fuel in dollars PevSurchgTaxProp: Proportion of equivalent gas tax per mile paid by hydrocarbon fuel consuming vehicles to be charged to plug-in electric vehicles per mile of travel powered by electricity Here is a snapshot of the file: Proportional external costs for the ragion (region_prop_externalities_paid.csv): This file supplies data for climate change and other social costs. PropClimateCostPaid: Proportion of climate change costs paid by users (i.e.Â ratio of carbon taxes to climate change costs PropOtherExtCostPaid: Proportion of other social costs paid by users Here is a snapshot of the file: 4.3.35.2 User Input Parameters Value of time (valueoftime) : This parameter set the value of time (base cost year dollars per hour). It should be defined in model_parameters.json {&quot;NAME&quot;: &quot;ValueOfTime&quot;, &quot;VALUE&quot;: &quot;16&quot;, &quot;TYPE&quot;: &quot;double&quot;, &quot;UNITS&quot;: &quot;base cost year dollars per hour&quot; } 4.3.35.3 Internal Module Inputs Package Module Outputs Description VETravelPerformance CalculateRoadPerformance AveLdvSpd Average light-duty vehicle speed (miles per hour) on all roadways weighted by the proportions of light-duty vehicle travel VETravelPerformance CalculateRoadPerformance AveCongPrice Average price paid (dollars per mile) in congestion fees VEHouseholdVehicles CreateVehicleTable HighCarSvcCost Average cost in dollars per mile for travel by high service level car service VEHouseholdVehicles CreateVehicleTable LowCarSvcCost Average cost in dollars per mile for travel by low service level car service VESimHouseholds CreateHouseholds HhId Household id VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VESimHouseholds PredictIncome Income Total annual income of household VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks VEHouseholdVehicles CalculateVehicleOwnCost HasPaydIns Identifies whether household has pay-as-you-drive insurance for vehicles: 1 = Yes, 0 = no VEHouseholdTravel CalculateVehicleTrips VehicleTrips Average number of vehicle trips per day by household members VELandUse AssignParkingRestrictions OtherParkingCost Daily cost for parking at shopping locations or other locations of paid parking not including work VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleAge Age Vehicle age in years VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) VEPowertrainsAndFuels AssignHhVehiclePowertrain Powertrain Vehicle powertrain type: ICEV = internal combustion engine vehicle, HEV = hybrid electric vehicle, PHEV = plug-in hybrid electric vehicle, BEV = battery electric vehicle, NA = not applicable because is a car service vehicle VEPowertrainsAndFuels AssignHhVehiclePowertrain GPM Average gasoline equivalent gallons per mile of vehicle travel powered by fuel VEPowertrainsAndFuels AssignHhVehiclePowertrain KWHPM Average kilowatt-hours per mile of vehicle travel powered by electricity VEPowertrainsAndFuels AssignHhVehiclePowertrain ElecDvmtProp Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) VEPowertrainsAndFuels AssignHhVehiclePowertrain FuelCO2ePM Average grams of carbon-dioxide equivalents produced per mile of travel powered by fuel VEPowertrainsAndFuels AssignHhVehiclePowertrain ElecCO2ePM Average grams of carbon-dioxide equivalents produced per mile of travel powered by electricity VEHouseholdVehicles CalculateVehicleOwnCost InsCost Annual vehicle insurance cost in dollars VELandUse AssignParkingRestrictions ParkingCost Daily cost for long-term parking (e.g.Â paid on monthly basis) VELandUse AssignParkingRestrictions IsCashOut Is worker paid parking in cash-out-buy-back program: 1 = yes, 0 = no VELandUse AssignParkingRestrictions PaysForParking Does worker pay for parking: 1 = yes, 0 = no 4.3.35.4 Module Outputs AveVehCostPM: Average out-of-pocket cost in dollars per mile of vehicle travel AveSocEnvCostPM: Average cost in dollars of the social and environmental impacts per mile of vehicle travel AveRoadUseTaxPM: Average road use taxes in dollars collected per mile of vehicle travel DvmtProp: Proportion of household DVMT allocated to vehicle AveGPM: Average gasoline equivalent gallons per mile of household vehicle travel AveKWHPM: Average kilowatt-hours per mile of household vehicle travel AveCO2ePM: Average grams of carbon-dioxide equivalents produced per mile of household vehicle travel Top 4.3.36 BudgetHouseholdDvmt This module adjusts average household DVMT to keep the quantity within household operating cost limits. The limit for each household is calculated in several steps. First, the proportion of the households income that may be spent on vehicle operating costs is calculated using a model that is explained below. This is called the budget proportion. Then an adjusted household income for budget calculation purposes is calculated by adding the annual cost of insurance for households subscribing to payd-as-you-drive (PAYD) insurance, cash-out parking payments for workers who work at an employer that has cash-out-buy-back parking, and any vehicle ownership cost savings for households that substitute high level car service for one or more household vehicles. The adjusted household income is muliplied by the budget proportion and divided by the average vehicle operating cost per mile for the household to determine the maximum household DVMT that fits within the household budget. The household DVMT is then set at the lesser of this budget maximum or the modeled household DVMT. The budget proportion model is estimated using data from the Bureau of Labors consumer expenditure survey for the years from 2003 to 2015. The data used are the nominal dollar expenditures by household income category and year by transportation category. The values for the operating cost categories (gas and oil, and maintenance and repair) are summed and then divided by the midpoint value for each income category to calculate the budget proportion for each income group and each year. From this the mean value is computed for each income group. The budget proportions for each income group and year are divided by the mean values by income group to normalize values. The standard deviation for the combined normalized values is computed and value of 3 deviations above the mean is set as the maximum normalized value. The mean values by income group are multiplied by this normalized maximum to derive a budget proportion maximum by income group. A smoothed splines model of the budget proportion as a function of income is then estimated from the calculated budget proportion maximums. This model is used to calculate the budget proportion for a household based on the household income. The minimum and maximum values of the calculated budget proportion maximums are used as constraints to avoid unreasonable results for very low incomes and very high incomes. 4.3.36.1 User Input Files This module does not have user-supplied input files 4.3.36.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds CreateHouseholds HHSize Number of persons in the household VESimHouseholds PredictIncome Income Total annual income of household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VETravelPerformance CalculateVehicleOperatingCost AveVehCostPM Average out-of-pocket cost in dollars per mile of vehicle travel VEHouseholdVehicles AdjustVehicleOwnership OwnCostSavings Annual vehicle ownership cost (depreciation, finance, insurance, taxes) savings in dollars resulting from substituting the use of car services for a household vehicle VEHouseholdVehicles CalculateVehicleOwnCost HasPaydIns Identifies whether household has pay-as-you-drive insurance for vehicles: 1 = Yes, 0 = no VETravelPerformance CalculateVehicleOperatingCost AveGPM Average gasoline equivalent gallons per mile of household vehicle travel VETravelPerformance CalculateVehicleOperatingCost AveKWHPM Average kilowatt-hours per mile of household vehicle travel VETravelPerformance CalculateVehicleOperatingCost AveCO2ePM Average grams of carbon-dioxide equivalents produced per mile of household vehicle travel VELandUse AssignParkingRestrictions ParkingCost Daily cost for long-term parking (e.g.Â paid on monthly basis) VELandUse AssignParkingRestrictions IsCashOut Is worker paid parking in cash-out-buy-back program: 1 = yes, 0 = no VELandUse AssignParkingRestrictions PaysForParking Does worker pay for parking: 1 = yes, 0 = no VEHouseholdVehicles CalculateVehicleOwnCost InsCost Annual vehicle insurance cost in dollars 4.3.36.3 Module Outputs Dvmt: Average daily vehicle miles traveled by the household in autos or light trucks UrbanHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the urbanized portion of the Marea RuralHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the non-urbanized portion of the Marea DailyGGE: Gasoline equivalent gallons consumed per day by household vehicle travel DailyKWH: Kilowatt-hours consumed per day by household vehicle travel DailyCO2e: Grams of carbon-dioxide equivalents produced per day by household vehicle travel WalkTrips: Average number of walk trips per year by household members BikeTrips: Average number of bicycle trips per year by household members TransitTrips: Average number of public transit trips per year by household members VehicleTrips: Average number of vehicle trips per day by household members Top 4.3.37 CalculateComEnergyAndEmissions This module calculates the energy consumption and carbon emissions of heavy trucks and light-duty commercial service vehicles. It does not calculate the values for car service vehicles which are calculated as part of the household emissions. It also does not calculate public transit emissions which are calculated in the CalculateTransitEnergyAndEmissions module. #### User Input Files 1. Light trucks proportion for the region (region_comsvc_lttrk_prop.csv): This file supplies data for the light truck proportion og commercial vehicles ComSvcLtTrkProp: Regional proportion of commercial service vehicles that are light trucks Here is a snapshot of the file: Commercial service vehicle powertrain proportions by vehicle type (region_comsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of commercial vehicles. ComSvcAutoPropIcev: Proportion of commercial service automobile travel powered by internal combustion engine powertrains ComSvcAutoPropHev: Proportion of commercial service automobile travel powered by hybrid electric powertrains ComSvcAutoPropBev: Proportion of commercial service automobile travel powered by battery electric powertrains ComSvcLtTrkPropIcev: Proportion of commercial service light truck travel powered by internal combustion engine powertrains ComSvcLtTrkPropHev: Proportion of commercial service light truck travel powered by hybrid electric powertrains ComSvcLtTrkPropBev: Proportion of commercial service light truck travel powered by battery electric powertrainss Here is a snapshot of the file: Heavy duty truck powertrain proportions (region_hvytrk_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of heavy duty trucks. HvyTrkPropIcev: Proportion of heavy truck travel powered by internal combustion engine powertrains HvyTrkPropHev: Proportion of heavy truck travel powered by hybrid electric powertrains HvyTrkPropBev: Proportion of heavy truck travel powered by battery electric powertrains Here is a snapshot of the file: 4.3.37.1 Internal Module Inputs Package Module Outputs Description VEPowertrainsAndFuels CalculateCarbonIntensity ElectricityCI Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity HhAutoFuelCI Average carbon intensity of fuels used by household automobiles (grams CO2e per megajoule)) VEPowertrainsAndFuels CalculateCarbonIntensity HhLtTrkFuelCI Average carbon intensity of fuels used by household light trucks (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity HvyTrkFuelCI Average carbon intensity of fuels used by heavy trucks (grams CO2e per megajoule) VETravelPerformance CalculateMpgMpkwhAdjustments LdvEcoDrive Eco-driving penetration for light-duty vehicles; the fraction of vehicles from 0 to 1 VETravelPerformance CalculateMpgMpkwhAdjustments HvyTrkEcoDrive Eco-driving penetration for heavy-duty vehicles; the fraction of vehicles from 0 to 1 VETravelPerformance CalculateMpgMpkwhAdjustments LdvSpdSmoothFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to speed smoothing VETravelPerformance CalculateMpgMpkwhAdjustments LdvEcoDriveFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to eco-driving VETravelPerformance CalculateMpgMpkwhAdjustments HvyTrkSpdSmoothFactor Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to speed smoothing VETravelPerformance CalculateMpgMpkwhAdjustments LdIceFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments LdHevFactor Proportional adjustment of light-duty hybrid-electric vehicle (HEV) MPG due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments HvyTrkEcoDriveFactor Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to eco-driving VETravelPerformance CalculateMpgMpkwhAdjustments LdEvFactor Proportional adjustment of light-duty battery electric vehicle (EV) MPkWh due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments HdIceFactor Proportional adjustment of heavy-duty internal combustion engine (ICE) vehicle MPG due to congestion VETravelPerformance CalculateBaseRoadDvmt HvyTrkUrbanDvmt Base year Region heavy truck daily vehicle miles of travel in urbanized areas VETravelPerformance CalculateBaseRoadDvmt HvyTrkRuralDvmt Base year Region heavy truck daily vehicle miles of travel in rural (i.e.Â non-urbanized) areas VETravelPerformance CalculateBaseRoadDvmt ComSvcUrbanDvmt Commercial service daily vehicle miles of travel associated with Marea urbanized household activity VETravelPerformance CalculateBaseRoadDvmt ComSvcRuralDvmt Commercial service daily vehicle miles of travel associated with Marea rural household activity 4.3.37.2 Module Outputs ComSvcUrbanGGE: Average daily amount of hydrocarbon fuels consumed by commercial service vehicles associated with urban household activity in gas gallon equivalents ComSvcRuralGGE: Average daily amount of hydrocarbon fuels consumed by commercial service vehicles associated with rural household activity in gas gallon equivalents HvyTrkUrbanGGE: Average daily amount of hydrocarbon fuels consumed by heavy trucks on urbanized area roadways in the Marea in gas gallon equivalents ComSvcUrbanKWH: Average daily amount of electricity consumed by commercial service vehicles associated with urban household activity in kilowatt-hours ComSvcRuralKWH: Average daily amount of electricity consumed by commercial service vehicles associated with rural household activity in kilowatt-hours ComSvcUrbanCO2e: Average daily amount of carbon-dioxide equivalents produced by commercial service vehicles associated with urban household activity in grams ComSvcRuralCO2e: Average daily amount of carbon-dioxide equivalents produced by commercial service vehicles associated with rural household activity in grams HvyTrkUrbanCO2e: Average daily amount of carbon-dioxide equivalents produced by heavy trucks on urbanized area roadways in the Marea in grams ComSvcAveUrbanAutoCO2eRate: Average amount of carbon-dioxide equivalents produced by commercial service automobiles per mile of travel on urbanized area roadways in grams per mile ComSvcAveUrbanLtTrkCO2eRate: Average amount of carbon-dioxide equivalents produced by commercial service light trucks per mile of travel on urbanized area roadways in grams per mile HvyTrkAveUrbanCO2eRate: Average amount of carbon-dioxide equivalents produced by heavy trucks per mile of travel on urbanized area roadways in grams per mile HvyTrkRuralGGE: Average daily amount of hydrocarbon fuels consumed by heavy trucks on rural roadways in the Region in gas gallon equivalents HvyTrkUrbanGGE: Average daily amount of hydrocarbon fuels consumed by heavy trucks on urbanized area roadways in the Region in gas gallon equivalents HvyTrkRuralKWH: Average daily amount of electricity consumed by heavy trucks on rural roadways in the Region in kilowatt-hours HvyTrkUrbanKWH: Average daily amount of electricity consumed by heavy trucks on urbanized area roadways in the Region in kilowatt-hours HvyTrkRuralCO2e: Average daily amount of carbon-dioxide equivalents produced by heavy trucks on rural roadways in the Region in grams HvyTrkUrbanCO2e: Average daily amount of carbon-dioxide equivalents produced by heavy trucks on urbanized area roadways in the Region in grams Top 4.3.38 CalculatePtranEnergyAndEmissions This module calculates the energy consumption and carbon emissions of public transit vehicle emissions in urbanized areas. 4.3.38.1 User Input Files Transit powertrain proportions by transit vehicle type and Marea (marea_transit_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the mixes of transit vehicle powertrains. VanPropIcev: Proportion of transit van travel using internal combustion engine powertrains VanPropHev: Proportion of transit van travel using hybrid electric powertrains VanPropBev: Proportion of transit van travel using battery electric powertrains BusPropIcev: Proportion of transit bus travel using internal combustion engine powertrains BusPropHev: Proportion of transit bus travel using hybrid electric powertrains BusPropBev: Proportion of transit bus travel using battery electric powertrains RailPropIcev: Proportion of transit rail travel using internal combustion engine powertrains RailPropHev: Proportion of transit rail travel using hybrid electric powertrains RailPropEv: Proportion of transit rail travel using electric powertrains Here is a snapshot of the file: 4.3.38.2 Internal Module Inputs Package Module Outputs Description VEPowertrainsAndFuels CalculateCarbonIntensity ElectricityCI Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity TransitVanFuelCI Average carbon intensity of fuel used by transit vans (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity TransitBusFuelCI Average carbon intensity of fuel used by transit buses (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity TransitRailFuelCI Average carbon intensity of fuel used by transit rail vehicles (grams CO2e per megajoule) VETransportSupply AssignTransitService VanDvmt Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services VETransportSupply AssignTransitService BusDvmt Total daily miles traveled by buses of various sizes to provide bus service of various types VETransportSupply AssignTransitService RailDvmt Total daily miles traveled by light rail, heavy rail, commuter rail, and similar types of vehicles 4.3.38.3 Module Outputs BusGGE: Average daily amount of hydrocarbon fuels consumed by bus transit vehicles in urbanized area in gas gallon equivalents RailGGE: Average daily amount of hydrocarbon fuels consumed by rail transit vehicles in urbanized area in gas gallon equivalents VanGGE: Average daily amount of hydrocarbon fuels consumed by van transit vehicles in urbanized area in gas gallon equivalents BusKWH: Average daily amount of electricity consumed by bus transit vehicles in urbanized area in kilowatt-hours RailKWH: Average daily amount of electricity consumed by rail transit vehicles in urbanized area in kilowatt-hours VanKWH:Average daily amount of electricity consumed by van transit vehicles in urbanized area in kilowatt-hours BusCO2e: Average daily amount of carbon-dioxide equivalents produced by bus transit vehicles in urbanized area in grams RailCO2e: Average daily amount of carbon-dioxide equivalents produced by rail transit vehicles in urbanized area in grams VanCO2e: Average daily amount of carbon-dioxide equivalents produced by van transit vehicles in urbanized area in grams BusCO2eRate: Average amount of carbon-dioxide equivalents produced by bus transit vehicles per mile of travel in urbanized area in grams per mile RailCO2eRate: Average amount of carbon-dioxide equivalents produced by rail transit vehicles per mile of travel in urbanized area in grams per mile VanCO2eRate: Average amount of carbon-dioxide equivalents produced by van transit vehicles per mile of travel in urbanized area in grams per mile Top 4.4 Development and Installation NOTE: This section is the proposed location for new documentation on input development This section describes the installation and use of VE-RSPM. 4.4.1 Installation of VisionEval and VE-RSPM VE-RSPM and VisionEval framework are implemented in R, a statistical programming language and environment. Both R and VisionEval are open source and freely available. For running VE-RSPM you need to follow these steps: Install R (users are encouraged to also install RStudio, a free and open-source integrated development environment for R) Install VisionEval Run VE-RSPM The VisionEval installer is available here. Follow the instructions on this page carefully to install the Visioneval on your system. 4.4.2 Running VE-RSPM Base Scenario 4.4.2.1 Preparing inputs Once VisionEval and VE-RSPM have been installed, a directory with sample data will be available at ../models/VERSPM/. (Note .. refers to the parent directory of the unzipped installer file). The VE-RSPM directory serves the dual purposes of providing sample data and serving as a template for local modification to other locations. The ../models/VERSPM/ directory contains sample input files for the Rogue Valley region in Oregon. These inputs can be modified or replaced to investigate the impacts of policy changes or to model a different region. The folder contains multiple files and subfolders: run_model.R is the core script for running the model. It consists of calls to the modules that make up the model. The user may modify the script to call the desired modules. The defs directory contains five model definition files which is introduced in Model Definition Files The inputs directory contains a number of CSV and JSON files that provide inputs for the modules. Each module specifies what input files it needs. If you would like to know the description of each input file and how you can change those files for your desired testing see Inputs_and_Parameters There is complete set of test data for RVMPO which you will find out in the VERSPM_base_model folder. You can use those data to test VERRSPM run. the ../models/VERSPM/ directory contains sample input files for RV MPO, Oregon. These can be modified or replaced to investigate the impacts of policy changes or to model a different region. To modify a scenario, the appropriate input files are edited. For example, to change the flat rate tax of vehicles for future azone_hh_veh_own_taxes.csv would be modified in Excel, LibreOffice, or a text editor to change the VehOwnFlatRateFee of year 2038 4.4.2.2 Running the Model There are multiple ways to run VisionEval models. VisionEval models can be run via the command line directly or using openModel, and can be run for one scenario or multiple scenarios in parallel. Results can be viewed in tabular form or with the interactive VEScenarioViewer. Start R (or RStudio) and make sure your directory is set to the installer folder. The easiest way to do this is to double-click VisionEval.Rproj, which will be associated with RStudio if that is installed correctly. You should see Welcome to VisionEval! on the RStudio console. Then run the following commands: rspmmod &lt;- openModel(&#39;VERSPM&#39;) rspmmod$run() By default this will run the model in ../models/VERSPM/ directory. The default model is for the Rouge Valley (Oregon) MPO, for 2010 and 2038. After running the script you will see how the modules will be running in order. The model run will take approximately 10-15 minutes. Once complete, the output are exported to ../models/VERSPM/outputs in 3 different zone levels. 4.4.3 Running VE-RSPM Multiple Scenarios Strategic planning often requires the assessment of large numbers of future scenarios, each assessing a different combination of prioritizations, policy decisions, and constraints. The VEScenarios module provides the capability to quickly set up, run, and visualize large numbers of VE-RSPM scenarios using a baseline scenario combined with multiple changes to model inputs. After going to ../models/VERSPM_Scenarios folder, you will see multiple subfolders and scripts. 4.4.3.0.1 VERSPM_base_model This directory contains the inputs and R script necessary to run the base scenario, as described above. 4.4.3.0.2 defs VE-RSPM_Scenarios/defs directory contains the same files as the VERSPM_base_model/defs directory, but the model_parameters.json file differs between VERSPM_base_model/defs andVE-RSPM_Scenarios/defs differs in that the latter version contains just four parameters specifying the locations of inputs and outputs, as well as the number of processors (NWorkers) to use. The default is 4, but be sure to set this to a number appropriate to your machine. [ { &quot;NAME&quot;: &quot;ModelFolder&quot;, &quot;VALUE&quot;: &quot;VERSPM_base_model&quot;, &quot;TYPE&quot;: &quot;character&quot;, &quot;UNITS&quot;: &quot;NA&quot;, &quot;PROHIBIT&quot;: &quot;NA&quot;, &quot;SIZE&quot;: 20, &quot;ISELEMENTOF&quot;: &quot;&quot; }, { &quot;NAME&quot;: &quot;ScenarioInputFolder&quot;, &quot;VALUE&quot;: &quot;scenario_inputs&quot;, &quot;TYPE&quot;: &quot;character&quot;, &quot;UNITS&quot;: &quot;NA&quot;, &quot;PROHIBIT&quot;: &quot;NA&quot;, &quot;SIZE&quot;: 20, &quot;ISELEMENTOF&quot;: &quot;&quot; }, { &quot;NAME&quot; : &quot;ScenarioOutputFolder&quot;, &quot;VALUE&quot;: &quot;scenarios&quot;, &quot;TYPE&quot;: &quot;character&quot;, &quot;UNITS&quot;: &quot;NA&quot;, &quot;PROHIBIT&quot;: &quot;NA&quot;, &quot;SIZE&quot;: 20, &quot;ISELEMENTOF&quot;: &quot;&quot; }, { &quot;NAME&quot; : &quot;NWorkers&quot;, &quot;VALUE&quot;: &quot;6&quot;, &quot;TYPE&quot; : &quot;integer&quot;, &quot;UNITS&quot; : &quot;NA&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } ] 4.4.3.0.3 Inputs The inputs folder in VERRSPM_Scenarios also differs from that in VERSPM_base_model. In this case, there is only a single file specifying the output data tables that should be exported as CSV files in the outputs directory. 4.4.3.0.4 scenario_inputs Model scenarios are defined in terms of combinations of individual model input parameters and policy choices. The various inputs are defined in the scenario_inputs folder. Scenario inputs consist of eleven folders, one for each of a particular category of input, as described below. All eleven folders are required. Within each folder, there are subfolders containing input files, one per specific input. Each of the folders must contain at least one subfolder named 1, defining the input for the base scenario. Subsequent numbered folders contain input files modifying parameters of interest, as shown in the screenshots below: Model inputs not otherwise specified in the scenario_inputs directory are drawn from files in VERSPM_base_model/defs and VERSPM_base_model/inputs The subfolder names and scenario inputs are defined as follows (input file to modify given in parentheses): B - Bicycles (azone_prop_sov_dvmt_diverted.csv) : Network improvements, incentives, and technologies that encourage bicycling and other light-weight vehicle travel 1 - Base bicycling percentage of SOV tours less than 20 miles (9.75%) 2 - Increase diversion of SOV tours to 20% C - Vehicle Travel Cost (azone_hh_veh_own_taxes.csv) and (region_prop_externalities_paid.csv) : Combination of fuel prices and charges to pay for roadway costs and possibly externalities 1 - No change in fuel prices or increase in roadway or externality charges 2 - Keep the vehicle ownership cost the same 3 - Higher climate cost and pay as you drive insurance D - DemandManagement (bzone_travel_demand_mgt.csv) : Programs to encourage less private vehicle travel 1 - Baseline implementation of ITS 2 - Increase the effectiveness of implementation of ITS E - Driving Efficiency (marea_operations_deployment.csv) and (marea_speed_smooth_ecodrive.csv) and (other_ops_effectiveness.csv) : Driving efficiency by increasing implementation of ITS 1 - Base 2 - Increased the proportion by 10% F - Technology Mix and CI (marea_transit_powertrain_prop.csv) and (region_carsvc_powertrain_prop.csv) and (region_comsvc_powertrain_prop.csv`) : Vehicle technology mix and carbon intensity of fuels. 1 - Baseline vehicle technology mix 2 - Increased percentage of electric vehicles in household and commercial setting by 20% G - Fuel Price (azone_fuel_power_cost.csv) : Real fuel price in 2010 USD 1 - Baseline fuel price 2 - Double fuel price 3 - Quadruple fuel price I - Income (azone_fuel_power_cost.csv) : Real average household income in 2010 USD 1 - Baseline household income 2 - Income growth of 7% w.r.t reference 3 - Income growth of 14% w.r.t reference L - LandUse (azone_hhsize_targets.csv) and (bzone_urban_du_proportions.csv) : Distribution of population and employment by place type 1 - Base, Maintain current distribution 2 - LU overlaps with HHsize + Population P - Parking (bzone_parking.csv) : The extent of paid parking and its price 1 - Current extent and daily fee 2 - Increase parking cost by 100% and proportion charted by 10%. T - Transit (marea_transit_service.csv) : The extent and frequency of transit service 1 - Current public transit service level 2 - Double public transit service level 3 - Quadruple public transit service level V - Vehicle Characteristics (azone_hh_veh_mean_age.csv) and (azone_lttrk_prop): The combination of fuel prices and vehicle travel charges to pay for roadways and to pay for externalities such as carbon pricing 1 - Base 2 - Light truck proportion at 35% of the fleet and the average vehicle age at 8 years Running all of these input values will result in 10368 total scenarios, which would take days to run. User usually does not need all the possible combinations of scenarios. VE-RSPM Scenarios are grouped in 5 different categories which you can modify in category_config.json : Community Design : Policies that seek to enable shorter trips and alternate modes such as promotion of mixed use land use, transit service, bicycling, and parking management. ( group of L, B, P , T ) Marketing/Incentive : Policies that improve driving efficiency such as ecodriving,and Intelligent Transportation System efforts, as well as programs that reduce auto demand such as carsharing, and home or work-based transportation demand management.( group of D, E ) Pricing : Policies that move towards true cost pricing such as road user fees to pay for the cost of operating, maintaining and improving roads, pay-as-you-drive (PAYD) insurance, and environmental impact fees such as a carbon tax. ( C ) Vehicles/Fuels : Factors representing changes to future vehicles and fuels ( group of V, F ) Income : Context factor on the assumed growth of statewide average per capita income ( I ) Depending on how many scenarios exist in each of these five groups, total number of scenarios will be determined. To test the multi-scenario capability in less time, reduce the number of scenario inputs by deleting some of the numbered folders, making sure to retain the 1 folder for each of the six options. Note that if you change the directory structure in scenario_inputs, you will have to change category_config.json and scenario_config.json to match the new directory structure. To modify the scenario inputs, the numbered subdirectories can be created or deleted. Each directory contains a single input file containing the modified model parameter. 4.4.3.0.5 Running the model for multiple scenarios Similar to base case the model can be run in the command line. To run the model using R, run the following commands: scenario_rspm &lt;- openModel(&#39;VERSPM_Scenarios&#39;) scenario_rspm$run() After starting the run,model automatically builds scenarios by creating all possible combinations of settings found in scenario_inputs. The scenarios to run are found in the newly created scenarios directory. Each directory is essentially a copy of VERSPM_base_model, with inputs modified as specified in the scenario_inputs directory. Each scenario directory contains the results of a model run with its own inputs, datastore, and log file. When finished, the VE-RSPM Scenario Viewer will automatically open to display the results. To find out more on exported metrics see Performance Metrics In detail, the model specified by the run_model.R script. In this case, the script runs four modules that create the scenarios from the inputs, runs each and combines the results. Return to Tutorial. ## Performance Metrics A large number of performance metrics are produced during the run of the RPAT model, including environment and energy impacts, financial and economic impacts, and community impacts. The full list of outputs available is as follows. Based on the geo level, you will find our these metrics in of the three files ( Azone.csv , Bzone.csv , Marea.csv ) in the outputs folder VanDvmt: Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services. BusDvmt: Total daily miles traveled by buses of various sizes to provide bus service of various types. RailDvmt: Total daily miles traveled by light rail, heavy rail, commuter rail, and similar types of vehicles. UrbanHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the urbanized portion of the Marea RuralHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the non-urbanized portion of the Marea TownHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in town (urban but not urbanized) portion of the Marea ComSvcUrbanDvmt: Commercial service daily vehicle miles of travel associated with Marea urbanized household activity ComSvcRuralDvmt: Commercial service daily vehicle miles of travel associated with Marea rural household activity HvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles of travel in urbanized areas LdvOthDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways LdvFwyArtDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways HvyTrkFwyDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmt:Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways LdvFwyDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways LdvArtDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways FwyNoneCongSpeed: Average freeway speed (miles per hour) when there is no congestion FwyModCongSpeed: Average freeway speed (miles per hour) when congestion is moderate FwyHvyCongSpeed: Average freeway speed (miles per hour) when congestion is heavy FwySevCongSpeed: Average freeway speed (miles per hour) when congestion is severe FwyExtCongSpeed: Average freeway speed (miles per hour) when congestion is extreme ArtNoneCongSpeed: Average arterial speed (miles per hour) when there is no congestion ArtModCongSpeed: Average arterial speed (miles per hour) when congestion is moderate ArtHvyCongSpeed: Average arterial speed (miles per hour) when congestion is heavy ArtSevCongSpeed: Average arterial speed (miles per hour) when congestion is severe ArtExtCongSpeed: Average arterial speed (miles per hour) when congestion is extreme OthSpd: Average speed (miles per hour) on other roadways AveLdvSpd: Average light-duty vehicle speed (miles per hour) on all roadways weighted by the proportions of light-duty vehicle travel FwyNoneCongDelay: Average freeway delay (hours per mile) occurring when there is no congestion FwyModCongDelay: Average freeway delay (hours per mile) occurring when congestion is moderate FwyHvyCongDelay: Average freeway delay (hours per mile) occurring when congestion is heavy FwySevCongDelay: Average freeway delay (hours per mile) occurring when congestion is severe FwyExtCongDelay: Average freeway delay (hours per mile) occurring when congestion is extreme ArtNoneCongDelay: Average arterial delay (hours per mile) occurring when there is no congestion ArtModCongDelay: Average arterial delay (hours per mile) occurring when congestion is moderate ArtHvyCongDelay: Average arterial delay (hours per mile) occurring when congestion is heavy ArtSevCongDelay: Average arterial delay (hours per mile) occurring when congestion is severe ArtExtCongDelay: Average arterial delay (hours per mile) occurring when congestion is extreme FwyDvmtPropNoneCong: Proportion of freeway DVMT occurring when there is no congestion FwyDvmtPropModCong: Proportion of freeway DVMT occurring when congestion is moderate FwyDvmtPropHvyCong: Proportion of freeway DVMT occurring when congestion is heavy FwyDvmtPropSevCong: Proportion of freeway DVMT occurring when congestion is severe FwyDvmtPropExtCong: Proportion of freeway DVMT occurring when congestion is extreme ArtDvmtPropNoneCong: Proportion of arterial DVMT occurring when there is no congestion ArtDvmtPropModCong: Proportion of arterial DVMT occurring when congestion is moderate ArtDvmtPropHvyCong: Proportion of arterial DVMT occurring when congestion is heavy ArtDvmtPropSevCong: Proportion of arterial DVMT occurring when congestion is severe ArtDvmtPropExtCong: Proportion of arterial DVMT occurring when congestion is extreme AveCongPrice: Average price paid (dollars per mile) in congestion fees LdvSpdSmoothFactor: Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to speed smoothing HvyTrkSpdSmoothFactor: Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to speed smoothing BusSpdSmoothFactor: Proportional adjustment of bus internal combustion engine (ICE) vehicle MPG due to speed smoothing LdvEcoDriveFactor: Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to eco-driving HvyTrkEcoDriveFactor: Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to eco-driving BusEcoDriveFactor: Proportional adjustment of bus internal combustion engine (ICE) vehicle MPG due to eco-driving LdIceFactor: Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to congestion LdHevFactor: Proportional adjustment of light-duty hybrid-electric vehicle (HEV) MPG due to congestion LdEvFactor: Proportional adjustment of light-duty battery electric vehicle (EV) MPkWh due to congestion LdFcvFactor: Proportional adjustment of light-duty fuel cell vehicle (FCV) MPkWh due to congestion HdIceFactor: Proportional adjustment of heavy-duty internal combustion engine (ICE) vehicle MPG due to congestion ComSvcUrbanGGE: Average daily amount of hydrocarbon fuels consumed by commercial service vehicles associated with urban household activity in gas gallon equivalents ComSvcRuralGGE: Average daily amount of hydrocarbon fuels consumed by commercial service vehicles associated with rural household activity in gas gallon equivalents HvyTrkUrbanGGE: Average daily amount of hydrocarbon fuels consumed by heavy trucks on urbanized area roadways in the Marea in gas gallon equivalents ComSvcUrbanKWH: Average daily amount of electricity consumed by commercial service vehicles associated with urban household activity in kilowatt-hours ComSvcRuralKWH: Average daily amount of electricity consumed by commercial service vehicles associated with rural household activity in kilowatt-hours ComSvcUrbanCO2e: Average daily amount of carbon-dioxide equivalents produced by commercial service vehicles associated with urban household activity in grams ComSvcRuralCO2e: Average daily amount of carbon-dioxide equivalents produced by commercial service vehicles associated with rural household activity in grams HvyTrkUrbanCO2e: Average daily amount of carbon-dioxide equivalents produced by heavy trucks on urbanized area roadways in the Marea in grams ComSvcAveUrbanAutoCO2eRate: Average amount of carbon-dioxide equivalents produced by commercial service automobiles per mile of travel on urbanized area roadways in grams per mile ComSvcAveUrbanLtTrkCO2eRate: Average amount of carbon-dioxide equivalents produced by commercial service light trucks per mile of travel on urbanized area roadways in grams per mile HvyTrkAveUrbanCO2eRate: Average amount of carbon-dioxide equivalents produced by heavy trucks per mile of travel on urbanized area roadways in grams per mile HvyTrkRuralGGE: Average daily amount of hydrocarbon fuels consumed by heavy trucks on rural roadways in the Region in gas gallon equivalents HvyTrkUrbanGGE: Average daily amount of hydrocarbon fuels consumed by heavy trucks on urbanized area roadways in the Region in gas gallon equivalents HvyTrkRuralKWH: Average daily amount of electricity consumed by heavy trucks on rural roadways in the Region in kilowatt-hours HvyTrkUrbanKWH: Average daily amount of electricity consumed by heavy trucks on urbanized area roadways in the Region in kilowatt-hours HvyTrkRuralCO2e: Average daily amount of carbon-dioxide equivalents produced by heavy trucks on rural roadways in the Region in grams HvyTrkUrbanCO2e: Average daily amount of carbon-dioxide equivalents produced by heavy trucks on urbanized area roadways in the Region in grams BusGGE: Average daily amount of hydrocarbon fuels consumed by bus transit vehicles in urbanized area in gas gallon equivalents RailGGE: Average daily amount of hydrocarbon fuels consumed by rail transit vehicles in urbanized area in gas gallon equivalents VanGGE: Average daily amount of hydrocarbon fuels consumed by van transit vehicles in urbanized area in gas gallon equivalents BusKWH: Average daily amount of electricity consumed by bus transit vehicles in urbanized area in kilowatt-hours RailKWH: Average daily amount of electricity consumed by rail transit vehicles in urbanized area in kilowatt-hours VanKWH:Average daily amount of electricity consumed by van transit vehicles in urbanized area in kilowatt-hours BusCO2e: Average daily amount of carbon-dioxide equivalents produced by bus transit vehicles in urbanized area in grams RailCO2e: Average daily amount of carbon-dioxide equivalents produced by rail transit vehicles in urbanized area in grams VanCO2e: Average daily amount of carbon-dioxide equivalents produced by van transit vehicles in urbanized area in grams BusCO2eRate: Average amount of carbon-dioxide equivalents produced by bus transit vehicles per mile of travel in urbanized area in grams per mile RailCO2eRate: Average amount of carbon-dioxide equivalents produced by rail transit vehicles per mile of travel in urbanized area in grams per mile VanCO2eRate: Average amount of carbon-dioxide equivalents produced by van transit vehicles per mile of travel in urbanized area in grams per mile AveVehCostPM: Average out-of-pocket cost in dollars per mile of vehicle travel AveSocEnvCostPM: Average cost in dollars of the social and environmental impacts per mile of vehicle travel AveRoadUseTaxPM: Average road use taxes in dollars collected per mile of vehicle travel WalkTrips: Average number of walk trips per year by household members BikeTrips: Average number of bicycle trips per year by household members TransitTrips: Average number of public transit trips per year by household members VehicleTrips: Average number of vehicle trips per day by household members For simplicity, eight key metrics are calculated from multiple scenario runs and are shown on the Scenario Viewer output page: GHG Target Reduction: percentage reduction in light-duty vehicle CHG emissions DVMT Per Capita: daily vehicle miles of travel of residents divided by population Walk Trips Per Capita: annual residents walk trips ( not including recreation or walk to transit) Air Pollution Emissions: daily metric tons of pollutants emitted from all light-duty vehicle travel Annual Fuel Use: annual million gallons of gasoline and other fuels consumed by all light-duty vehicle travel Truck Delay: daily vehicle-hours of delay for heavy truck trael on area roads Household Vehicle Cost as Percentage of Income: average percentage of income spent by all households by owning and operating light-duty vehicles Low Income Household Vehicle Cost as Percentage of Income: average percentage of income spent by low-income households on owning and operating light-duty vehicles Using this viewer, users can select inputs of land use or policies and view their effects on model outputs, and the process can also be reversed, allowing users to choose desired outcomes and view the policy scenarios that reflect those outcomes. Instructions for using the viewer are built in to the page itself. To access a condensed version of the instructions, click on the Quick Start button at the top of the page. To understand more detail on the available categories of inputs and their levels as well as more detailed descriptions of the model output shown in the bar charts you can click on Detailed Instructions button To see which policy choices and land use inputs result in desired outcomes, select a range of values within one outcome. In this case, the low end of the DVMT per capita has been chosen: As the outcome is selected, the bar graphs and the data table at the bottom (not shown) update to show only the scenarios resulting in the selected outcome. For instance, In this case, the low end of DVMT per capita are associated with the most increase in fuel price or more public transit and parking costs for community design. It is also possible to select inputs to view the associated outcomes. To do so, simply click on the bar corresponding to the desired scenario input. In this case (below) the scenario with highest fuel price is selected to view the impacts on outcome variables Here, DVMT per capita and annual fuel cost digrams shift to the left as expected since less people are expected to drive in this scenario Return to Tutorial. "],["verpat-tutorial.html", "Chapter 5 VERPAT Tutorial 5.1 Overview 5.2 Inputs and Parameters 5.3 Modules and Outputs", " Chapter 5 VERPAT Tutorial 5.1 Overview VERPAT is a tool for evaluating the impact of various smart growth policies. VERPAT is designed to be a high-level evaluation at a regional scale that can bridge the distance between evaluating smart growth policies during a regional visioning process and evaluating smart growth policies at a project or alternative level in a regional transportation plan. VERPAT evaluates policy scenarios to identify the most promising policies that could be further tested using a more detailed project-level tool. Currently, VERPAT can provide information on the following changes in the regional system: Built Environment - changes to the urban form (proportion of population and employment living in mixed-use areas, transit-oriented developments, or rural/greenfield areas) Travel Demand - changes in population demographics (age structure), changes in personal income, changes in firms by size or industry, relative amounts of development occurring in urban core, close-in communities, suburban or rural areas, urban core, auto and light truck proportions by year, and induced demand Transportation Supply - amounts of regional transit service, amounts of freeway and arterial capacity Policies - pricing (vehicle miles traveled charges or parking pricing programs), intelligent transportation system (ITS) strategies for freeways and arterials, demand management (vanpool, telecommuting, ridesharing, and transit pass programs) VERPAT is designed to evaluate regions, which can be a multi-county metropolitan region. It distinguishes between population and employment living/working in the urban core, close-in communities, suburban and rural/greenfield areas based on densities, diversity in land uses, street design or intersection densities, job accessibility by auto, distances to transit stops, and connectivity of the street system. The intended audience for VERPAT is regional decision-makers and land use and transportation planners involved in the development and evaluation of transportation and land use policies, and who need to conduct scenario planning to evaluate smart growth policies and determine their impact on travel demand. VERPAT was designed to address as many of the limitations identified in the research as possible and to provide a tool that filled a gap in the set of available tools. The relationships in the VERPAT tool were based upon the background research conducted for the SHRP 2 C16 project. VERPAT is designed to allow the evaluation of a wide range of policies and combination of policies in a consistent framework quickly and easily so that promising smart growth strategies can be identified and pursued in the land use and transportation planning processes. VERPAT is intended to precede and supplement more sophisticated modeling efforts, which can be used to evaluate specific smart growth projects. It is designed to be accessible to land use and transportation planners with no modeling experience. 5.1.1 VERPAT Model Structure VERPAT is a disaggregate policy model that predicts travel demand impacts at an individual household level. The diagram below illustrates the modeling system with model components and feedback loops. Links are provided to the source code that implements each section. Household Models: Households Package Firms Models: Firms Package Urban Form Models: Land Use Package Accessibility Models: Transport Supply Package Vehicle Models: Household Vehicles Package Travel Demand Models: Household Travel Package Congestion Models: Transport Supply Use Package Travel Performance Package Reporting Package For more, see [[VERPAT Modules and Outputs | VERPAT-Modules-and-Outputs]]. 5.1.2 VERPAT Modules VERPAT does not provide specific spatial results beyond the built environment categories at the regional level, but does capture individual household and firm characteristics and the interactions between policies. The disaggregate nature of the model captures impacts that may be occurring for small portions of the population (say 0-vehicle households) where aggregate models have a more difficult time capturing these impacts. The following is an explanation of major steps in the model execution [] = indicates VE modules Household Model - Households Package Create synthetic households for the region, including persons [Create Households] and workers [Predict Workers] by age group. A total household income is assigned to each household, given the ages of persons in the household and the average per capita income of the region where the household resides [PredictIncome]. Firm Model - Synthetic Firms Package A set of firms is created for each forecast year that represents the likely firm composition for the region, given the County Business Pattern data of firms by size and industry. Each firm is described in terms of the number of employees and its industry [CreateBaseSyntheticFirms] and [CreateFutureSyntheticFirms]. Urban Form Model - Land Use Package Calculate Place Types for Households and Firms - Population and employment location characteristics are important variables in the vehicle ownership, travel demand, and accessibility models. There are four place types (urban core, Close-in Community, suburban, and rural and five location categories (residential, commercial, mixed-use, transit-oriented development, and Greenfield)]. Models for households were developed to estimate location characteristics using National Household Travel Survey data. Firms are currently allocated randomly to fit the employment allocation inputs since there are no national datasets from which to draw these relationships [CalculateBasePlaceTypes] and [CalculateFuturePlaceTypes]. Accessibility Model - Transport Supply Package Calculate Freeway, Arterial, and Public Transit Supply Levels - The number of lane miles of freeways and arterials is computed for each region based on the change in inventories for a particular scenario. For public transit, the inputs specify the change in transit revenue miles relative to the base. Inputs for each area also specify the revenue mile split between electrified rail and buses [CreateBaseAccessibility] and [CreateFutureAccessibility]. Vehicle Model - Household Vehicle Package Calculate Vehicle Ownership - Each household is assigned the number of vehicles it is likely to own based on the number of persons of driving age in the household, whether only elderly persons live in the household, the income of the household, the population density where the household lives, the freeway supply, the transit supply, and whether the household is located in an urban mixed-use area. [AssignVehicleFeatures] and [AssignVehicleFeaturesFuture]. Travel Demand Model - Household Travel Package Calculate Travel Demand - The average daily vehicle miles traveled, classification of vehicles as electric vehicles, auto and transit trips for each household is modeled based on household information determined in previous steps for the base conditions. The model is sensitive to household income, population density of the neighborhood where the household resides, number of household vehicles, whether the household owns no vehicles, the levels of public transportation and freeway supplies in the region, the driving age population in the household, the presence of persons over age 65, and whether the neighborhood is characterized by mixed-use development. [CalculateTravelDemand] and [CalculateTravelDemandFuture]. Calculate Truck and Bus Vehicle Miles Traveled (VMT) - Regional truck VMT is calculated based on changes in the regional household income. As a default, a one-to-one relationship between regional income growth and truck VMT growth is assumed. In other words, a doubling of total regional income would result in a doubling of truck VMT. Bus VMT is calculated from bus revenue miles that are factored up to total vehicle miles to account for miles driven in non-revenue service. [[CalculateTravelDemand](https://github.com/visioneval/VisionEval/wiki/VERPAT-Modules-and-Outputs#calculatetraveldemand)] and [[CalculateTravelDemandFuture](https://github.com/visioneval/VisionEval/wiki/VERPAT-Modules-and-Outputs#calculatetraveldemandfuture)]. Congestion Model - Transport Supply Use Package Calculate the amount of congestion  Auto, and light truck VMT, truck VMT and bus VMT are allocated to freeways, arterials, and other roadways. Truck and bus VMT are allocated based on mode-specific data, and auto and light truck VMT are allocated based on a combination of factors and a model that is sensitive to the relative supplies of freeway and arterial lane miles. System-wide ratios of VMT to lane miles for freeways and arterials are used to allocate VMT to congestion levels using congestion levels defined by the Texas Transportation Institute for the Urban Mobility Report. Each freeway and arterial congestion level is associated with an average trip speed for conditions that do and do not include ITS treatment for incident management on the roadway. Overall average speeds by congestion level are calculated based on input assumptions about the degree of incident management. Speed vs.Â fuel efficiency relationships for light vehicles, trucks, and buses are used to adjust the fleet fuel efficiency averages computed for the region. [CalculateCongestionBase], [CalculateCongestionFuture], and [CalculateCongestionPolicy]. 5.1.3 Feedback loops Following initial calculations for baseline conditions, the model has feedback loops, which allow for changes in travel demand and other impacts based on induced travel demand and for changes in policies for a given scenario. Congestion is recalculated following these adjustments to demand. Induced Demand Model - Household Travel Package Calculate Induced Travel Demand - Induced demand is calculated for changes in roadway supply in the near term as a function of speed, based on potential mode and route shifts to produce changes in VMT and in the longer term to include changes in vehicle ownership, still as a function of speed. This model does not include induced demand as a result of changes in growth that may occur as part of a smart growth scenario because the evidence is limited empirical evidence. [CalculateInducedDemand]. Policy Adjusted Travel Demand - Household Travel Package Calculate Scenario Travel Demand - The average daily VMT for each household can be adjusted based on changes in growth patterns by place type, changes in auto operating cost, changes in road lane miles or transit revenue miles for any scenario. There are also a series of policy assumptions that can contribute to changes in VMT: pricing such as VMT charges or parking pricing, ITS strategies for freeways and arterials, and vanpool, telecommuting, ridesharing, and transit pass programs. All of these will contribute to shifts in travel demand for a given scenario. [CalculatePolicyVmt]. Performance metrics are calculated in the VEReports package. The other impacts that are produced for a given scenario include environment and energy impacts greenhouse gas (GHG) emissions and fuel consumption), financial and economic impacts (highway and transit infrastructure costs, transit operating costs, and traveler costs), regional accessibility, and community impacts (livability and public health indicators). 5.1.4 For more information VERPAT Modules and Outputs VisionEval Model System Design and Users Guide TravelWorks Rapid Policy Assessment Tool RPAT User manual [[Overview | VERPAT-Tutorial-Overview]] 5.2 Inputs and Parameters VERPAT contains 5 definition files and 32 input files, some of which the user must change and others which typically remain unchanged. This page walks the end user through these files and specifies which files must be updated to implement VERPAT in a new region. The following five files need to be configured in the defs directory: run_parameters.json model_parameters.json deflators.csv geo.csv units.csv 5.2.0.1 run_parameters.json The run_parameters.json file contains parameters that define key attributes of the model run and relationships to other model runs. A more detailed description of the file can be found here. The results of model run are stored in a directory with the name specified by \"DatastoreName\". This name should be changed when running different scenarios. For e.g.Â when running base scenario the output directory name can be set to BaseScenario by using \"DatastoreName\": [\"BaseScenario\"] in the file. The format of the VERPAT run_parameters.json file is as follows: { &quot;Model&quot;: [&quot;RPAT&quot;], &quot;Scenario&quot;: [&quot;RPAT Pilot&quot;], &quot;Description&quot;: [&quot;Pilot RPAT module in VisionEval&quot;], &quot;Region&quot;: [&quot;Multnomah County Oregon&quot;], &quot;BaseYear&quot;: [&quot;2005&quot;], &quot;Years&quot;: [&quot;2005&quot;, &quot;2035&quot;], &quot;DatastoreName&quot;: [&quot;Datastore&quot;], &quot;DatastoreType&quot;: [&quot;RD&quot;], &quot;Seed&quot;: [1], &quot;RunTypes&quot;: [&quot;E&quot;, &quot;ELESNP&quot;] } Inputs Model Parameters Definitions 5.2.0.2 model_parameters.json The model_parameters.json can contain global parameters for a particular model configuration that may be used by multiple modules. A more detailed description of the file and its structure can be found here. The description about the variables, required for VERPAT, listed in the file are documented by the modules that uses them in the inputs and outputs section. Some of these values may be modified to run scenarios. The variables that can be modified are described further Input Files. The format of the VERPAT model_parameters.json file is as follows: [ {&quot;NAME&quot;: &quot;EmploymentGrowth&quot;, &quot;VALUE&quot;: &quot;1.5&quot;, &quot;TYPE&quot;: &quot;double&quot;, &quot;UNITS&quot;: &quot;multiplier&quot;, &quot;PROHIBIT&quot;: &quot;&quot;, &quot;ISELEMENTOF&quot;: &quot;&quot;}, { &quot;NAME&quot;: &quot;FwyLaneMiGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; }, { &quot;NAME&quot; : &quot;ArtLaneMiGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; }, . . . { &quot;NAME&quot; : &quot;AutoCostGrowth&quot;, &quot;VALUE&quot;: &quot;1.5&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } ] Inputs Model Parameters Definitions 5.2.0.3 deflators.csv The deflators.csv file defines the annual deflator values, such as the consumer price index, that are used to convert currency values between different years for currency denomination. This file does not need to be modified unless the years for which the dollar values used in the input dataset is not contained in this file. The format of the file is as follows: Year Value 1999 172.6 2000 178 2001 182.4 Inputs Model Parameters Definitions 5.2.0.4 geo.csv The geography.csv file describes all of the geographic relationships for the model and the names of geographic entities in a CSV-formatted text file. Azone, Bzone, and Marea should remain consistent with the input data. The format of the file is as follows: Azone Bzone Czone Marea Multnomah Rur NA Multnomah Multnomah Sub_R NA Multnomah Multnomah Sub_E NA Multnomah Multnomah Sub_M NA Multnomah Multnomah Sub_T NA Multnomah Multnomah CIC_R NA Multnomah Multnomah CIC_E NA Multnomah Multnomah CIC_M NA Multnomah Multnomah CIC_T NA Multnomah Multnomah UC_R NA Multnomah Multnomah UC_E NA Multnomah Multnomah UC_M NA Multnomah Multnomah UC_T NA Multnomah The geography is described by 13 place types as shown below. One emerging school of thought in land use planning is to consider land uses in terms of place types instead of simply residential or commercial or high density compared to low density. A place type refers to all of the characteristics of a developed area including the types of uses included, the mix of uses, the density and intensity of uses. URBAN CORE CLOSE-IN COMMUNITY SUBURBAN RURAL Residential Commercial Mixed-Use Transit-Oriented Development Rural/Greenfield An initial typology or system to organize place types can be traced to the Smart Growth Transect, which contained six zones in its original configuration including: Rural Preserve Rural Reserve Edge General Center Core This approach to classifying place types was further refined in the Caltrans Smart Mobility which defined the following seven place types including: Urban Centers Close-In Compact Communities Compact Communities Suburban Communities Rural and Agricultural Lands Protected Lands Special Use Areas Several of these place type categories provided additional options such as the Close-In Compact Communities which had three sub-definitions including Close-In-Centers, Close-In Corridors, and Close-In Neighborhoods. An alternative view of place types was provided by Reconnecting America, which developed a performance based place type approach for describing areas proximate to transit stations. Station areas would vary in terms of their relative focus between residential units, employees or a mix of the two. Station areas are also characterized on their relative intensity as well as shown below. PERFORMANCE BASED TYPOLOGY FOR TRANSIT STATION AREAS The approach employed for the place types in RPAT is therefore an amalgam of these approaches, in that the terminology is borrowed from the Smart Growth Transect and Caltrans Smart Mobility Study, while the relative performance of each place type is taken from the Reconnecting America approach but applied to a region instead of transit station sites. Four general area types are defined in RPAT including: The Urban Core is the high-density mixed-use places with high jobs-housing ratios, well connected streets and high levels of pedestrian activities. It is anticipated that for many regions, the Urban Core will be the traditional downtown area of which there likely would be only one. The Close-in Community would be those areas located near to the Urban Cores and would consist primarily of housing with scattered mixed-use centers and arterial corridors. Housing would be varied in terms of density and type. Transit would be available with a primary focus on commute trips. These areas may be classified by their residents as suburban would be considered to be close-in communities given their adjacency to the Downtown and therefore the higher levels of regional accessibility. The Suburban place type is anticipated to represent the majority of development within regions. These communities are characterized by low level of integration of housing with jobs, retail, and services, poorly connected street networks, low levels of transit service, large amounts of surface parking, and limited walk ability. The Rural place type is defined as settlements of widely spaced towns separated by firms, vineyards, orchards, or grazing lands. These areas would be characterized by widely dispersed residential uses, little or no transit service, and very limited pedestrian facilities. Further definition of the place types is allowed through the use of development types within the Urban Core, Close-in Community, and Suburban area types including: Residential includes all place types that are predominantly residential in character with limited employment and retail opportunities. Examples of this development type might include typical Suburban Residential or areas of the Downtown which are primarily residential as well. It is anticipated that this development type may be found in all of the area types except for rural. Employment includes those areas which are focused on employment with limited retail and residential. An example of this might include a Suburban Office Complex or a large cluster of office buildings within a Close-in Community or Urban Core. As with the residential development type, it is anticipated that this type of use would be found in all place types except for rural. Mixed-Use are those areas within a region which have a mix of residential, employment, and retail uses. While this development type can be found in the Suburban place type, it is most commonly found in the close-in community and urban core place type. Downtown areas that have retained their residential population to complement the employment are examples of this development type. Transit-Oriented Development (TOD) which is similar to the other development types in that it is applied to all area types except for Rural areas since it is thought to be highly unlikely that a rural TOD would be developed. The TOD development type is characterized by greater access to transit in all area types. Examples of this development type might include a Suburban TOD focused on a commuter rail station. The process of allocating existing land use to the 13 place types is somewhat dependent on the types of data available in a region that describe existing land use, and the process can be either very detailed or somewhat simplified. The following description relays the process developed by Atlanta Regional Commission (ARC) as part of the pilot testing of RPAT and provides an example of how, mechanically, an agency can approach this allocation. It should be noted that this is merely one approach and not a specific recommendation for a method that should be followed. In general, ARC followed a somewhat detailed process to derive input data from land use data as presented in their Unified Growth Policy Map, and from their regional travel demand model. They developed heuristics to align their land use with the 13 place types that RPAT uses. The conversion of land use data to the place type scheme used in RPAT involved taking ARCs Unified Growth Policy Map (UGPM) Areas and converting them to the 13 RPAT place types. The first step was to allocate the UGPM areas to the four area types used in RPAT. The Urban Core area type includes Region Core, Region Employment Centers and Aerotropolis UGPM areas; Close-in Community includes Maturing Neighborhoods; Suburban includes Developing Suburbs and Established Suburbs; and Rural includes Rural Areas and Developing Rural. The ARC traffic analysis zone (TAZ) system was overlaid with the area types and the centroid of the TAZ was used to determine its area type. The RPAT development type, the other dimension of the place type matrix, which included residential, mixed-use, employment, and TOD development types was determined for each TAZ not in the rural area type using the base year percentage of the TAZs employment in relation to the total of the population and employment in the TAZ. The mix between the employment and employment was used to determine the TAZs development type using the following cut points: Residential: &lt; 33.33% Mixed Use: 33.33% to 66.67% Employment: &gt; 66.67% Identify any TAZs that are TOD based on transit service and specific development types: only one TAZ was determined to be TOD as a development type, Lindbergh Center, in the Urban Core area type. The combination of the area type and the development type was then used to allocate all TAZs to one of the 13 place types. The following is an enumeration of each place type abbreviation as it appears in the input file as well as a brief description of that value: Abbreviation Description Rur Rural Sub_R Suburban Residential Sub_E Suburban Employment (i.e.Â Commercial) Sub_M Suburban Mixed Use Sub_T Suburban Transit Oriented Development CIC_R Close-in Community Residential CIC_E Close-in Community Employment (i.e.Â Commercial) CIC_M Close-in Community Mixed Use CIC_T Close-in Community Transit Oriented Development UC_R Urban Core Residential UC_E Urban Core Employment (i.e.Â Commercial) UC_M Urban Core Mixed Use UC_T Urban Core Transit Oriented Development Inputs Model Parameters Definitions 5.2.1 units.csv The units.csv file describes the default units to be used for storing complex data types in the model. This file should not be modified by the user. The format of the file is as follows: Type Units currency USD distance MI area SQMI The VisionEval model system keeps track of the types and units of measure of all data that is processed. More details about the file and structure can be found here. Inputs Model Parameters Definitions 5.2.2 Input Files 5.2.2.1 Inputs The scenario inputs are split into four (4) categories: Built Environment, Demand, Policy, and Supply. There are two ways to specify these inputs. CSV Inputs are specified in a *.csv file and JSON Inputs are specified in model_parameters.json file. The users are encouraged to change these inputs to build different scenarios. The RPAT to VERPAT the connection between RPAT inputs to VERPAT inputs. Built Environment - CSV Inputs - bzone_pop_emp_prop.csv Demand - CSV Inputs - region_trips_per_cap.csv - azone_employment_by_naics.csv - azone_hh_pop_by_age.csv - azone_gq_pop_by_age.csv - azone_hhsize_targets.csv - azone_per_cap_inc.csv - azone_relative_employment.csv - region_truck_bus_vmt.csv - JSON Inputs - BaseLtVehDvmt - BaseFwyArtProp - EmploymentGrowth Transport Supply CSV Inputs marea_lane_miles.csv marea_rev_miles_pc.csv Policy - CSV Inputs - region_commute_options.csv - azone_its_prop.csv - region_light_vehicles.csv - marea_parking_growth.csv - JSON Inputs - AutoCostGrowth - FwyLaneMiGrowth - ArtLaneMiGrowth - BusRevMiPCGrowth - RailRevMiPCGrowth - VmtCharge 5.2.2.2 Model Parameters There are two ways to specify model parameters. CSV Parameters are specified in a *.csv file and JSON Parameters in a model_parameters.json file. While you are provided access to the model parameters, you are encouraged to use the default parameter values unless directed to use alternatives. Editing modeling parameters should be based only on research pertaining to local data sources and may result in unpredictable results. Model Parameters CSV Parameters model_accident_rates.csv model_fuel_prop_by_veh.csv model_fuel_composition_prop.csv model_fuel_co2.csv model_place_type_elasticities.csv model_place_type_relative_values.csv model_tdm_ridesharing.csv model_tdm_transit.csv model_tdm_transitlevels.csv model_tdm_vanpooling.csv model_tdm_workschedule.csv model_tdm_workschedulelevels.csv model_transportation_costs.csv model_veh_mpg_by_year.csv model_phev_range_prop_mpg_mpkwh.csv model_hev_prop_mpg.csv model_ev_range_prop_mpkwh.csv JSON Parameters AnnVmtInflator BaseCostPerMile DvmtBudgetProp FuelCost KwhCost GasTax LtTruckProp TranRevMiAdjFactor TruckVmtGrowthMultiplier WorkVmtProp 5.2.3 Input Files to Change The user should change the input files described here. 5.2.4 Built Environment 5.2.4.1 CSV Inputs 5.2.4.2 bzone_pop_emp_prop.csv Population and Jobs by Place Type: This file contains the distribution of population and employment among the 13 place types for base and future year. See this explanation for more infomation regarding place types. Each column, for each year, must sum to one (1). It is acceptable to have no land use (i.e.Â a value of 0) in certain categories. The yearly TAZ employment and population totals were summed by the 13 place type and then scaled to total one for both employment and population. The allocation of growth between the base and the future years in population and employment to each of the 13 place types is captured by the rows containing future years. The discussion of the population and jobs by place type input above describes how to allocate existing land use to the 13 place types. A similar approach can be used to allocate expected growth from spatial planning resources such as TAZ or Census Block Group level forecasts to the place types. Here is a snapshot of the file: Geo Year Pop Emp Rur 2005 0.05 0.1 Sub_R 2005 0.3 0 Sub_E 2005 0 0.2 Sub_M 2005 0.1 0.1 Sub_T 2005 0 0 CIC_R 2005 0.15 0 CIC_E 2005 0 0.2 CIC_M 2005 0.1 0.1 CIC_T 2005 0 0 UC_R 2005 0.1 0 UC_E 2005 0 0.1 UC_M 2005 0.1 0.1 UC_T 2005 0.1 0.1 Rur 2035 0.05 0.1 Sub_R 2035 0.3 0 Sub_E 2035 0 0.2 Sub_M 2035 0.1 0.1 Sub_T 2035 0 0 CIC_R 2035 0.15 0 CIC_E 2035 0 0.2 CIC_M 2035 0.1 0.1 CIC_T 2035 0 0 UC_R 2035 0.1 0 UC_E 2035 0 0.1 UC_M 2035 0.1 0.1 UC_T 2035 0.1 0.1 Inputs Model Parameters Definitions 5.2.5 Demand 5.2.5.1 CSV Inputs 5.2.5.2 region_trips_per_cap.csv Auto and transit trips per capita: This file contains regional averages for auto and transit trips per capita per day for the base year. Auto is the regional average of auto trips per capita, including drive alone and shared ride travel. This data can be derived from the National Household Travel Survey by region or from a local household travel survey or regional travel demand forecasting model. Transit is the regional average of transit trips per capita, including walk and drive access to transit. This data can be derived from the National Transit Database where the annual database contains a service table that has annual transit trip data for each transit operator or from a local household travel survey or regional travel demand forecasting model. Here is a snapshot of the files: Mode Trips Auto 3.2 Transit 0.4 Inputs Model Parameters Definitions 5.2.5.3 azone_employment_by_naics.csv Employment: This file contains employment data for each of the counties that make up the region. The file is derived from County Business Pattern (CBP) data by county. Industries are categorized by the North American Industrial Classification System (NAICS) 6 digit codes. Firm size categories are: n1_4: 1- 4 employees n5_9: 5-9 employees n10_19: 10-19 employees n20_99: 20-99 employees n100_249: 100-249 employees n250_499: 250-499 employees n500_999: 500-999 employees n1000: 1,000 or More Employee Size Class n1000_1: 1,000-1,499 employees n1000_2: 1,500-2,499 employees n1000_3: 2,500 to 4, 999 Employees n1000_4: Over 5,000 employees While the county field is required to be present, the business synthesis process does not require a meaningful value and therefore users may simply enter region. The consistency in the naming of the region should be maintained across all the files that contains the label county or Geo. It is also not necessary to use such detailed NAICS categories if those are not available; the current business synthesis model and subsequent models do not use this level of detail (although future versions of the model may)  at minimum, the number of establishments for all employment types can be provided by size category. Regions with significant employment in industries such as government and public administration that are not covered by the CBP may need to add records to the file that cover this type of employment to more accurately match employment totals in their region. The two additional fields contained in the file are: emp: Total number of employees est: Total number of establishments Here is the snapshot of the file: county year naics emp est n1_4 n5_9 n10_19 n20_49 n50_99 n100_249 n250_499 n500_999 n1000 n1000_1 n1000_2 n1000_3 n1000_4 Multnomah 2005 113110 0 5 2 1 0 2 0 0 0 0 0 0 0 0 0 Multnomah 2005 113310 0 3 2 0 0 1 0 0 0 0 0 0 0 0 0 Multnomah 2005 114111 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 Multnomah 2005 114112 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 Multnomah 2005 115114 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 Multnomah 2005 115210 0 4 3 1 0 0 0 0 0 0 0 0 0 0 0 Multnomah 2005 115310 0 5 2 0 1 1 1 0 0 0 0 0 0 0 0 Multnomah 2005 212319 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 Multnomah 2005 212321 0 4 1 1 1 1 0 0 0 0 0 0 0 0 0 Inputs Model Parameters Definitions 5.2.5.4 azone_hh_pop_by_age.csv Household population: This file contains population estimates/forecasts by county and age cohort for each of the base and future years. The file format includes six age categories used by the population synthesis model: 0-14 15-19 20-29 30-54 55-64 65 Plus Future year data must be developed by the user; in many regions population forecasts are available from regional or state agencies and/or local academic sources. As with the employment data inputs the future data need not be county specific. Rather, regional totals by age group can be entered into the file with a value such as region entered in the county field. Here is a snapshot of the file: Geo Year Age0to14 Age15to19 Age20to29 Age30to54 Age55to64 Age65Plus Multnomah 2005 129869 41133 99664 277854 71658 72648 Multnomah 2035 169200 48800 144050 327750 116100 162800 Inputs Model Parameters Definitions 5.2.5.5 azone_gq_pop_by_age.csv :construction: Group quarter population: This file contains group quarters population estimates/forecasts by county and age cohort for each of the base and future years. The file format includes six age categories used by the population synthesis model: 0-14 15-19 20-29 30-54 55-64 65 Plus Here is a snapshot of the file: Geo Year GrpAge0to14 GrpAge15to19 GrpAge20to29 GrpAge30to54 GrpAge55to64 GrpAge65Plus Multnomah 2005 0 0 0 1 0 0 Multnomah 2035 0 0 0 1 0 0 Inputs Model Parameters Definitions 5.2.5.6 azone_hhsize_targets.csv :construction: Household size (azone_hhsize_targets.csv): This file contains the household specific targets. This contain two household specific attributes: AveHhSize: Average household size of households (non-group quarters) Prop1PerHh: Proportion of households (non-group quarters) having only one person Here is a snapshot of the file: Geo Year AveHhSize Prop1PerHh Multnomah 2005 NA NA Multnomah 2035 NA NA Inputs Model Parameters Definitions 5.2.5.7 azone_per_cap_inc.csv Regional income: This file contains information on regional average per capita household (HHIncomePC) and group quarters (GQIncomePC) income by forecast year in year 2000 dollars. The data can be obtained from the U.S. Department of Commerce Bureau of Economic Analysis for the current year or from regional or state sources for forecast years. In order to use current year dollars just replace 2000 in column labels with current year. For example, if the data is obtained in year 2005 dollars then the column labels in the file shown below will become HHIncomePC.2005 and GQIncomePC.2005. Here is a snapshot of the file: Geo Year HHIncomePC.2000 GQIncomePC.2000 Multnomah 2005 32515 0 Multnomah 2035 40000 0 Inputs Model Parameters Definitions 5.2.5.8 azone_relative_employment.csv Relative employment: This file contains ratio of workers to persons by age cohort in model year vs.Â estimation data year. The relative employment value for each age group, which is the employment rate for the age group relative to the employment rate for the model estimation year data is used to adjust the relative employment to reflect changes in relative employment for other years. This file contains five age cohorts: RelEmp15to19: Ratio of workers to persons age 15 to 19 in model year vs.Â in estimation data year RelEmp20to29: Ratio of workers to persons age 20 to 29 in model year vs.Â in estimation data year RelEmp30to54: Ratio of workers to persons age 30 to 54 in model year vs.Â in estimation data year RelEmp55to64: Ratio of workers to persons age 55 to 64 in model year vs.Â in estimation data year RelEmp65Plus: Ratio of workers to persons age 65 or older in model year vs.Â in estimation data year Here is a snapshot of the file: Geo Year RelEmp15to19 RelEmp20to29 RelEmp30to54 RelEmp55to64 RelEmp65Plus Multnomah 2005 1 1 1 1 1 Multnomah 2035 1 1 1 1 1 Inputs Model Parameters Definitions 5.2.5.9 region_truck_bus_vmt.csv Truck and bus vmt: This file contains the regions proportion of VMT by truck and bus as well as the distribution of that VMT across functional classes (freeway, arterial, other). The file includes one row for bus VMT data and one row for Truck VMT data. It should be noted that it is not necessary to enter values in the PropVmt column for BusVmt as this is calculated using the values in the transportation_supply.csv #EDIT (marea_rev_miles_pc.csv?) user input file. The truck VMT proportion (PropVMT column, TruckVMT row) can be obtained from Highway Performance Monitoring System data and local sources or the regional travel demand model if one exists. The proportions of VMT by functional class can be derived from the Federal Highway Cost Allocation Study and data from transit operators. The Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II is used to calculate the average proportion of truck VMT by functional class. Data from transit authorities are used to calculate the proportions of bus VMT by urban area functional class. Here is a snapshot of the file: Type PropVmt Fwy Art Other BusVmt 0 0.15 0.591854 0.258146 TruckVmt 0.08 0.452028 0.398645 0.149327 Inputs Model Parameters Definitions 5.2.5.10 JSON Inputs 5.2.5.11 BaseLtVehDvmt Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT for the base year in thousands of miles. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. Light vehicle daily VMT can be estimated by subtracting truck and bus VMT from total VMT provided in the Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseLtVehDvmt&quot;, &quot;VALUE&quot;: &quot;27244&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;MI/DAY&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.5.12 BaseFwyArtProp Dvmt proportion by functional class (BaseFwyArtProp): The proportions of daily VMT for light vehicles that takes place on freeways and arterials (i.e., the remainder of VMT takes place on lower functional class roads for the base year. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. The proportions of light vehicle daily VMT on freeways and arterials can be derived from the HPMS data. Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseFwyArtProp&quot;, &quot;VALUE&quot;: &quot;0.77&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;proportion&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;, &#39;&gt; 1&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.5.13 EmploymentGrowth Employment Growth (EmploymentGrowth): This variable represents a growth rate for employment in the region between the base year and the future year. A rate of 1 indicates no changes in overall employment, a value of more than 1 indicates some growth (e.g., 1.5 = 50% growth) and a value of less than 1 indicates decline in employment. It should be defined in model_parameters.json as follows: { &quot;NAME&quot;: &quot;EmploymentGrowth&quot;, &quot;VALUE&quot;: &quot;1.5&quot;, &quot;TYPE&quot;: &quot;double&quot;, &quot;UNITS&quot;: &quot;multiplier&quot;, &quot;PROHIBIT&quot;: &quot;&quot;, &quot;ISELEMENTOF&quot;: &quot;&quot; } Inputs Model Parameters Definitions 5.2.6 Transport Supply 5.2.6.1 CSV Inputs 5.2.6.2 marea_lane_miles.csv Road lane miles: This file contains the amount of transportation supply by base year in terms of lane miles of freeways and arterial roadways in the region. The base year data is duplicated for future year. Freeway and Arterial are total lane miles for those functional classes in the region. These data can be derived from the Federal Highway Administrations (FHWA) Highway Statistics data. Here is a snapshot of the file: Geo Year FwyLaneMi ArtLaneMi Multnomah 2005 250 900 Multnomah 2035 250 900 Inputs Model Parameters Definitions 5.2.6.3 marea_rev_miles_pc.csv Transit revenue miles: This file contains the amount of transportation supply by base year in terms of the revenue miles operating by the transit system in the region. The base year data is duplicated for future year. Bus and Rail are annual bus and rail revenue miles per capita for the region. These data can be derived from the National Transit Database, where the annual database contains a service table that has annual revenue mile data by mode for each transit operator. Here is a snapshot of the file: Geo Year BusRevMiPC RailRevMiPC Multnomah 2005 19 4 Multnomah 2035 19 4 Inputs Model Parameters Definitions 5.2.7 Policy 5.2.7.1 CSV Inputs 5.2.7.2 region_commute_options.csv Percentage of employees offered commute options: This file contains assumptions about the availability and participation in work based travel demand management programs. The policies are ridesharing programs, transit pass programs, telecommuting or alternative work schedule programs, and vanpool programs. For each, the user enters the proportion of workers who participate (the data items with the Participation suffix). For one program, the transit subsidy, the user must also enter the subsidy level in dollars for the TransitSubsidyLevel data item. Here is a snapshot of the file: TDMProgram DataItem DataValue Ridesharing RidesharingParticipation 0.05 TransitSubsidy TransitSubsidyParticipation 0.1 TransitSubsidy TransitSubsidyLevel 1.25 WorkSchedule Schedule980Participation 0.01 WorkSchedule Schedule440Participation 0.01 WorkSchedule Telecommute1.5DaysParticipation 0.01 Vanpooling LowLevelParticipation 0.04 Vanpooling MediumLevelParticipation 0.01 Vanpooling HighLevelParticipation 0.01 Inputs Model Parameters Definitions 5.2.7.3 azone_its_prop.csv Percent road miles with ITS treatment: This file is an estimate of the proportion of road miles that have improvements which reduce incidents through ITS treatments in both the base and future years. Values entered should be between 0 and 1, with 1 indicating that 100% of road miles are treated. The ITS policy measures the effects of incident management supported by ITS. The ITS table is used to inform the congestion model and the travel demand model. The model uses the mean speeds with and without incidents to compute an overall average speed by road type and congestion level providing a simple level of sensitivity to the potential effects of incident management programs on delay and emissions. The ITS treatments are evaluated only on freeways and arterials. The ITS treatments that can be evaluated are those that the analyst considers will reduce non-recurring congestion due to incidents. This policy does not deal with other operational improvements such as signal coordination, or temporary capacity increases such as allowing shoulder use in the peak. Here is a snapshot of the file: Geo Year ITS Multnomah 2005 0 Multnomah 2035 0 Inputs Model Parameters Definitions 5.2.7.4 region_light_vehicles.csv Bicycling/light vehicles targets: This file contains input data for the non-motorized vehicle model. In VERPAT, non-motorized vehicles are bicycles, and also electric bicycles, segways, and similar vehicles that are small, light-weight and can travel at bicycle speeds or slightly higher. The parameters are as follows: TargetProp: non-motorized vehicle ownership rate (average ratio of non-motorized vehicles to driver age population) Threshold: single-occupant vehicle (SOV) tour mileage threshold used in the SOV travel proportion model. This is the upper limit for tour lengths that are suitable for reallocation to non-motorized modes. PropSuitable: proportion of SOV travel suitable for non-motorized vehicle travel. This variable describes the proportion of SOV tours within the mileage threshold for which non-motorized vehicles might be substituted. This variable takes into account such factors as weather and trip purpose. The non-motorized vehicle model predicts the ownership and use of non-motorized vehicles (where non-motorized vehicles are bicycles, and also electric bicycles, segways and similar vehicles that are small, light-weight and can travel at bicycle speeds or slightly higher than bicycle speeds). The core concept of the model is that non-motorized vehicle usage will primarily be a substitute for short-distance SOV travel. Therefore, the model estimates the proportion of the household vehicle travel that occurs in short-distance SOV tours. The model determines the maximum potential for household VMT to be diverted to non-motorized vehicles, which is also dependent on the availability of non-motorized vehicles. Note that bike share programs (BSP) serve to increase the availability of non-motorized vehicles and can be taken into account by increasing the TargetProp variable. Use national estimates of non-motorized ownership if regional estimates of non-motorized ownership are not available (unless the region has notably atypical levels of bicycle usage). See Bicycle Ownership in the United States for an analysis of regional differences. Here is a snapshot of the file: DataItem DataValue TargetProp 0.2 Threshold 2 PropSuitable 0.1 Inputs Model Parameters Definitions 5.2.7.5 marea_parking_growth.csv Increase in parking cost and supply: This file contains information that allows the effects of policies such as workplace parking charges and cash-out buy-back programs to be tested. The input parameters are as follows and should be entered for both the base and future year: PropWorkParking: proportion of employees that park at work PropWorkCharged: proportion of employers that charge for parking PropCashOut: proportion of employment parking that is converted from being free to pay under a cash-out buy-back type of program PropOtherCharged: proportion of other parking that is not free ParkingCost.2000: average daily parking cost in 2000 year USD. In order to use base year dollars just replace 2000 in column labels with base year. This variable is the average daily parking cost for those who incur a fee to park. If the paid parking varies across the region, then the PkgCost value should reflect the average of those parking fees, but weighted by the supply  so if most parking is in the Center City, then the average will be heavily weighted toward the price in the Center City. Here is a snapshot of the file: Geo Year PropWorkParking PropWorkCharged PropCashOut PropOtherCharged ParkingCost.2000 Multnomah 2005 1 0.1 0 0.05 5 Multnomah 2035 1 0.1 0 0.05 5 Inputs Model Parameters Definitions 5.2.7.6 JSON Inputs 5.2.7.7 AutoCostGrowth % Increase in Auto Operating Cost (AutoCostGrowth): This parameter reflects the proportional increase in auto operating cost. This can be used to test different assumptions for future gas prices or the effects of increased gas taxes. A value of 1.5 multiplies base year operating costs by 1.5 and thus reflects a 50% increase. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;AutoCostGrowth&quot;, &quot;VALUE&quot;: &quot;1.5&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.7.8 FwyLaneMiGrowth FwyLaneMiGrowth: The variable indicates the percent increase in supply of freeways lane miles in the future year compared to base year. By default, the transportation supply is assumed to grow in line with population increase; therefore a value of 1 indicates growth in proportion with population growth. A value less than 1 indicates that there will be less freeway lane mile supply, per person, in the future. A value of 1 indicates faster freeway expansion than population growth. It should be defined in model_parameters.json as follows: { &quot;NAME&quot;: &quot;FwyLaneMiGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.7.9 ArtLaneMiGrowth ArtLaneMiGrowth: The variable indicates the percent increase in supply of arterial lane miles in the future year compared to base year. It is a similar value to freeway except that it measures arterial lane mile growth. It is also proportional to population growth. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;ArtLaneMiGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.7.10 BusRevMiPCGrowth BusRevMiPCGrowth: It is the percent increase in transit revenue miles per capita for bus. It behaves in a similar way to the freeway and rail values in that a value of 1 indicates per capita revenue miles stays constant. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BusRevMiPCGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.7.11 RailRevMiPCGrowth RailRevMiPCGrowth: It is the percent increase in transit revenue miles per capita for rail. This encompasses all rail modes, from light rail through to commuter rail. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;RailRevMiPCGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.7.12 VmtCharge Auto Operating Surcharge Per VMT (VmtCharge): It is a cost in cents per mile that would be levied on auto users through the form of a VMT charge. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;VmtCharge&quot;, &quot;VALUE&quot;: &quot;0.05&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/MI&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8 Model Parameters Users can modify these parameters to test alternative scenarios. For e.g.Â users can use model_veh_mpg_by_year.csv to test alternative vehicle development scenarios, such as improved technology and/or fuel economy standards that lead to higher fuel economies. 5.2.8.1 CSV Inputs 5.2.8.2 model_accident_rates.csv Accident Rates: Road safety impacts are calculated by factoring the amount of VMT. The following national average rates, from the Fatality Analysis Reporting System General Estimates System (2009) by US Department of Transportation, are applied to calculate the number of fatal and injury accidents and the value of property damage: Fatal: 1.14 per 100 Million Miles Traveled Injury: 51.35 per 100 Million Miles Traveled Property damage: 133.95 per 100 Million Miles Traveled Here is a snapshot of the file: Accident Rate Fatal 1.14 Injury 51.35 Property 133.95 Inputs Model Parameters Definitions 5.2.8.3 model_fuel_prop_by_veh.csv Vehicle VMT proportion by fuel (model_fuel_prop_by_veh.csv): The file contains allocation of VMT for each of the four road vehicle types that VERPAT represents (auto, light truck, bus, and heavy truck) to different fuel types (Diesel, CNG, Gasoline). This file is used in the calculations of fuel consumption. This file can be used to test alternative fuel scenarios by varying the shares of non-gasoline fuels. PropDiesel: The proportion of the fleet that uses diesel PropCng: The proportion of the fleet that uses CNG PropGas: The proportion of the fleet that uses gasoline Here is a snapshot of the file: VehType PropDiesel PropCng PropGas Auto 0.007 0 0.993 LtTruck 0.04 0 0.96 Bus 0.995 0.005 0 Truck 0.945 0.005 0.05 Inputs Model Parameters Definitions 5.2.8.4 model_fuel_composition_prop.csv Fuel composition: This file contains the composition of fuel used for each of the four road vehicle types that VERPAT represents (auto, light truck, bus, and heavy truck). This file is also used in the calculations of fuel consumption along with the aforementioned file. The column labels in the file are: GasPropEth: The average ethanol proportion in gasoline sold DieselPropBio: The average biodiesel proportion in diesel sold Here is a snapshot of the file: VehType GasPropEth DieselPropBio Auto 0.1 0.05 LtTruck 0.1 0.05 Bus 0.1 0.05 Truck 0.1 0.01 Inputs Model Parameters Definitions 5.2.8.5 model_fuel_co2.csv Emission Rate: The emissions rate file contains information on pump-to-wheels CO2 equivalent emissions by fuel type in grams per mega Joule of fuel energy content. There is one row for each fuel type: ULSD, biodiesel, RFG (reformulated gasoline), CARBOB (gasoline formulated to be blended with ethanol), ethanol, and CNG. This file is used to convert fuel use to CO2 equivalent emissions. Here is a snapshot of the file: Fuel Intensity ULSD 77.19 Biodiesel 76.81 RFG 75.65 CARBOB 75.65 Ethanol 74.88 Cng 62.14 Inputs Model Parameters Definitions 5.2.8.6 model_place_type_elasticities.csv This file contains elasticities for four performance metrics: VMT  Following the estimate of travel demand that incorporates induced demand, an adjustment is made to travel demand that accounts for changes in growth by the place types that are used in the model to describe urban form. These changes are interpreted as changes in design (intersection street density), accessibility (job accessibility by auto), distance to transit (nearest transit stop), density (population density) and diversity (land use mix). The effect on travel demand is determined as changes in VMT by these urban form categories, as shown in the table below. The elasticities that are shown in the table are multiplied by the D values for each place type. The D values are proportion values for each place type that are relative to the regional average, which is set to 1.0. VehicleTrips  The change in the number of vehicle trips is calculated using a set of elasticities from Index 4D Values (2001) that pivots from the current number of vehicle trips per capita based on the scenarios allocation of growth by place type. The elasticities shown in the table are applied to D values, which are proportional values for each place type that are relative to a regional average for that D value that is set to 1.0. The model reports the additional number of trips caused by the growth assumed in the scenario and not the regional total. TransitTrips  The change in the number of transit trips is calculated using a set of elasticities from Index 4D Values (2001) that pivots from the current number of transit trips per capita based on the scenarios allocation of growth by place type. The elasticities shown in the table are applied to D values, which are proportional values for each place type that are relative to a regional average for that D value that is set to 1.0. The model reports the additional number of trips caused by the growth assumed in the scenario and not the regional total. Walking  The elasticities shown in the table are applied to D values, which are proportional values for each place type that are relative to a regional average for that D value that is set to 1.0. The product of the elasticity and D value is applied to the place type growth quantities for the scenario to calculated the percentage increase or decrease in walking for new residents in the region relative to a the current place type distribution. Here is a snapshot of the file: Parameters VMT VehicleTrips TransitTrips Walking Density -0.04 -0.043 0.07 0.07 Diversity -0.09 -0.051 0.12 0.15 Design -0.12 -0.031 0.23 0.39 Regional_Accessibility -0.2 -0.036 0 0 Distance_to_Transit -0.05 0 0.29 0.15 Inputs Model Parameters Definitions 5.2.8.7 model_place_type_relative_values.csv This file contains the D values, which are proportional values for each of the 13 place types (Bzones) that are relative to a regional average, for each of the five Ds used in VERPAT - design (intersection street density), accessibility (job accessibility by auto), distance to transit (nearest transit stop), density (population density) and diversity (land use mix). Here is a snapshot of the file: Geo Density Diversity Design Regional_Accessibility Distance_to_Transit Rur 0.5 0.5 0.5 0.5 0.5 Sub_R 0.75 0.75 0.75 0.75 0.75 Sub_E 0.75 0.75 0.75 0.75 0.75 Sub_M 1 1 1 0.75 0.75 Sub_T 1 1 1 1 1 CIC_R 1.2 1.2 1.2 1.2 1 CIC_E 1.2 1.2 1.2 1.2 1 CIC_M 1.2 1.2 1.2 1.2 1 CIC_T 1.2 1.2 1.2 1.2 1.2 UC_R 1.5 1.2 1.5 1.5 1.2 UC_E 1.5 1.2 1.5 1.5 1.2 UC_M 1.5 1.5 1.5 1.5 1.2 UC_T 1.5 1.5 1.5 1.5 1.5 Inputs Model Parameters Definitions 5.2.8.8 model_tdm_ridesharing.csv Travel Demand Management: Ridesharing: The ridesharing Travel Demand Management file contains parameters describing the effectiveness of ridesharing programs by place type. The proportion of employees participating in the ridesharing program is a policy input. This is converted into a proportion of working-age persons by using an assumed labor force participation rate (0.65) to sample working-age persons in households. The ridesharing sub-model then computes the anticipated level of VMT reduction resulting from the implementation of ridesharing, based on the place type the household lives in, using the effectiveness values shown in this parameter file. Previous studies have determined that the level of ridesharing participation will be less in the rural and suburban areas, as compared to the more-urban areas. Typically, more people will carpool in the more urbanized areas due to the presence of parking charges, potential difficulties in finding parking, and other disincentives that are typically present in more urbanized areas. Here is a snapshot of the file: ModelGeo Effectiveness Rur 0 Sub 0.05 CIC 0.1 UC 0.15 Inputs Model Parameters Definitions 5.2.8.9 model_tdm_transit.csv Travel Demand Management: Transit Fares: The transit fare Travel Demand Management files are parameters for the effectiveness (level of VMT reduction) and fare subsidy values for employer. The subsidized/discounted transit model begins by evaluating the level of participation within the region. Monte Carlo processes are used to identify which households participate in transit pass programs. The proportion of employees participating in this program is a policy input. This is converted into a proportion of working-age persons by using an assumed labor force participation rate (0.65) to sample working-age persons in households. The model then allows the selection of one of four potential subsidy levels (also a policy inputs), which influence the level of VMT reduction based on the level of subsidy applied to the place type. The anticipated level of VMT reduction is then further reduced to account for the proportion of work travel in overall daily travel. Here is a snapshot of the file: ModelGeo Subsidy0 Subsidy1 Subsidy2 Subsidy3 Subsidy4 Rur 0 0 0 0 0 Sub 0 0.02 0.033 0.079 0.2 CIC 0 0.034 0.073 0.164 0.2 UC 0 0.062 0.129 0.2 0.2 Inputs Model Parameters Definitions 5.2.8.10 model_tdm_transitlevels.csv Travel Demand Management: Transit Subsidy Levels: This file contains the dollar value match to the subsidy levels used in model_tdm_transit.csv file. Here is a snapshot of the file: SubsidyLevel SubsidyValue.2000 Subsidy0 0 Subsidy1 0.75 Subsidy2 1.49 Subsidy3 2.98 Subsidy4 5.96 Inputs Model Parameters Definitions 5.2.8.11 model_tdm_vanpooling.csv Travel Demand Management: Vanpooling: This file contains parameters describing the effectiveness in terms of VMT reductions for vanpooling programs across three levels of employee involvement. The vanpool program sub-model operates by evaluating the likely level of participation. Monte Carlo processes are used to identify which households participate in vanpool programs. The proportion of employees participating in this program is a policy input. This is converted into a proportion of working-age persons by using an assumed labor force participation rate (0.65) to sample working-age persons in households. Those employers that would participate in the program are then categorized into three levels of involvement from low to medium to high. The level of involvement reflects the extent to which an employer would actively facilitate and promote vanpooling. For example, a low level of involvement might represent an employer who organizes only a minimal number of vanpools. The high level of involvement could represent an employer who has an extensive vanpooling program to cover a large number of employees. Based on the level of involvement, the reduction in VMT is estimated on the basis of the values in this file. Here is a snapshot of the file: VanpoolingParticipation VMTReduction Low 0.003 Medium 0.0685 High 0.134 Inputs Model Parameters Definitions 5.2.8.12 model_tdm_workschedule.csv Travel Demand Management: Work Schedule: This file contains parameters that describe the effectiveness for different participation levels for three different telecommuting or alternative work schedules. The telecommuting or alternative work schedule model first evaluates the likely level of participation throughout the region in terms of telecommuting or alternatively-works schedules. Monte Carlo processes are used to identify which households participate in telecommuting programs. The proportion of employees participating in this program is a policy input. This is converted into a proportion of working-age persons by using an assumed labor force participation rate (0.65) to sample working-age persons in households. The model then determines the type of programs that might be implemented. Three potential alternatives are offered including: 4/40 Schedule: 4 days per week with 40 hours per week 9/80 Schedule: working 4 days every other week with an average of 80 hours over 2 weeks Telecommuting: Workers may work 1 to 2 days a week remotely Once the option has been identified and the level of participation, the estimated VMT is determined on the basis of the parameters in this file. Here is a snapshot of the file: WorkSchedulePolicy Participation0 Participation1 Participation2 Participation3 Participation4 Participation5 Schedule980 0 0.0007 0.0021 0.0035 0.007 0.0175 Schedule440 0 0.0015 0.0045 0.007 0.015 0.0375 TelecommuteoneandhalfDays 0 0.0022 0.0066 0.011 0.022 0.055 Inputs Model Parameters Definitions 5.2.8.13 model_tdm_workschedulelevels.csv Travel Demand Management: Work Schedule Participation Levels: This file describes the proportion of employees participating in the program corresponding to the participation levels used in model_tdm_workschedule.csv file. Here is a snapshot of the file: ParticipationLevel ParticipationValue Participation0 0 Participation1 0.01 Participation2 0.03 Participation3 0.05 Participation4 0.1 Participation5 0.25 Inputs Model Parameters Definitions 5.2.8.14 model_transportation_costs.csv Transportation Costs: This file contains unit cost rates for transportation infrastructure investments and operating costs and transit fare revenue. The parameters are used in the calculations of the transportation costs performance metrics. The source for transit capital, operating costs, and fare revenue is the NTD, and in particular the National Transit Profile which is available on the NTDB website. Costs are available in a variety of index formats, e.g.Â cost per revenue mile or hour; cost per passenger trip is used in VERPAT. The source for highway infrastructure costs is FHWAs Highway Economic Requirements System model, or HERS. Information was obtained from Chapter 6 of the 2005 Technical Report for all US states (FHWA, 2005). Table 8-1 in HERS provides unit costs (per lane mile) for both Rural and Urban highway systems, and distinguishes among three functional classes: interstates, freeways and expressways; other principal arterials; and minor arterials and collectors. Costs estimates are provided for the following improvements: Reconstruction and widening Reconstruct pavement Resurface and widen lanes Resurface pavement Improve shoulders Additional choices are offered to distinguish between adding a lane at normal vs.Â high cost, and also for pavement realignment, also under normal vs.Â high cost conditions. For practical reasons, it was decided to use only new construction (which also includes adding lanes) costs as the basis for the cost estimates, and to ignore the categories of reconstruction, resurfacing, and realignment. These construction costs include right of way, construction, and a small allowance for bridges and support facilities. The infrastructure costs focus only on the urban system, not rural, which also makes it possible to differentiate by three size classes: Small Urban, Small Urbanized, and Large Urbanized. The numbers from HERS are in 2002 dollars; FHWA advises escalation to current dollars using its NHCCI, which is available online at http://www.fhwa.dot.gov/policyinformation/nhcci.cfm); the report in VERPAT escalates uses this Index to escalate to 2010 values. The parameter values in this file are average values per lane mile, simplifying the calculations of highway costs to just differentiate investments in freeway vs.Â arterial functional class roads. Here is a snapshot of the file: SupplyClass CapCosts.2000 OpCosts.2000 Fare.2000 Freeway 17 0 0 Arterial 7 0 0 Bus 0.71 3.4 0.91 Rail 5.11 4.87 2.19 Inputs Model Parameters Definitions 5.2.8.15 model_veh_mpg_by_year.csv Vehicle fuel economy (model_veh_mpg_by_year.csv): This file contains the estimates and forecasts of average fuel economy and power economy in miles per gallon for autos, light trucks, heavy trucks (trucks) and miles per kilowatt for trains by vehicle model year. Note that this is not the fleet average for that year. It is the average for new vehicles sold in that year. The fuel economy is the same for all fuel types and is measured in gasoline equivalent gallons (i.e.Â energy content of a gallon of gasoline). This file is used in the calculations of fuel consumption. Here is a snapshot of the file: ModelYear AutoMpg LtTruckMpg TruckMpg BusMpg TrainMpg 1975 15.1 12.7 5.1 4.2 0.098266 1976 16.6 13.2 5.1 4.1 0.098266 1977 17.4 14.1 5.1 4.1 0.098266 1978 19.2 13.7 5.1 4 0.098266 2046 63.7 41.1 5.6 4.8 0.121191 2047 63.7 41.1 5.6 4.8 0.121191 2048 63.7 41.1 5.6 4.8 0.121191 2049 63.7 41.1 5.6 4.8 0.121191 2050 63.7 41.1 5.6 4.8 0.121191 Inputs Model Parameters Definitions 5.2.8.16 model_phev_range_prop_mpg_mpkwh.csv Plugin hybrid electric vehicles characteristics (model_phev_range_prop_mpg_mpkwh.csv): This file contains the estimates and forecasts of range, fuel efficiency (mpg), power efficiency (mpkwh), and proportions of automobiles and light trucks that are plugin hybrid electric vehicles by vehicle model year. Note that this is not the fleet average for that year. It is the average of new vehicles sold in that year. This file is used in identification of plugin hybrid electric and electric vehicles. Here is a snapshot of the file: ModelYear AutoPhevRange AutoPropPhev AutoMpkwh AutoMpg LtTruckPhevRange LtTruckPropPhev LtTruckMpkwh LtTruckMpg 1975 0 0 0 0 0 0 0 0 1976 0 0 0 0 0 0 0 0 1977 0 0 0 0 0 0 0 0 1978 0 0 0 0 0 0 0 0 1979 0 0 0 0 0 0 0 0 2045 40 0.66 4.375 74.5 40 0.586666667 2.875 58.2 2046 40 0.708 4.4 74.9 40 0.629333333 2.9 58.5 2047 40 0.756 4.425 75.3 40 0.672 2.925 58.8 2048 40 0.816 4.45 75.6 40 0.725333333 2.95 59.1 2049 40 0.864 4.475 76 40 0.768 2.975 59.3 2050 40 0.9 4.5 76.4 40 0.8 3 59.6 Inputs Model Parameters Definitions 5.2.8.17 model_hev_prop_mpg.csv Hybrid electric vehicles characteristics (model_hev_prop_mpg.csv): This file contains the estimates and forecasts of fuel efficiency (mpg), and proportions of automobiles and light trucks that are hybrid electric vehicles (that are neither plugin hybrid nor electric vehicle) by vehicle model year. Note that this is not the fleet average for that year. It is the average of new vehicles sold in that year. This file is used in identification of hybrid electric that are not plugin hybrid or electric vehicles. Here is a snapshot of the file: ModelYear AutoPropHev AutoHevMpg LtTruckPropHev LtTruckHevMpg 1975 0 0 0 0 1976 0 0 0 0 1977 0 0 0 0 1978 0 0 0 0 1979 0 0 0 0 1980 0 0 0 0 2046 0.981481481 74.2 0.736111111 55.4 2047 0.981481481 74.5 0.736111111 55.6 2048 1 74.9 0.75 55.9 2049 1 75.2 0.75 56.1 2050 1 75.5 0.75 56.3 Inputs Model Parameters Definitions 5.2.8.18 model_ev_range_prop_mpkwh.csv Electric vehicles characteristics (model_ev_range_prop_mpkwh.csv): This file contains the estimates and forecasts of range, power efficiency (mpkwh), and proportions of automobiles and light trucks that are electric vehicles by vehicle model year. Note that this is not the fleet average for that year. It is the average of new vehicles sold in that year. This file is used in identification of electric vehicles. Here is a snapshot of the file: ModelYear AutoRange AutoPropEv AutoMpkwh LtTruckRange LtTruckPropEv LtTruckMpkwh 1975 0 0 0 0 0 0 1976 0 0 0 0 0 0 1977 0 0 0 0 0 0 1978 0 0 0 0 0 0 1979 0 0 0 0 0 0 2046 277.5 0.72 4.4 185 0.56 2.9 2047 283.125 0.75 4.425 188.75 0.583333333 2.925 2048 288.75 0.795 4.45 192.5 0.618333333 2.95 2049 294.375 0.855 4.475 196.25 0.665 2.975 2050 300 0.9 4.5 200 0.7 3 Inputs Model Parameters Definitions 5.2.8.19 JSON Inputs 5.2.8.20 AnnVmtInflator Annual VMT inflator (AnnVmtInflator): Factor to convert VMT between annual and average daily amounts. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;AnnVmtInflator&quot;, &quot;VALUE&quot;: &quot;365&quot;, &quot;TYPE&quot; : &quot;integer&quot;, &quot;UNITS&quot; : &quot;DAYS&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8.21 BaseCostPerMile Base cost per mile (BaseCostPerMile): Base cost per mile in dollars for transportation costs used in the travel demand model to initially represent travel as close to unconstrained by transportation costs. The transportation costs are then fully constrained later in the model as travel reductions caused by budget constraints are estimated. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseCostPerMile&quot;, &quot;VALUE&quot;: &quot;0.04&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/MI&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8.22 DvmtBudgetProp Dvmt budget proportion (DvmtBudgetProp): The proportion of household budget that can be allocated to transportation spending. The travel demand models includes a constraint that reduces household travel if too high a proportion of household spending is spent on transportation. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;DvmtBudgetProp&quot;, &quot;VALUE&quot;: &quot;0.1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;, &#39;&gt; 1&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8.23 FuelCost Fuel cost (FuelCost): Average cost per gallon of fuel (before taxes are added). It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;FuelCost&quot;, &quot;VALUE&quot;: &quot;1.82&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8.24 KwhCost Power cost (KwhCost): Average cost per kwh of power consumption (before taxes are added). It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;KwhCost&quot;, &quot;VALUE&quot;: &quot;0.257&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/KWH&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8.25 GasTax Gas tax (GasTax): Average cost per gallon of fuel of gas taxes. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;GasTax&quot;, &quot;VALUE&quot;: &quot;0.424&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8.26 LtTruckProp Light Truck Proportions (LtTruckProp): The proportion of household vehicles that are light trucks (SUVs, pickup trucks) as opposed to autos. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;LtTruckProp&quot;, &quot;VALUE&quot;: &quot;0.45&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8.27 TranRevMiAdjFactor Transit revenue adjustment factor (TranRevMiAdjFactor): Factor to convert transit revenue miles (i.e.Â miles run in service on routes) to total transit vehicle miles operated to account for vehicle miles run while deadheading from depots to route endpoints. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;TranRevMiAdjFactor&quot;, &quot;VALUE&quot;: &quot;1.12&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8.28 TruckVmtGrowthMultiplier Truck vmt growth multiplier (TruckVmtGrowthMultiplier): Rate at which heavy truck VMT growth in relation to total regional household income growth in the region. A value of 1 indicates that heavy truck VMT grows at the same rate as total regional household income. A value less than 1 means slower growth in truck VMT, and greater than 1 means faster growth in truck VMT than total regional household income. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;TruckVmtGrowthMultiplier&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Inputs Model Parameters Definitions 5.2.8.29 WorkVmtProp Work VMT Proportion (WorkVmtProp): The proportion of household VMT that takes place for commute to work purposes; used to differentiate between travel purposes for use in estimating overall VMT reductions that are targeted at the commute to work. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;WorkVmtProp&quot;, &quot;VALUE&quot;: &quot;0.25&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;proportion&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3 Modules and Outputs The VERPAT model is a compilation of several packages, listed below, the inputs of which are described respectively. The inputs are classified into five categories: User input files: These are input files (model or scenario specific) that a user is recommended to change. User input model parameters: These are input parameters (model or scenario specific), defined in model_parameters.json, that a user is recommended to change. Fixed input files: These are input parameters specific to the model that are fixed. Fixed input model parameters: These are input parameters specific to the model, defined in model_parameters.json, that are fixed. Internal module inputs: These are inputs produced as output by other modules. MODULE PACKAGE RPAT CreateHouseholds VESimHouseholds household PredictWorkers VESimHouseholds household PredictIncome VESimHouseholds household CreateBaseSyntheticFirms VESyntheticFirms household CreateFutureSyntheticFirms VESyntheticFirms household CalculateBasePlaceTypes VELandUse urban CalculateFuturePlaceTypes VELandUse urban CreateBaseAccessibility VETransportSupply accessibility CreateFutureAccessibility VETransportSupply accessibility AssignVehicleFeatures VEHouseholdVehicles vehicle AssignVehicleFeaturesFuture VEHouseholdVehicles vehicle CalculateTravelDemand VEHouseholdTravel demand CalculateTravelDemandFuture VEHouseholdTravel demand CalculateCongestionBase VETransportSupplyUse congestion CalculateCongestionFuture VETransportSupplyUse congestion CalculateInducedDemand VEHouseholdTravel induced CalculatePolicyVmt VEHouseholdTravel policyvmt CalculateCongestionPolicy VETransportSupplyUse policycongestion ReportRPATMetrics VEReports metrics Top Definitions Inputs/Outputs 5.3.1 CreateHouseholds This module creates simulated households for a model using inputs of population by age group for each Azone and year. 5.3.1.1 User Input Files Household population (azone_hh_pop_by_age.csv): This file contains population estimates/forecasts by county and age cohort for each of the base and future years. The file format includes six age categories used by the population synthesis model: 0-14 15-19 20-29 30-54 55-64 65 Plus Future year data must be developed by the user; in many regions population forecasts are available from regional or state agencies and/or local academic sources. As with the employment data inputs the future data need not be county specific. Rather, regional totals by age group can be entered into the file with a value such as region entered in the county field. Here is a snapshot of the file: Geo Year Age0to14 Age15to19 Age20to29 Age30to54 Age55to64 Age65Plus Multnomah 2005 129869 41133 99664 277854 71658 72648 Multnomah 2035 169200 48800 144050 327750 116100 162800 Household size (azone_hhsize_targets.csv): This file contains the household specific targets. This contain two household specific attributes: AveHhSize: Average household size of households (non-group quarters) Prop1PerHh: Proportion of households (non-group quarters) having only one person Here is a snapshot of the file: Geo Year AveHhSize Prop1PerHh Multnomah 2005 NA NA Multnomah 2035 NA NA Group quarter population (azone_gq_pop_by_age.csv): This file contains group quarters population estimates/forecasts by county and age cohort for each of the base and future years. The file format includes six age categories used by the population synthesis model: 0-14 15-19 20-29 30-54 55-64 65 Plus Here is a snapshot of the file: Geo Year GrpAge0to14 GrpAge15to19 GrpAge20to29 GrpAge30to54 GrpAge55to64 GrpAge65Plus Multnomah 2005 0 0 0 1 0 0 Multnomah 2035 0 0 0 1 0 0 5.3.1.2 Module Outputs NumHh: Number of households (non-group quarters) HhId: Unique household ID HhSize: Number of persons Age0to14: Persons in 0 to 14 year old age group Age15to19: Persons in 15 to 19 year old age group Age20to29: Persons in 20 to 29 year old age group Age30to54: Persons in 30 to 54 year old age group Age55to64: Persons in 55 to 64 year old age group Age65Plus: Persons in 65 or older age group HhType: Coded household age composition (e.g.Â 2-1-0-2-0-0) or Grp for group quarters Top Definitions Inputs/Outputs 5.3.2 PredictWorkers This module assigns workers by age to households and to non-institutional group quarters population. It is a simple model which predicts workers as a function of the household type and age composition. There is no responsiveness to jobs or how changes in the job market and demographics might change the worker age composition, but the user can exogenously adjust the relative employment by age group, Azone, and year. The values are the proportions of persons in the age group who are workers relative to the proportions in the estimation year. 5.3.2.1 User Input Files Relative employment (azone_relative_employment.csv): This file contains ratio of workers to persons by age cohort in model year vs.Â estimation data year. This file contains five age cohorts: RelEmp15to19: Ratio of workers to persons age 15 to 19 in model year vs.Â in estimation data year RelEmp20to29: Ratio of workers to persons age 20 to 29 in model year vs.Â in estimation data year RelEmp30to54: Ratio of workers to persons age 30 to 54 in model year vs.Â in estimation data year RelEmp55to64: Ratio of workers to persons age 55 to 64 in model year vs.Â in estimation data year RelEmp65Plus: Ratio of workers to persons age 65 or older in model year vs.Â in estimation data year Here is a snapshot of the file: Geo Year RelEmp15to19 RelEmp20to29 RelEmp30to54 RelEmp55to64 RelEmp65Plus Multnomah 2005 1 1 1 1 1 Multnomah 2035 1 1 1 1 1 5.3.2.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HhType Coded household age composition (e.g.Â 2-1-0-2-0-0) or Grp for group quarters 5.3.2.3 Module Outputs Wkr15to19: Workers in 15 to 19 year old age group Wkr20to29: Workers in 20 to 29 year old age group Wkr30to54: Workers in 30 to 54 year old age group Wkr55to64: Workers in 55 to 64 year old age group Wkr65Plus: Workers in 65 or older age group Workers: Total number of workers NumWkr: Number of workers residing in the zone Top Definitions Inputs/Outputs 5.3.3 PredictIncome This module predicts the income for each simulated household given the number of workers in each age group and the average per capita income for the Azone where the household resides. 5.3.3.1 User Input Files Regional income (azone_per_cap_inc.csv): This file contains information on regional average per capita household (HHIncomePC) and group quarters (GQIncomePC) income by forecast year in year 2000 dollars. The data can be obtained from the U.S. Department of Commerce Bureau of Economic Analysis for the current year or from regional or state sources for forecast years. In order to use current year dollars just replace 2000 in column labels with current year. For example, if the data is obtained in year 2005 dollars then the column labels in the file shown below will become HHIncomePC.2005 and GQIncomePC.2005. Here is a snapshot of the file: Geo Year HHIncomePC.2000 GQIncomePC.2000 Multnomah 2005 32515 0 Multnomah 2035 40000 0 5.3.3.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhSize Number of persons VESimHouseholds CreateHouseholds HhType Coded household age composition (e.g.Â 2-1-0-2-0-0) or Grp for group quarters VESimHouseholds PredictWorkers Wkr15to19 Workers in 15 to 19 year old age group VESimHouseholds PredictWorkers Wkr20to29 Workers in 20 to 29 year old age group VESimHouseholds PredictWorkers Wkr30to54 Workers in 30 to 54 year old age group VESimHouseholds PredictWorkers Wkr55to64 Workers in 55 to 64 year old age group VESimHouseholds PredictWorkers Wkr65Plus Workers in 65 or older age group 5.3.3.3 Module Outputs Income: Total annual household (non-group &amp; group quarters) income in year 1999 dollars Top Definitions Inputs/Outputs 5.3.4 CreateBaseSyntheticFirms This module creates a set of firms for base year that represents the likely firm composition for the region, given the County Business Pattern data of firms by size and industry. Each firm is described in terms of the number of employees and its industry. 5.3.4.1 User Input Files Employment (azone_employment_by_naics.csv): This file contains employment data for each of the counties that make up the region. The file is derived from County Business Pattern (CBP) data by county. Industries are categorized by the North American Industrial Classification System (NAICS) 6 digit codes. Firm size categories are: n1_4: 1- 4 employees n5_9: 5-9 employees n10_19: 10-19 employees n20_99: 20-99 employees n100_249: 100-249 employees n250_499: 250-499 employees n500_999: 500-999 employees n1000: 1,000 or More Employee Size Class n1000_1: 1,000-1,499 employees n1000_2: 1,500-2,499 employees n1000_3: 2,500 to 4, 999 Employees n1000_4: Over 5,000 employees While the county field is required to be present, the business synthesis process does not require a meaningful value and therefore users may simply enter region. The consistency in the naming of the region should be maintained across all the files that contains the label county or Geo. It is also not necessary to use such detailed NAICS categories if those are not available; the current business synthesis model and subsequent models do not use this level of detail (although future versions of the model may) - at minimum, the number of establishments for all employment types can be provided by size category. Regions with significant employment in industries such as government and public administration that are not covered by the CBP may need to add records to the file that cover this type of employment to more accurately match employment totals in their region. The two additional fields contained in the file are: emp: Total number of employees est: Total number of establishments Here is the snapshot of the file: county year naics emp est n1_4 n5_9 n10_19 n20_49 n50_99 n100_249 n250_499 n500_999 n1000 n1000_1 n1000_2 n1000_3 n1000_4 Multnomah 2005 113110 0 5 2 1 0 2 0 0 0 0 0 0 0 0 0 Multnomah 2005 113310 0 3 2 0 0 1 0 0 0 0 0 0 0 0 0 Multnomah 2005 114111 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 Multnomah 2005 114112 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 Multnomah 2005 115114 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 Multnomah 2005 115210 0 4 3 1 0 0 0 0 0 0 0 0 0 0 0 Multnomah 2005 115310 0 5 2 0 1 1 1 0 0 0 0 0 0 0 0 Multnomah 2005 212319 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 Multnomah 2005 212321 0 4 1 1 1 1 0 0 0 0 0 0 0 0 0 5.3.4.2 Module Outputs naics: The six digit naics code esizecat: The employment size category numbus: The number of businesses emp: The number of employees in a business Top Definitions Inputs/Outputs 5.3.5 CreateFutureSyntheticFirms This module creates a set of firms for future year that represents the likely firm composition for the region, given the County Business Pattern data of firms by size and industry. Each firm is described in terms of the number of employees and its industry. 5.3.5.1 User Input Parameters Employment Growth (EmploymentGrowth): This variable represents a growth rate for employment in the region between the base year and the future year. A rate of 1 indicates no changes in overall employment, a value of more than 1 indicates some growth (e.g., 1.5 = 50% growth) and a value of less than 1 indicates decline in employment. It should be defined in model_parameters.json as follows: { &quot;NAME&quot;: &quot;EmploymentGrowth&quot;, &quot;VALUE&quot;: &quot;1.5&quot;, &quot;TYPE&quot;: &quot;double&quot;, &quot;UNITS&quot;: &quot;multiplier&quot;, &quot;PROHIBIT&quot;: &quot;&quot;, &quot;ISELEMENTOF&quot;: &quot;&quot; } 5.3.5.2 Internal Module Inputs Package Module Outputs Description VESyntheticFirms CreateBaseSyntheticFirms naics The six digit naics code VESyntheticFirms CreateBaseSyntheticFirms esizecat The employment size category VESyntheticFirms CreateBaseSyntheticFirms numbus The number of businesses VESyntheticFirms CreateBaseSyntheticFirms emp The number of employees in a business 5.3.5.3 Module Outputs naics: The six digit naics code esizecat: The employment size category numbus: The number of businesses emp: The number of employees in a business Top Definitions Inputs/Outputs 5.3.6 CalculateBasePlaceTypes Population and employment location characteristics are important variables in the vehicle ownership, travel demand, and accessibility models. There are four place types (urban core, Close-in Community, suburban, and rural and five location categories (residential, commercial, mixed-use, transit-oriented development, and Greenfield). This module utilizes models for households that were developed to estimate location characteristics using National Household Travel Survey data for the base year. Firms are currently allocated randomly to fit the employment allocation inputs since there are no national datasets from which to draw these relationships. 5.3.6.1 User Input Files Population and Jobs by Place Type (bzone_pop_emp_prop.csv): This file contains the distribution of population and employment among the 13 place types for base and future year. Each column, for each year, must sum to one (1). It is acceptable to have no land use (i.e.Â a value of 0) in certain categories. The yearly TAZ employment and population totals were summed by the 13 place type and then scaled to total one for both employment and population. Here is a snapshot of the file: Geo Year Pop Emp Rur 2005 0.05 0.1 Sub_R 2005 0.3 0 Sub_E 2005 0 0.2 Sub_M 2005 0.1 0.1 Sub_T 2005 0 0 CIC_R 2005 0.15 0 CIC_E 2005 0 0.2 CIC_M 2005 0.1 0.1 CIC_T 2005 0 0 UC_R 2005 0.1 0 UC_E 2005 0 0.1 UC_M 2005 0.1 0.1 UC_T 2005 0.1 0.1 Rur 2035 0.05 0.1 Sub_R 2035 0.3 0 Sub_E 2035 0 0.2 Sub_M 2035 0.1 0.1 Sub_T 2035 0 0 CIC_R 2035 0.15 0 CIC_E 2035 0 0.2 CIC_M 2035 0.1 0.1 CIC_T 2035 0 0 UC_R 2035 0.1 0 UC_E 2035 0 0.1 UC_M 2035 0.1 0.1 UC_T 2035 0.1 0.1 5.3.6.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Unique household ID VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HhSize Number of persons VESimHouseholds PredictIncome Income Total annual household (non-qroup &amp; group quarters) income in year 1999 dollars VESyntheticFirms CreateBaseSyntheticFirms naics The six digit naics code VESyntheticFirms CreateBaseSyntheticFirms esizecat The employment size category VESyntheticFirms CreateBaseSyntheticFirms numbus The number of businesses VESyntheticFirms CreateBaseSyntheticFirms emp The number of employees in a business 5.3.6.3 Module Outputs The outputs produced by this module is for base year. DrvLevels: The number of people in a household who can drive classified in three categories (Drv1, Drv2, Drv3Plus) HhPlaceTypes: A place type as assigned to the households EmpPlaceTypes: A place types as assigned to the businesses UrbanPop: Total population by place types UrbanEmp: Total employees by place types UrbanIncome: Total income by place types Top Definitions Inputs/Outputs 5.3.7 CalculateFuturePlaceTypes This module is similar to CalculateBasePlaceTypes module but utilizes the future year data to assign population and employment location characteristics. 5.3.7.1 User Input Files Population and Jobs by Place Type (bzone_pop_emp_prop.csv): This is the same file used as input in CalculateBasePlaceTypes module. 5.3.7.2 Internal Module Inputs: Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Unique household ID VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HhSize Number of persons VESimHouseholds PredictIncome Income Total annual household (non-qroup &amp; group quarters) income in year 1999 dollars VESyntheticFirms CreateFutureSyntheticFirms naics The six digit naics code VESyntheticFirms CreateFutureSyntheticFirms esizecat The employment size category VESyntheticFirms CreateFutureSyntheticFirms numbus The number of businesses VESyntheticFirms CreateFutureSyntheticFirms emp The number of employees in a business VELandUse CalculateBasePlaceTypes UrbanPop Total population by place types VELandUse CalculateBasePlaceTypes UrbanEmp Total employees by place types 5.3.7.3 Module Outputs The outputs produced by this module is for future year. DrvLevels: The number of people in a household who can drive classified in three categories (Drv1, Drv2, Drv3Plus) HhPlaceTypes: A place type as assigned to the households EmpPlaceTypes: A place types as assigned to the businesses UrbanPop: Total population by place types UrbanEmp: Total employees by place types UrbanIncome: Total income by place types Top Definitions Inputs/Outputs 5.3.8 CreateBaseAccessibility This module calculates freeway, arterial, and public transit supply levels for all years using existing (base) data. The number of lane miles of freeways and arterials is computed for each region based on the change in inventories for a particular scenario. For public transit, the inputs specify the change in transit revenue miles relative to the base. Inputs for each area also specify the revenue mile split between electrified rail and buses. 5.3.8.1 User Input Files Road lane miles (marea_lane_miles.csv): This file contains the amount of transportation supply by base year in terms of lane miles of freeways and arterial roadways in the region. The base year data is duplicated for future year. Freeway and Arterial are total lane miles for those functional classes in the region. These data can be derived from the Federal Highway Administrations (FHWA) Highway Statistics data. Here is a snapshot of the file: Geo Year FwyLaneMi ArtLaneMi Multnomah 2005 250 900 Multnomah 2035 250 900 Transit revenue miles (marea_rev_miles_pc.csv): This file contains the amount of transportation supply by base year in terms of the revenue miles operating by the transit system in the region. The base year data is duplicated for future year. Bus and Rail are annual bus and rail revenue miles per capita for the region. These data can be derived from the National Transit Database, where the annual database contains a service table that has annual revenue mile data by mode for each transit operator. Here is a snapshot of the file: Geo Year BusRevMiPC RailRevMiPC Multnomah 2005 19 4 Multnomah 2035 19 4 5.3.8.2 Internal Module Inputs Package Module Outputs Description VELandUse CalculateBasePlaceTypes UrbanPop Total population by place types VELandUse CalculateFuturePlaceTypes UrbanPop Total population by place types 5.3.8.3 Module Outputs FwyLaneMiPC: Ratio of urbanized area freeway and expressway lane-miles to urbanized area population ArtLaneMiPC: Ratio of urbanized area arterial lane-miles to urbanized area population TranRevMiPC: Transit revenue miles per capita for the region BusRevMi: Bus revenue miles for the region RailRevMi: Rail revenue miles for the region Top Definitions Inputs/Outputs 5.3.9 CreateFutureAccessibility This module calculates freeway, arterial, and public transit supply levels for all years using model estimation of future data. 5.3.9.1 User Input Files Road lane miles (marea_lane_miles.csv): This file contains the amount of transportation supply by base year in terms of lane miles of freeways and arterial roadways in the region. The base year data is duplicated for future year. Freeway and Arterial are total lane miles for those functional classes in the region. These data can be derived from the Federal Highway Administrations (FHWA) Highway Statistics data. Here is a snapshot of the file: Geo Year FwyLaneMi ArtLaneMi Multnomah 2005 250 900 Multnomah 2035 250 900 Transit revenue miles (marea_rev_miles_pc.csv): This file contains the amount of transportation supply by base year in terms of the revenue miles operating by the transit system in the region. The base year data is duplicated for future year. Bus and Rail are annual bus and rail revenue miles per capita for the region. These data can be derived from the National Transit Database, where the annual database contains a service table that has annual revenue mile data by mode for each transit operator. Here is a snapshot of the file: Geo Year BusRevMiPC RailRevMiPC Multnomah 2005 19 4 Multnomah 2035 19 4 5.3.9.2 User Input Parameters FwyLaneMiGrowth: The variable indicates the percent increase in supply of freeways lane miles in the future year compared to base year. By default, the transportation supply is assumed to grow in line with population increase; therefore a value of 1 indicates growth in proportion with population growth. A value less than 1 indicates that there will be less freeway lane mile supply, per person, in the future. A value of 1 indicates faster freeway expansion than population growth. It should be defined in model_parameters.json as follows: { &quot;NAME&quot;: &quot;FwyLaneMiGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } ArtLaneMiGrowth: The variable indicates the percent increase in supply of arterial lane miles in the future year compared to base year. It is a similar value to freeway except that it measures arterial lane mile growth. It is also proportional to population growth. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;ArtLaneMiGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } BusRevMiPCGrowth: It is the percent increase in transit revenue miles per capita for bus. It behaves in a similar way to the freeway and rail values in that a value of 1 indicates per capita revenue miles stays constant. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BusRevMiPCGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } RailRevMiPCGrowth: It is the percent increase in transit revenue miles per capita for rail. This encompasses all rail modes, from light rail through to commuter rail. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;RailRevMiPCGrowth&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.9.3 Internal Module Inputs Package Module Outputs Description VELandUse CalculateBasePlaceTypes UrbanPop Total population by place types VELandUse CalculateFuturePlaceTypes UrbanPop Total population by place types 5.3.9.4 Module Outputs FwyLaneMiPCFuture: Ratio of urbanized area freeway and expressway lane-miles to urbanized area population calculated using model estimation of future data ArtLaneMiPCFuture: Ratio of urbanized area arterial lane-miles to urbanized area population calculated using model estimation of future data TranRevMiPCFuture: Transit revenue miles per capita for the region calculated using model estimation of future data BusRevMiFuture: Bus revenue miles for the region calculated using model estimation of future data RailRevMiFuture: Rail revenue miles for the region calculated using model estimation of future data Top Definitions Inputs/Outputs 5.3.10 AssignVehicleFeatures This module assigns each household a number of vehicles it is likely to own based on the number of persons of driving age in the household, whether only elderly persons live in the household, the income of the household, the population density where the household lives, the freeway supply, the transit supply, and whether the household is located in an urban mixed-use area. 5.3.10.1 User Input Files Vehicle fuel economy (model_veh_mpg_by_year.csv): This file contains the estimates and forecasts of average fuel economy and power economy in miles per gallon for autos, light trucks, heavy trucks (trucks) and miles per kilowatt for trains by vehicle model year. Note that this is not the fleet average for that year. It is the average for new vehicles sold in that year. The fuel economy is the same for all fuel types and is measured in gasoline equivalent gallons (i.e., energy content of a gallon of gasoline). This file is used in the calculations of fuel consumption. This file can be used to test alternative vehicle development scenarios, such as improved technology and/or fuel economy standards that lead to higher vehicle fuel economies. Here is a snapshot of the file: ModelYear AutoMpg LtTruckMpg TruckMpg BusMpg TrainMpg 1975 15.1 12.7 5.1 4.2 0.098266 1976 16.6 13.2 5.1 4.1 0.098266 1977 17.4 14.1 5.1 4.1 0.098266 1978 19.2 13.7 5.1 4 0.098266 2046 63.7 41.1 5.6 4.8 0.121191 2047 63.7 41.1 5.6 4.8 0.121191 2048 63.7 41.1 5.6 4.8 0.121191 2049 63.7 41.1 5.6 4.8 0.121191 2050 63.7 41.1 5.6 4.8 0.121191 5.3.10.2 User Input Parameters Light Truck Proportions (LtTruckProp): The proportion of household vehicles that are light trucks (SUVs, pickup trucks) as opposed to autos. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;LtTruckProp&quot;, &quot;VALUE&quot;: &quot;0.45&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.10.3 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Unique household ID VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HhSize Number of persons VESimHouseholds CreateHouseholds HhType Coded household age composition (e.g.Â 2-1-0-2-0-0) or Grp for group quarters VESimHouseholds PredictIncome Income Total annual household (non-qroup &amp; group quarters) income in year 1999 dollars VELandUse CalculateFuturePlaceTypes DrvLevels The number of people in a household who can drive classified in three categories (Drv1, Drv2, Drv3Plus) VELandUse CalculateFuturePlaceTypes HhPlaceTypes A place type as assigned to the households VETransportSupply CreateBaseAccessibility FwyLaneMiPC Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VETransportSupply CreateBaseAccessibility TranRevMiPC Transit revenue miles per capita for the region 5.3.10.4 Module Outputs VehId: Unique vehicle ID Type: Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) Age: Vehicle age in years Mileage: Mileage of vehicles (automobiles and light truck) DvmtProp: Proportion of average vehicle DVMT Vehicles: Number of automobiles and light trucks owned or leased by the household NumLtTrk: Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household NumAuto: Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household Top Definitions Inputs/Outputs 5.3.11 AssignVehicleFeaturesFuture This module is similar to AssignVehicleFeatures, but uses model estimation of future year data on population and transportation supply as a basis of the calculations. 5.3.11.1 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Unique household ID VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HhSize Number of persons VESimHouseholds CreateHouseholds HhType Coded household age composition (e.g.Â 2-1-0-2-0-0) or Grp for group quarters VESimHouseholds PredictIncome Income Total annual household (non-qroup &amp; group quarters) income in year 1999 dollars VELandUse CalculateFuturePlaceTypes DrvLevels The number of people in a household who can drive classified in three categories (Drv1, Drv2, Drv3Plus) VELandUse CalculateFuturePlaceTypes HhPlaceTypes A place type as assigned to the households VETransportSupply CreateFutureAccessibility FwyLaneMiPCFuture Ratio of urbanized area freeway and expressway lane-miles to urbanized area population calculated using future (estimated) data VETransportSupply CreateFutureAccessibility TranRevMiPCFuture Transit revenue miles per capita for the region calculated using future (estimated) data 5.3.11.2 Module Outputs VehIdFuture: Unique vehicle ID TypeFuture: Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) AgeFuture: Vehicle age in years MileageFuture: Mileage of vehicles (automobiles and light truck) DvmtPropFuture: Proportion of average vehicle DVMT VehiclesFuture: Number of automobiles and light trucks owned or leased by the household NumLtTrkFuture: Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household NumAutoFuture: Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household Top](#contents) Definitions Inputs/Outputs 5.3.12 CalculateTravelDemand This module calculates the average daily vehicle miles traveled, auto and transit trips for each household is modeled based on household information determined by previous modules for the base conditions. The model is sensitive to household income, population density of the neighborhood where the household resides, number of household vehicles, whether the household owns no vehicles, the levels of public transportation and freeway supplies in the region, the driving age population in the household, the presence of persons over age 65, and whether the neighborhood is characterized by mixed-use development. It also calculates truck and bus Vehicle Miles Traveled (VMT). Regional truck VMT is calculated based on changes in the regional household income. As a default, a one-to-one relationship between regional income growth and truck VMT growth is assumed. In other words, a doubling of total regional income would result in a doubling of truck VMT. Bus VMT is calculated from bus revenue miles that are factored up to total vehicle miles to account for miles driven in non-revenue service. 5.3.12.1 User Input Files Emission Rate (model_fuel_co2.csv): The emissions rate file contains information on pump-to-wheels CO2 equivalent emissions by fuel type in grams per mega Joule of fuel energy content. There is one row for each fuel type: ULSD, biodiesel, RFG (reformulated gasoline), CARBOB (gasoline formulated to be blended with ethanol), ethanol, and CNG. Electricity is an optional fuel type not displayed in the table. If the intensity for power generation is known then that can be entered at the end of the row with the Fuel column containing the word Electricity and the respective value next to it. This file is used to convert fuel use to CO2 equivalent emissions. Here is a snapshot of the file: Fuel Intensity ULSD 77.19 Biodiesel 76.81 RFG 75.65 CARBOB 75.65 Ethanol 74.88 Cng 62.14 Vehicle VMT proportion by fuel (model_fuel_prop_by_veh.csv): The file contains allocation of VMT for each of the four road vehicle types that VERPAT represents (auto, light truck, bus, and heavy truck) to different fuel types (Diesel, CNG, Gasoline). This file is used in the calculations of fuel consumption. This file can be used to test alternative fuel scenarios by varying the shares of non-gasoline fuels. PropDiesel: The proportion of the fleet that uses diesel PropCng: The proportion of the fleet that uses CNG PropGas: The proportion of the fleet that uses gasoline Here is a snapshot of the file: VehType PropDiesel PropCng PropGas Auto 0.007 0 0.993 LtTruck 0.04 0 0.96 Bus 0.995 0.005 0 Truck 0.945 0.005 0.05 Fuel composition (model_fuel_composition_prop.csv): This file contains the composition of fuel used for each of the four road vehicle types that VERPAT represents (auto, light truck, bus, and heavy truck). This file is also used in the calculations of fuel consumption along with the aforementioned file. The column labels in the file are: GasPropEth: The average ethanol proportion in gasoline sold DieselPropBio: The average biodiesel proportion in diesel sold Here is a snapshot of the file: VehType GasPropEth DieselPropBio Auto 0.1 0.05 LtTruck 0.1 0.05 Bus 0.1 0.05 Truck 0.1 0.01 Truck and bus vmt (region_truck_bus_vmt.csv): This file contains the regions proportion of VMT by truck and bus as well as the distribution of that VMT across functional classes (freeway, arterial, other). The file includes one row for bus VMT data and one row for Truck VMT data. It should be noted that it is not necessary to enter values in the PropVmt column for BusVmt as this is calculated using the values in the transportation_supply.csv user input file. The truck VMT proportion (PropVMT column, TruckVMT row) can be obtained from Highway Performance Monitoring System data and local sources or the regional travel demand model if one exists. The proportions of VMT by functional class can be derived from the Federal Highway Cost Allocation Study and data from transit operators. The Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II is used to calculate the average proportion of truck VMT by functional class. Data from transit authorities are used to calculate the proportions of bus VMT by urban area functional class. Here is a snapshot of the file: Type PropVmt Fwy Art Other BusVmt 0 0.15 0.591854 0.258146 TruckVmt 0.08 0.452028 0.398645 0.149327 Plugin hybrid electric vehicles characteristics (model_phev_range_prop_mpg_mpkwh.csv): This file contains the estimates and forecasts of range, fuel efficiency (mpg), power efficiency (mpkwh), and proportions of automobiles and light trucks that are plugin hybrid electric vehicles by vehicle model year. Note that this is not the fleet average for that year. It is the average of new vehicles sold in that year. This file is used in identification of plugin hybrid electric and electric vehicles. Here is a snapshot of the file: ModelYear AutoPhevRange AutoPropPhev AutoMpkwh AutoMpg LtTruckPhevRange LtTruckPropPhev LtTruckMpkwh LtTruckMpg 1975 0 0 0 0 0 0 0 0 1976 0 0 0 0 0 0 0 0 1977 0 0 0 0 0 0 0 0 1978 0 0 0 0 0 0 0 0 1979 0 0 0 0 0 0 0 0 2045 40 0.66 4.375 74.5 40 0.586666667 2.875 58.2 2046 40 0.708 4.4 74.9 40 0.629333333 2.9 58.5 2047 40 0.756 4.425 75.3 40 0.672 2.925 58.8 2048 40 0.816 4.45 75.6 40 0.725333333 2.95 59.1 2049 40 0.864 4.475 76 40 0.768 2.975 59.3 2050 40 0.9 4.5 76.4 40 Hybrid electric vehicles characteristics (model_hev_prop_mpg.csv): This file contains the estimates and forecasts of fuel efficiency (mpg), and proportions of automobiles and light trucks that are hybrid electric vehicles (that are neither plugin hybrid nor electric vehicle) by vehicle model year. Note that this is not the fleet average for that year. It is the average of new vehicles sold in that year. This file is used in identification of hybrid electric that are not plugin hybrid or electric vehicles. Here is a snapshot of the file: ModelYear AutoPropHev AutoHevMpg LtTruckPropHev LtTruckHevMpg 1975 0 0 0 0 1976 0 0 0 0 1977 0 0 0 0 1978 0 0 0 0 1979 0 0 0 0 1980 0 0 0 0 2046 0.981481481 74.2 0.736111111 55.4 2047 0.981481481 74.5 0.736111111 55.6 2048 1 74.9 0.75 55.9 2049 1 75.2 0.75 56.1 2050 1 75.5 0.75 56.3 Electric vehicles characteristics (model_ev_range_prop_mpkwh.csv): This file contains the estimates and forecasts of range, power efficiency (mpkwh), and proportions of automobiles and light trucks that are electric vehicles by vehicle model year. Note that this is not the fleet average for that year. It is the average of new vehicles sold in that year. This file is used in identification of electric vehicles. Here is a snapshot of the file: ModelYear AutoRange AutoPropEv AutoMpkwh LtTruckRange LtTruckPropEv LtTruckMpkwh 1975 0 0 0 0 0 0 1976 0 0 0 0 0 0 1977 0 0 0 0 0 0 1978 0 0 0 0 0 0 1979 0 0 0 0 0 0 2046 277.5 0.72 4.4 185 0.56 2.9 2047 283.125 0.75 4.425 188.75 0.583333333 2.925 2048 288.75 0.795 4.45 192.5 0.618333333 2.95 2049 294.375 0.855 4.475 196.25 0.665 2.975 2050 300 0.9 4.5 200 0.7 3 5.3.12.2 User Input Parameters Base cost per mile (BaseCostPerMile): Base cost per mile in dollars for transportation costs used in the travel demand model to initially represent travel as close to unconstrained by transportation costs. The transportation costs are then fully constrained later in the model as travel reductions caused by budget constraints are estimated. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseCostPerMile&quot;, &quot;VALUE&quot;: &quot;0.04&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/MI&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Dvmt budget proportion (DvmtBudgetProp): The proportion of household budget that can be allocated to transportation spending. The travel demand models includes a constraint that reduces household travel if too high a proportion of household spending is spent on transportation. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;DvmtBudgetProp&quot;, &quot;VALUE&quot;: &quot;0.1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;, &#39;&gt; 1&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Annual vmt inflator (AnnVmtInflator): Factor to convert VMT between annual and average daily amounts. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;AnnVmtInflator&quot;, &quot;VALUE&quot;: &quot;365&quot;, &quot;TYPE&quot; : &quot;integer&quot;, &quot;UNITS&quot; : &quot;DAYS&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Fuel cost (FuelCost): Average cost per gallon of fuel (before taxes are added). It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;FuelCost&quot;, &quot;VALUE&quot;: &quot;1.82&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Power cost (KwhCost): Average cost per kwh of power consumption (before taxes are added). It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;KwhCost&quot;, &quot;VALUE&quot;: &quot;0.257&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/KWH&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Gas tax (GasTax): Average cost per gallon of fuel of gas taxes. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;GasTax&quot;, &quot;VALUE&quot;: &quot;0.424&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT for the base year in thousands of miles. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. Light vehicle daily VMT can be estimated by subtracting truck and bus VMT from total VMT provided in the Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseLtVehDvmt&quot;, &quot;VALUE&quot;: &quot;27244&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;MI/DAY&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Dvmt proportion by functional class (BaseFwyArtProp): The proportions of daily VMT for light vehicles that takes place on freeways and arterials (i.e., the remainder of VMT takes place on lower functional class roads for the base year. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. The proportions of light vehicle daily VMT on freeways and arterials can be derived from the HPMS data. Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseFwyArtProp&quot;, &quot;VALUE&quot;: &quot;0.77&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;proportion&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;, &#39;&gt; 1&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Truck vmt growth multiplier (TruckVmtGrowthMultiplier): Rate at which heavy truck VMT growth in relation to total regional household income growth in the region. A value of 1 indicates that heavy truck VMT grows at the same rate as total regional household income. A value less than 1 means slower growth in truck VMT, and greater than 1 means faster growth in truck VMT than total regional household income. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;TruckVmtGrowthMultiplier&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.12.3 Fixed Input Parameters Carbon cost (CarbonCost): Average cost of green house gas emissions. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;CarbonCost&quot;, &quot;VALUE&quot;: &quot;0&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Vmt cost (VmtCost): Average cost of vehicle miles traveled. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;VmtCost&quot;, &quot;VALUE&quot;: &quot;0&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.12.4 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Unique household ID VESimHouseholds CreateHouseholds HhSize Number of persons VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds PredictIncome Income Total annual household (non-qroup &amp; group quarters) income in year 1999 dollars VELandUse CalculateBasePlaceTypes UrbanIncome Total income by place types VELandUse CalculateFuturePlaceTypes HhPlaceTypes A place type as assigned to the households VELandUse CalculateFuturePlaceTypes UrbanIncome Total income by place types VETransportSupply CreateBaseAccessibility FwyLaneMiPC Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VETransportSupply CreateBaseAccessibility TranRevMiPC Transit revenue miles per capita for the region VEHouseholdVehicles AssignVehicleFeatures VehId Unique vehicle ID VEHouseholdVehicles AssignVehicleFeatures Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleFeatures Mileage Mileage of vehicles (automobiles and light truck) VEHouseholdVehicles AssignVehicleFeatures DvmtProp Proportion of average vehicle DVMT VEHouseholdVehicles AssignVehicleFeatures Vehicles Number of automobiles and light trucks owned or leased by the household VEHouseholdVehicles AssignVehicleFeatures Age Age of the vehicles 5.3.12.5 Module Outputs TruckDvmt: Average daily vehicle miles traveled by trucks Dvmt (bzones): Average daily vehicle miles traveled by place types Dvmt (households): Average daily vehicle miles traveled by household Dvmt (vehicles): Average daily vehicle miles traveled by each vehicle EvDvmt (bzones): Average daily electric vehicle miles traveled by place types EvDvmt (vehicles): Average daily electric vehicle miles traveled by each vehicle HcDvmt (bzones): Average daily vehicle (ICE) miles traveled by place types HcDvmt (vehicles): Average daily vehicle (ICE) miles traveled by each vehicle FuelGallons: Average daily fuel consumption in gallons by each household FuelCo2e: Average daily Co2 equivalent greenhouse gas emissions by each household due to traditional fuel consumption ElecKwh: Average daily power consumption in kilowatt-hours by each household ElecCo2e: Average daily Co2 equivalent greenhouse gas emissions by each household due to power consumption MpKwh: Power efficiency of electric vehicles by each vehicle Powertrain: Powertrain of each vehicle. DailyParkingCost: Average daily parking cost by each household FutureCostPerMile: Total cost per mile for future year for each household Top Definitions Inputs/Outputs 5.3.13 CalculateTravelDemandFuture This module is similar to CalculateTravelDemand module but uses future year (estimated) data for transportation supply and for vehicles like number of vehicles, mileage, type, etc. 5.3.13.1 User Input Files Emission Rate (model_fuel_co2.csv): The emissions rate file contains information on pump-to-wheels CO2 equivalent emissions by fuel type in grams per mega Joule of fuel energy content. There is one row for each fuel type: ULSD, biodiesel, RFG (reformulated gasoline), CARBOB (gasoline formulated to be blended with ethanol), ethanol, and CNG. This file is used to convert fuel use to CO2 equivalent emissions. Here is a snapshot of the file: Fuel Intensity ULSD 77.19 Biodiesel 76.81 RFG 75.65 CARBOB 75.65 Ethanol 74.88 Cng 62.14 Vehicle VMT proportion by fuel (model_fuel_prop_by_veh.csv): The file contains allocation of VMT for each of the four road vehicle types that VERPAT represents (auto, light truck, bus, and heavy truck) to different fuel types (Diesel, CNG, Gasoline). This file is used in the calculations of fuel consumption. This file can be used to test alternative fuel scenarios by varying the shares of non-gasoline fuels. PropDiesel: The proportion of the fleet that uses diesel PropCng: The proportion of the fleet that uses CNG PropGas: The proportion of the fleet that uses gasoline Here is a snapshot of the file: VehType PropDiesel PropCng PropGas Auto 0.007 0 0.993 LtTruck 0.04 0 0.96 Bus 0.995 0.005 0 Truck 0.945 0.005 0.05 Fuel composition (model_fuel_composition_prop.csv): This file contains the composition of fuel used for each of the four road vehicle types that VERPAT represents (auto, light truck, bus, and heavy truck). This file is also used in the calculations of fuel consumption along with the aforementioned file. The column labels in the file are: GasPropEth: The average ethanol proportion in gasoline sold DieselPropBio: The average biodiesel proportion in diesel sold Here is a snapshot of the file: VehType GasPropEth DieselPropBio Auto 0.1 0.05 LtTruck 0.1 0.05 Bus 0.1 0.05 Truck 0.1 0.01 Truck and bus vmt (region_truck_bus_vmt.csv): This file contains the regions proportion of VMT by truck and bus as well as the distribution of that VMT across functional classes (freeway, arterial, other). The file includes one row for bus VMT data and one row for Truck VMT data. It should be noted that it is not necessary to enter values in the PropVmt column for BusVmt as this is calculated using the values in the transportation_supply.csv user input file. The truck VMT proportion (PropVMT column, TruckVMT row) can be obtained from Highway Performance Monitoring System data and local sources or the regional travel demand model if one exists. The proportions of VMT by functional class can be derived from the Federal Highway Cost Allocation Study and data from transit operators. The Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II is used to calculate the average proportion of truck VMT by functional class. Data from transit authorities are used to calculate the proportions of bus VMT by urban area functional class. Here is a snapshot of the file: Type PropVmt Fwy Art Other BusVmt 0 0.15 0.591854 0.258146 TruckVmt 0.08 0.452028 0.398645 0.149327 Plugin hybrid electric vehicles characteristics (model_phev_range_prop_mpg_mpkwh.csv): This file contains the estimates and forecasts of range, fuel efficiency (mpg), power efficiency (mpkwh), and proportions of automobiles and light trucks that are plugin hybrid electric vehicles by vehicle model year. Note that this is not the fleet average for that year. It is the average of new vehicles sold in that year. This file is used in identification of plugin hybrid electric and electric vehicles. Here is a snapshot of the file: ModelYear AutoPhevRange AutoPropPhev AutoMpkwh AutoMpg LtTruckPhevRange LtTruckPropPhev LtTruckMpkwh LtTruckMpg 1975 0 0 0 0 0 0 0 0 1976 0 0 0 0 0 0 0 0 1977 0 0 0 0 0 0 0 0 1978 0 0 0 0 0 0 0 0 1979 0 0 0 0 0 0 0 0 2045 40 0.66 4.375 74.5 40 0.586666667 2.875 58.2 2046 40 0.708 4.4 74.9 40 0.629333333 2.9 58.5 2047 40 0.756 4.425 75.3 40 0.672 2.925 58.8 2048 40 0.816 4.45 75.6 40 0.725333333 2.95 59.1 2049 40 0.864 4.475 76 40 0.768 2.975 59.3 2050 40 0.9 4.5 76.4 40 Hybrid electric vehicles characteristics (model_hev_prop_mpg.csv): This file contains the estimates and forecasts of fuel efficiency (mpg), and proportions of automobiles and light trucks that are hybrid electric vehicles (that are neither plugin hybrid nor electric vehicle) by vehicle model year. Note that this is not the fleet average for that year. It is the average of new vehicles sold in that year. This file is used in identification of hybrid electric that are not plugin hybrid or electric vehicles. Here is a snapshot of the file: ModelYear AutoPropHev AutoHevMpg LtTruckPropHev LtTruckHevMpg 1975 0 0 0 0 1976 0 0 0 0 1977 0 0 0 0 1978 0 0 0 0 1979 0 0 0 0 1980 0 0 0 0 2046 0.981481481 74.2 0.736111111 55.4 2047 0.981481481 74.5 0.736111111 55.6 2048 1 74.9 0.75 55.9 2049 1 75.2 0.75 56.1 2050 1 75.5 0.75 56.3 Electric vehicles characteristics (model_ev_range_prop_mpkwh.csv): This file contains the estimates and forecasts of range, power efficiency (mpkwh), and proportions of automobiles and light trucks that are electric vehicles by vehicle model year. Note that this is not the fleet average for that year. It is the average of new vehicles sold in that year. This file is used in identification of electric vehicles. Here is a snapshot of the file: ModelYear AutoRange AutoPropEv AutoMpkwh LtTruckRange LtTruckPropEv LtTruckMpkwh 1975 0 0 0 0 0 0 1976 0 0 0 0 0 0 1977 0 0 0 0 0 0 1978 0 0 0 0 0 0 1979 0 0 0 0 0 0 2046 277.5 0.72 4.4 185 0.56 2.9 2047 283.125 0.75 4.425 188.75 0.583333333 2.925 2048 288.75 0.795 4.45 192.5 0.618333333 2.95 2049 294.375 0.855 4.475 196.25 0.665 2.975 2050 300 0.9 4.5 200 0.7 3 5.3.13.2 User Input Parameters Base cost per mile (BaseCostPerMile): Base cost per mile in dollars for transportation costs used in the travel demand model to initially represent travel as close to unconstrained by transportation costs. The transportation costs are then fully constrained later in the model as travel reductions caused by budget constraints are estimated. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseCostPerMile&quot;, &quot;VALUE&quot;: &quot;0.04&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/MI&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Dvmt budget proportion (DvmtBudgetProp): The proportion of household budget that can be allocated to transportation spending. The travel demand models includes a constraint that reduces household travel if too high a proportion of household spending is spent on transportation. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;DvmtBudgetProp&quot;, &quot;VALUE&quot;: &quot;0.1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;, &#39;&gt; 1&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Annual vmt inflator (AnnVmtInflator): Factor to convert VMT between annual and average daily amounts. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;AnnVmtInflator&quot;, &quot;VALUE&quot;: &quot;365&quot;, &quot;TYPE&quot; : &quot;integer&quot;, &quot;UNITS&quot; : &quot;DAYS&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Fuel cost (FuelCost): Average cost per gallon of fuel (before taxes are added). It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;FuelCost&quot;, &quot;VALUE&quot;: &quot;1.82&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Power cost (KwhCost): Average cost per kwh of power consumption (before taxes are added). It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;KwhCost&quot;, &quot;VALUE&quot;: &quot;0.257&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/KWH&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Gas tax (GasTax): Average cost per gallon of fuel of gas taxes. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;GasTax&quot;, &quot;VALUE&quot;: &quot;0.424&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT for the base year in thousands of miles. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. Light vehicle daily VMT can be estimated by subtracting truck and bus VMT from total VMT provided in the Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseLtVehDvmt&quot;, &quot;VALUE&quot;: &quot;27244&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;MI/DAY&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Dvmt proportion by functional class (BaseFwyArtProp): The proportions of daily VMT for light vehicles that takes place on freeways and arterials (i.e., the remainder of VMT takes place on lower functional class roads for the base year. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. The proportions of light vehicle daily VMT on freeways and arterials can be derived from the HPMS data. Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseFwyArtProp&quot;, &quot;VALUE&quot;: &quot;0.77&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;proportion&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;, &#39;&gt; 1&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Truck vmt growth multiplier (TruckVmtGrowthMultiplier): Rate at which heavy truck VMT growth in relation to total regional household income growth in the region. A value of 1 indicates that heavy truck VMT grows at the same rate as total regional household income. A value less than 1 means slower growth in truck VMT, and greater than 1 means faster growth in truck VMT than total regional household income. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;TruckVmtGrowthMultiplier&quot;, &quot;VALUE&quot;: &quot;1&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.13.3 Fixed Input Parameters Carbon cost (CarbonCost): Average cost of green house gas emissions. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;CarbonCost&quot;, &quot;VALUE&quot;: &quot;0&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Vmt cost (VmtCost): Average cost of vehicle miles traveled. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;VmtCost&quot;, &quot;VALUE&quot;: &quot;0&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/GAL&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.13.4 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Unique household ID VESimHouseholds CreateHouseholds HhSize Number of persons VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds PredictIncome Income Total annual household (non-qroup &amp; group quarters) income in year 1999 dollars VELandUse CalculateBasePlaceTypes UrbanIncome Total income by place types VELandUse CalculateFuturePlaceTypes HhPlaceTypes A place type as assigned to the households VELandUse CalculateFuturePlaceTypes UrbanIncome Total income by place types VETransportSupply CreateFutureAccessibility FwyLaneMiPCFuture Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VETransportSupply CreateFutureAccessibility TranRevMiPCFuture Transit revenue miles per capita for the region VEHouseholdVehicles AssignVehicleFeaturesFuture VehIdFuture Unique vehicle ID VEHouseholdVehicles AssignVehicleFeaturesFuture TypeFuture Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleFeaturesFuture MileageFuture Mileage of vehicles (automobiles and light truck) VEHouseholdVehicles AssignVehicleFeaturesFuture DvmtPropFuture Proportion of average vehicle DVMT VEHouseholdVehicles AssignVehicleFeaturesFuture VehiclesFuture Number of automobiles and light trucks owned or leased by the household VEHouseholdVehicles AssignVehicleFeaturesFuture AgeFuture Age of the vehicles 5.3.13.5 Module Outputs TruckDvmtFuture: Average daily vehicle miles traveled by trucks estimated using model estimations of future year data DvmtFuture (bzones): Average daily vehicle miles traveled by place types estimated using model estimations of future year data DvmtFuture (households): Average daily vehicle miles traveled by household estimated using model estimations of future year data DvmtFuture (vehicles): Average daily vehicle miles traveled by each vehicle estimated using model estimations of future year data EvDvmtFuture (bzones): Average daily electric vehicle miles traveled by place types estimated using model estimations of future year data EvDvmtFuture (vehicles): Average daily electric vehicle miles traveled by each vehicle estimated using model estimations of future year data HcDvmtFuture (bzones): Average daily vehicle (ICE) miles traveled by place types estimated using model estimations of future year data HcDvmtFuture (vehicles): Average daily vehicle (ICE) miles traveled by each vehicle estimated using model estimations of future year data FuelGallonsFuture: Average daily fuel consumption in gallons by each household estimated using model estimations of future year data FuelCo2eFuture: Average daily Co2 equivalent greenhouse gas emissions by each household due to traditional fuel consumption estimated using model estimations of future year data ElecKwhFuture: Average daily power consumption in kilowatt-hours by each household estimated using model estimations of future year data ElecCo2eFuture: Average daily Co2 equivalent greenhouse gas emissions by each household due to power consumption estimated using model estimations of future year data MpKwhFuture: Power efficiency of electric vehicles by each vehicle estimated using model estimations of future year data PowertrainFuture: Powertrain of each vehicle estimated using model estimations of future year data DailyParkingCostFuture: Average daily parking cost by each household estimated using model estimations of future year data FutureCostPerMileFuture: Total cost per mile for future year for each household estimated using model estimations of future year data Top](#contents) Definitions Inputs/Outputs 5.3.14 CalculateCongestionBase This module calculates the amount of congestion using estimated data. Auto, and light truck VMT, truck VMT and bus VMT are allocated to freeways, arterials, and other roadways. Truck and bus VMT are allocated based on mode-specific data, and auto and light truck VMT are allocated based on a combination of factors and a model that is sensitive to the relative supplies of freeway and arterial lane miles. System-wide ratios of VMT to lane miles for freeways and arterials are used to allocate VMT to congestion levels using congestion levels defined by the Texas Transportation Institute for the Urban Mobility Report. Each freeway and arterial congestion level is associated with an average trip speed for conditions that do and do not include ITS treatment for incident management on the roadway. Overall average speeds by congestion level are calculated based on input assumptions about the degree of incident management. Speed vs.Â fuel efficiency relationships for light vehicles, trucks, and buses are used to adjust the fleet fuel efficiency averages computed for the region. 5.3.14.1 User Input Files Percent road miles with ITS treatment (azone_its_prop.csv): This file is an estimate of the proportion of road miles that have improvements which reduce incidents through ITS treatments in both the base and future years. Values entered should be between 0 and 1, with 1 indicating that 100% of road miles are treated. The ITS policy measures the effects of incident management supported by ITS. The ITS table is used to inform the congestion model and the travel demand model. The model uses the mean speeds with and without incidents to compute an overall average speed by road type and congestion level providing a simple level of sensitivity to the potential effects of incident management programs on delay and emissions. The ITS treatments are evaluated only on freeways and arterials. The ITS treatments that can be evaluated are those that the analyst considers will reduce non-recurring congestion due to incidents. This policy does not deal with other operational improvements such as signal coordination, or temporary capacity increases such as allowing shoulder use in the peak. Here is a snapshot of the file: Geo Year ITS Multnomah 2005 0 Multnomah 2035 0 Truck and bus vmt (region_truck_bus_vmt.csv): This file contains the regions proportion of VMT by truck and bus as well as the distribution of that VMT across functional classes (freeway, arterial, other). The file includes one row for bus VMT data and one row for Truck VMT data. It should be noted that it is not necessary to enter values in the PropVmt column for BusVmt as this is calculated using the values in the transportation_supply.csv user input file. The truck VMT proportion (PropVMT column, TruckVMT row) can be obtained from Highway Performance Monitoring System data and local sources or the regional travel demand model if one exists. The proportions of VMT by functional class can be derived from the Federal Highway Cost Allocation Study and data from transit operators. The Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II is used to calculate the average proportion of truck VMT by functional class. Data from transit authorities are used to calculate the proportions of bus VMT by urban area functional class. Here is a snapshot of the file: Type PropVmt Fwy Art Other BusVmt 0 0.15 0.591854 0.258146 TruckVmt 0.08 0.452028 0.398645 0.149327 5.3.14.2 User Input Parameters Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT for the base year in thousands of miles. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. Light vehicle daily VMT can be estimated by subtracting truck and bus VMT from total VMT provided in the Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseLtVehDvmt&quot;, &quot;VALUE&quot;: &quot;27244&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;MI/DAY&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Dvmt proportion by functional class (BaseFwyArtProp): The proportions of daily VMT for light vehicles that takes place on freeways and arterials (i.e., the remainder of VMT takes place on lower functional class roads for the base year. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. The proportions of light vehicle daily VMT on freeways and arterials can be derived from the HPMS data. Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseFwyArtProp&quot;, &quot;VALUE&quot;: &quot;0.77&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;proportion&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;, &#39;&gt; 1&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Transit revenue adjustment factor (TranRevMiAdjFactor): Factor to convert transit revenue miles (i.e.Â miles run in service on routes) to total transit vehicle miles operated to account for vehicle miles run while deadheading from depots to route endpoints. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;TranRevMiAdjFactor&quot;, &quot;VALUE&quot;: &quot;1.12&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.14.3 Internal Module Inputs Package Module Outputs Description VELandUse CalculateBasePlaceTypes UrbanPop Total population by place types VELandUse CalculateFuturePlaceTypes UrbanPop Total population by place types VETransportSupply CreateBaseAccessibility FwyLaneMiPC Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VETransportSupply CreateBaseAccessibility ArtLaneMiPC Ratio of urbanized area arterial lane-miles to urbanized area population VETransportSupply CreateBaseAccessibility TranRevMiPC Transit revenue miles per capita for the region VETransportSupply CreateBaseAccessibility BusRevMi Bus revenue miles for the region VETransportSupply CreateBaseAccessibility RailRevMi Rail revenue miles for the region VEHouseholdTravel CalculateTravelDemand TruckDvmt Average daily vehicle miles traveled by trucks VEHouseholdTravel CalculateTravelDemand Dvmt (bzones) Average daily vehicle miles traveled by place types 5.3.14.4 Module Outputs LtVehDvmt: Daily vehicle miles travelled by light vehicles in the region BusDvmt: Daily vehicle miles travelled by bus in the region MpgAdjLtVeh: Average fuel efficiency adjustment for light vehicles in the region MpgAdjBus: Average fuel efficiency adjustment for buses in the region MpgAdjTruck: Average fuel efficiency adjustment for heavy trucks in the region MpKwhAdjLtVehEv: Average power efficiency adjustment for electric light vehicles in the region MpKwhAdjLtVehHev: Average power efficiency adjustment for hybrid electric light vehicles in the region MpKwhAdjBus: Average power efficiency adjustment for buses in the region MpKwhAdjTruck: Average power efficiency adjustment for heavy trucks in the region VehHrLtVeh: Total vehicle travel time for light vehicles in the region VehHrBus: Total vehicle travel time for buses in the region VehHrTruck: Total vehicle travel time for heavy trucks in the region AveSpeedLtVeh: Average speed for light vehicles in the region AveSpeedBus: Average speed for buses in the region AveSpeedTruck: Average speed for heavy trucks in the region FfVehHrLtVeh: Average free-flow travel time for light vehicles in the region FfVehHrBus: Average free-flow travel time for buses in the region FfVehHrTruck: Average free-flow travel time for heavy trucks in the region DelayVehHrLtVeh: Total vehicle delay time for light vehicles in the region DelayVehHrBus: Total vehicle delay time for buses in the region DelayVehHrTruck: Total vehicle delay time for heavy trucks in the region MpgAdjHh: Average fuel efficiency adjustment for households in the region MpKwhAdjEvHh: Average power efficiency adjustment for electric vehicles for households in the region MpKwhAdjHevHh: Average power efficiency adjustment for hybrid electric vehicles for households in the region LtVehDvmtFactor: Light vehicle Dvmt factor adjustment factor Top](#contents) Definitions Inputs/Outputs 5.3.15 CalculateCongestionFuture This module is similar to CalculateCongestionBase module but uses model estimation of future transportation supply as the basis of calculations. 5.3.15.1 User Input Files Percent road miles with ITS treatment (azone_its_prop.csv): This file is an estimate of the proportion of road miles that have improvements which reduce incidents through ITS treatments in both the base and future years. Values entered should be between 0 and 1, with 1 indicating that 100% of road miles are treated. The ITS policy measures the effects of incident management supported by ITS. The ITS table is used to inform the congestion model and the travel demand model. The model uses the mean speeds with and without incidents to compute an overall average speed by road type and congestion level providing a simple level of sensitivity to the potential effects of incident management programs on delay and emissions. The ITS treatments are evaluated only on freeways and arterials. The ITS treatments that can be evaluated are those that the analyst considers will reduce non-recurring congestion due to incidents. This policy does not deal with other operational improvements such as signal coordination, or temporary capacity increases such as allowing shoulder use in the peak. Here is a snapshot of the file: Geo Year ITS Multnomah 2005 0 Multnomah 2035 0 Truck and bus vmt (region_truck_bus_vmt.csv): This file contains the regions proportion of VMT by truck and bus as well as the distribution of that VMT across functional classes (freeway, arterial, other). The file includes one row for bus VMT data and one row for Truck VMT data. It should be noted that it is not necessary to enter values in the PropVmt column for BusVmt as this is calculated using the values in the transportation_supply.csv user input file. The truck VMT proportion (PropVMT column, TruckVMT row) can be obtained from Highway Performance Monitoring System data and local sources or the regional travel demand model if one exists. The proportions of VMT by functional class can be derived from the Federal Highway Cost Allocation Study and data from transit operators. The Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II is used to calculate the average proportion of truck VMT by functional class. Data from transit authorities are used to calculate the proportions of bus VMT by urban area functional class. Here is a snapshot of the file: Type PropVmt Fwy Art Other BusVmt 0 0.15 0.591854 0.258146 TruckVmt 0.08 0.452028 0.398645 0.149327 5.3.15.2 User Input Parameters Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT for the base year in thousands of miles. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. Light vehicle daily VMT can be estimated by subtracting truck and bus VMT from total VMT provided in the Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseLtVehDvmt&quot;, &quot;VALUE&quot;: &quot;27244&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;MI/DAY&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Dvmt proportion by functional class (BaseFwyArtProp): The proportions of daily VMT for light vehicles that takes place on freeways and arterials (i.e., the remainder of VMT takes place on lower functional class roads for the base year. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. The proportions of light vehicle daily VMT on freeways and arterials can be derived from the HPMS data. Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseFwyArtProp&quot;, &quot;VALUE&quot;: &quot;0.77&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;proportion&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;, &#39;&gt; 1&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Transit revenue adjustment factor (TranRevMiAdjFactor): Factor to convert transit revenue miles (i.e.Â miles run in service on routes) to total transit vehicle miles operated to account for vehicle miles run while deadheading from depots to route endpoints. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;TranRevMiAdjFactor&quot;, &quot;VALUE&quot;: &quot;1.12&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.15.3 Internal Module Inputs Package Module Outputs Description VELandUse CalculateBasePlaceTypes UrbanPop Total population by place types VELandUse CalculateFuturePlaceTypes UrbanPop Total population by place types VETransportSupply CreateFutureAccessibility FwyLaneMiPCFuture Ratio of urbanized area freeway and expressway lane-miles to urbanized area population calculated using future (estimated) data VETransportSupply CreateFutureAccessibility ArtLaneMiPCFuture Ratio of urbanized area arterial lane-miles to urbanized area population calculated using future (estimated) data VETransportSupply CreateFutureAccessibility TranRevMiPCFuture Transit revenue miles per capita for the region calculated using future (estimated) data VETransportSupply CreateFutureAccessibility BusRevMiFuture Bus revenue miles for the region calculated using future (estimated) data VETransportSupply CreateFutureAccessibility RailRevMiFuture Rail revenue miles for the region calculated using future (estimated) data VEHouseholdTravel CalculateTravelDemandFuture TruckDvmtFuture Average daily vehicle miles traveled by trucks estimated using model estimations of future year data VEHouseholdTravel CalculateTravelDemandFuture DvmtFuture (bzones) Average daily vehicle miles traveled by place types estimated using model estimations of future year data VETransportSupplyUse CalculateCongestionBase LtVehDvmtFactor Light vehicle Dvmt factor adjustment factor 5.3.15.4 Module Outputs LtVehDvmtFuture: Daily vehicle miles travelled by light vehicles in the region calculated using model estimation of future data BusDvmtFuture: Daily vehicle miles travelled by bus in the region calculated using model estimation of future data MpgAdjLtVehFuture: Average fuel efficiency adjustment for light vehicles in the region calculated using model estimation of future data MpgAdjBusFuture: Average fuel efficiency adjustment for buses in the region calculated using model estimation of future data MpgAdjTruckFuture: Average fuel efficiency adjustment for heavy trucks in the region calculated using model estimation of future data VehHrLtVehFuture: Total vehicle travel time for light vehicles in the region calculated using model estimation of future data VehHrBusFuture: Total vehicle travel time for buses in the region calculated using model estimation of future data VehHrTruckFuture: Total vehicle travel time for heavy trucks in the region calculated using model estimation of future data AveSpeedLtVehFuture: Average speed for light vehicles in the region calculated using model estimation of future data AveSpeedBusFuture: Average speed for buses in the region calculated using model estimation of future data AveSpeedTruckFuture: Average speed for heavy trucks in the region calculated using model estimation of future data FfVehHrLtVehFuture: Average free-flow travel time for light vehicles in the region calculated using model estimation of future data FfVehHrBusFuture: Average free-flow travel time for buses in the region calculated using model estimation of future data FfVehHrTruckFuture: Average free-flow travel time for heavy trucks in the region calculated using model estimation of future data DelayVehHrLtVehFuture: Total vehicle delay time for light vehicles in the region calculated using model estimation of future data DelayVehHrBusFuture: Total vehicle delay time for buses in the region calculated using model estimation of future data DelayVehHrTruckFuture: Total vehicle delay time for heavy trucks in the region calculated using model estimation of future data MpgAdjHhFuture: Average fuel efficiency adjustment for households in the region calculated using model estimation of future data LtVehDvmtFactorFuture: Light vehicle Dvmt factor adjustment factor calculated using model estimation of future data Top Definitions Inputs/Outputs 5.3.16 CalculateInducedDemand Induced demand is calculated for changes in roadway supply in the near term as a function of speed, based on potential mode and route shifts to produce changes in VMT and in the longer term to include changes in vehicle ownership, still as a function of speed. This model does not include induced demand as a result of changes in growth that may occur as part of a smart growth scenario because the evidence is limited empirical evidence. 5.3.16.1 User Input Files Auto and transit trips per capita (region_trips_per_cap.csv): This file contains regional averages for auto and transit trips per day for the base year. Auto is the regional average of auto trips per capita, including drive alone and shared ride travel. This data can be derived from the National Household Travel Survey by region or from a local household travel survey or regional travel demand forecasting model. Transit is the regional average of transit trips per capita, including walk and drive access to transit. This data can be derived from the National Transit Database where the annual database contains a service table that has annual transit trip data for each transit operator or from a local household travel survey or regional travel demand forecasting model. Here is a snapshot of the files: Mode Trips Auto 3.2 Transit 0.4 Place type adjustments to travel demand (model_place_type_elasticities.csv): This file contains elasticities for four performance metrics: VMT  Following the estimate of travel demand that incorporates induced demand, an adjustment is made to travel demand that accounts for changes in growth by the place types that are used in the model to describe urban form. These changes are interpreted as changes in design (intersection street density), accessibility (job accessibility by auto), distance to transit (nearest transit stop), density (population density) and diversity (land use mix). The effect on travel demand is determined as changes in VMT by these urban form categories, as shown in the table below. The elasticities that are shown in the table are multiplied by the D values for each place type. The D values are proportion values for each place type that are relative to the regional average, which is set to 1.0. VehicleTrips  The change in the number of vehicle trips is calculated using a set of elasticities from Index 4D Values (2001) that pivots from the current number of vehicle trips per capita based on the scenarios allocation of growth by place type. The elasticities shown in the table are applied to D values, which are proportional values for each place type that are relative to a regional average for that D value that is set to 1.0. The model reports the additional number of trips caused by the growth assumed in the scenario and not the regional total. TransitTrips  The change in the number of transit trips is calculated using a set of elasticities from Index 4D Values (2001) that pivots from the current number of transit trips per capita based on the scenarios allocation of growth by place type. The elasticities shown in the table are applied to D values, which are proportional values for each place type that are relative to a regional average for that D value that is set to 1.0. The model reports the additional number of trips caused by the growth assumed in the scenario and not the regional total. Walking  The elasticities shown in the table are applied to D values, which are proportional values for each place type that are relative to a regional average for that D value that is set to 1.0. The product of the elasticity and D value is applied to the place type growth quantities for the scenario to calculated the percentage increase or decrease in walking for new residents in the region relative to a the current place type distribution. Here is a snapshot of the file: Parameters VMT VehicleTrips TransitTrips Walking Density -0.04 -0.043 0.07 0.07 Diversity -0.09 -0.051 0.12 0.15 Design -0.12 -0.031 0.23 0.39 Regional_Accessibility -0.2 -0.036 0 0 Distance_to_Transit -0.05 0 0.29 0.15 Place type adjustments to travel demand (model_place_type_relative_values.csv): This file contains the D values, which are proportional values for each of the 13 place types (Bzones) that are relative to a regional average, for each of the five Ds used in VERPAT - design (intersection street density), accessibility (job accessibility by auto), distance to transit (nearest transit stop), density (population density) and diversity (land use mix). Here is a snapshot of the file: Geo Density Diversity Design Regional_Accessibility Distance_to_Transit Rur 0.5 0.5 0.5 0.5 0.5 Sub_R 0.75 0.75 0.75 0.75 0.75 Sub_E 0.75 0.75 0.75 0.75 0.75 Sub_M 1 1 1 0.75 0.75 Sub_T 1 1 1 1 1 CIC_R 1.2 1.2 1.2 1.2 1 CIC_E 1.2 1.2 1.2 1.2 1 CIC_M 1.2 1.2 1.2 1.2 1 CIC_T 1.2 1.2 1.2 1.2 1.2 UC_R 1.5 1.2 1.5 1.5 1.2 UC_E 1.5 1.2 1.5 1.5 1.2 UC_M 1.5 1.5 1.5 1.5 1.2 UC_T 1.5 1.5 1.5 1.5 1.5 5.3.16.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds PredictIncome Income Total annual household (non-qroup &amp; group quarters) income in year 1999 dollars VELandUse CalculateBasePlaceTypes HhPlaceTypes A place type as assigned to the households VELandUse CalculateBasePlaceTypes UrbanPop Total population by place types VELandUse CalculateBasePlaceTypes UrbanEmp Total employees by place types VELandUse CalculateFuturePlaceTypes HhPlaceTypes A place type as assigned to the households VELandUse CalculateFuturePlaceTypes UrbanPop Total population by place types VELandUse CalculateFuturePlaceTypes UrbanEmp Total employees by place types VEHouseholdTravel CalculateTravelDemandFuture DvmtFuture (households) Average daily vehicle miles traveled by household estimated using model estimations of future year data 5.3.16.3 Module Outputs DvmtFuture (households): Average daily vehicle miles traveled by household estimated using model estimations of future year data DvmtFuture (bzones): Average daily vehicle miles traveled by place types estimated using model estimations of future year data DvmtPtAdj: Dvmt adjustment by place types Access: Growth in job access Equity: Growth in equity by income group VehicleTrips: Policy adjusted vehicle trips TransitTrips: Policy adjusted transit trips Walking: Growth in walking Top Definitions Inputs/Outputs 5.3.17 CalculatePolicyVmt This module calculates scenario travel demand. The average daily VMT for each household can be adjusted based on changes in growth patterns by place type, changes in auto operating cost, changes in road lane miles or transit revenue miles for any scenario. There are also a series of policy assumptions that can contribute to changes in VMT: pricing such as VMT charges or parking pricing, ITS strategies for freeways and arterials, and vanpool, telecommuting, ridesharing, and transit pass programs. All of these will contribute to shifts in travel demand for a given scenario. 5.3.17.1 User Input Files Percentage of employees offered commute options (region_commute_options.csv): This file contains assumptions about the availability and participation in work based travel demand management programs. The policies are ridesharing programs, transit pass programs, telecommuting or alternative work schedule programs, and vanpool programs. For each, the user enters the proportion of workers who participate (the data items with the Participation suffix). For one program, the transit subsidy, the user must also enter the subsidy level in dollars for the TransitSubsidyLevel data item. Here is a snapshot of the file: TDMProgram DataItem DataValue Ridesharing RidesharingParticipation 0.05 TransitSubsidy TransitSubsidyParticipation 0.1 TransitSubsidy TransitSubsidyLevel 1.25 WorkSchedule Schedule980Participation 0.01 WorkSchedule Schedule440Participation 0.01 WorkSchedule Telecommute1.5DaysParticipation 0.01 Vanpooling LowLevelParticipation 0.04 Vanpooling MediumLevelParticipation 0.01 Vanpooling HighLevelParticipation 0.01 Bicycling/light vehicles targets (region_light_vehicles.csv): This file contains input data for the non-motorized vehicle model. In VERPAT, non-motorized vehicles are bicycles, and also electric bicycles, segways, and similar vehicles that are small, light-weight and can travel at bicycle speeds or slightly higher. The parameters are as follows: TargetProp: non-motorized vehicle ownership rate (average ratio of non-motorized vehicles to driver age population) Threshold: single-occupant vehicle (SOV) tour mileage threshold used in the SOV travel proportion model. This is the upper limit for tour lengths that are suitable for reallocation to non-motorized modes. PropSuitable: proportion of SOV travel suitable for non-motorized vehicle travel. This variable describes the proportion of SOV tours within the mileage threshold for which non-motorized vehicles might be substituted. This variable takes into account such factors as weather and trip purpose. The non-motorized vehicle model predicts the ownership and use of non-motorized vehicles (where non-motorized vehicles are bicycles, and also electric bicycles, segways and similar vehicles that are small, light-weight and can travel at bicycle speeds or slightly higher than bicycle speeds). The core concept of the model is that non-motorized vehicle usage will primarily be a substitute for short-distance SOV travel. Therefore, the model estimates the proportion of the household vehicle travel that occurs in short-distance SOV tours. The model determines the maximum potential for household VMT to be diverted to non-motorized vehicles, which is also dependent on the availability of non-motorized vehicles. Note that bike share programs (BSP) serve to increase the availability of non-motorized vehicles and can be taken into account by increasing the TargetProp variable. Use national estimates of non-motorized ownership if regional estimates of non-motorized ownership are not available (unless the region has notably atypical levels of bicycle usage). See Bicycle Ownership in the United States for an analysis of regional differences. Here is a snapshot of the file: DataItem DataValue TargetProp 0.2 Threshold 2 PropSuitable 0.1 Increase in parking cost and supply (marea_parking_growth.csv): This file contains information that allows the effects of policies such as workplace parking charges and cash-out buy-back programs to be tested. The input parameters are as follows and should be entered for both the base and future year: PropWrkPkg: proportion of employees that park at work PropWrkChrgd: proportion of employers that charge for parking PropCashOut: proportion of employment parking that is converted from being free to pay under a cash-out buy-back type of program PrkOthChrgd: proportion of other parking that is not free PkgCost: average daily parking cost. This variable is the average daily parking cost for those who incur a fee to park. If the paid parking varies across the region, then the PkgCost value should reflect the average of those parking fees, but weighted by the supply  so if most in the Center City, then the average will be heavily weighted toward the price in the Center City. Here is a snapshot of the file: Geo Year PropWorkParking PropWorkCharged PropCashOut PropOtherCharged ParkingCost.2000 Multnomah 2005 1 0.1 0 0.05 5 Multnomah 2035 1 0.1 0 0.05 5 Travel Demand Management: Ridesharing (model_tdm_ridesharing.csv): The ridesharing Travel Demand Management file contains parameters describing the effectiveness of ridersharing programs by place type. The proportion of employees participating in the ridesharing program is a policy input. This is converted into a proportion of working-age persons by using an assumed labor force participation rate (0.65) to sample working-age persons in households. The ridesharing submodel then computes the anticipated level of VMT reduction resulting from the implementation of ridesharing, based on the place type the household lives in, using the effectiveness values shown in this parameter file. Previous studies have determined that the level of ridesharing participation will be less in the rural and suburban areas, as compared to the more-urban areas. Typically, more people will carpool in the more urbanized areas due to the presence of parking charges, potential difficulties in finding parking, and other disincentives that are typically present in more urbanized areas. Here is a snapshot of the file: ModelGeo Effectiveness Rur 0 Sub 0.05 CIC 0.1 UC 0.15 Travel Demand Management: Transit Fares (model_tdm_transit.csv): The transit fare Travel Demand Management files are parameters for the effectiveness (level of VMT reduction) and fare subsidy values for employer. The subsidized/discounted transit model begins by evaluating the level of participation within the region. Monte Carlo processes are used to identify which households participate in transit pass programs. The proportion of employees participating in this program is a policy input. This is converted into a proportion of working-age persons by using an assumed labor force participation rate (0.65) to sample working-age persons in households. The model then allows the selection of one of four potential subsidy levels (also a policy inputs), which influence the level of VMT reduction based on the level of subsidy applied to the place type. The anticipated level of VMT reduction is then further reduced to account for the proportion of work travel in overall daily travel. Here is a snapshot of the file: ModelGeo Subsidy0 Subsidy1 Subsidy2 Subsidy3 Subsidy4 Rur 0 0 0 0 0 Sub 0 0.02 0.033 0.079 0.2 CIC 0 0.034 0.073 0.164 0.2 UC 0 0.062 0.129 0.2 0.2 Travel Demand Management: Transit Subsidy Levels (model_tdm_transitlevels.csv): This file contains the dollar value match to the subsidy levels used in model_tdm_transit.csv file. Here is a snapshot of the file: SubsidyLevel SubsidyValue.2000 Subsidy0 0 Subsidy1 0.75 Subsidy2 1.49 Subsidy3 2.98 Subsidy4 5.96 Travel Demand Management: Vanpooling (model_tdm_vanpooling.csv): This file contains parameters describing the effectiveness in terms of VMT reductions for vanpooling programs across three levels of employee involvement. The vanpool program submodel operates by evaluating the likely level of participation. Monte Carlo processes are used to identify which households participate in vanpool programs. The proportion of employees participating in this program is a policy input. This is converted into a proportion of working-age persons by using an assumed labor force participation rate (0.65) to sample working-age persons in households. Those employers that would participate in the program are then categorized into three levels of involvement from low to medium to high. The level of involvement reflects the extent to which an employer would actively facilitate and promote vanpooling. For example, a low level of involvement might represent an employer who organizes only a minimal number of vanpools. The high level of involvement could represent an employer who has an extensive vanpooling program to cover a large number of employees. Based on the level of involvement, the reduction in VMT is estimated on the basis of the values in this file. Here is a snapshot of the file: VanpoolingParticipation VMTReduction Low 0.003 Medium 0.0685 High 0.134 Travel Demand Management: Work Schedule (model_tdm_workschedule.csv): This file contains parameters that describe the effectiveness for different participation levels for three different telecommuting or alternative work schedules. The telecommuting or alternative work schedule model first evaluates the likely level of participation throughout the region in terms of telecommuting or alternatively-works schedules. Monte Carlo processes are used to identify which households participate in telecommuting programs. The proportion of employees participating in this program is a policy input. This is converted into a proportion of working-age persons by using an assumed labor force participation rate (0.65) to sample working-age persons in households. The model then determines the type of programs that might be implemented. Three potential alternatives are offered including: 4/40 Schedule: 4 days per week with 40 hours per week 9/80 Schedule: working 4 days every other week with an average of 80 hours over 2 weeks Telecommuting: Workers may work 1 to 2 days a week remotely Once the option has been identified and the level of participation, the estimated VMT is determined on the basis of the parameters in this file. Here is a snapshot of the file: WorkSchedulePolicy Participation0 Participation1 Participation2 Participation3 Participation4 Participation5 Schedule980 0 0.0007 0.0021 0.0035 0.007 0.0175 Schedule440 0 0.0015 0.0045 0.007 0.015 0.0375 TelecommuteoneandhalfDays 0 0.0022 0.0066 0.011 0.022 0.055 Travel Demand Management: Work Schedule Participation Levels (model_tdm_workschedulelevels.csv): This file describes the proportion of employees participating in the program corresponding to the participation levels used in model_tdm_workschedule.csv file. Here is a snapshot of the file: ParticipationLevel ParticipationValue Participation0 0 Participation1 0.01 Participation2 0.03 Participation3 0.05 Participation4 0.1 Participation5 0.25 5.3.17.2 User Input Parameters: % Increase in Auto Operating Cost (AutoCostGrowth): This parameter reflects the proportional increase in auto operating cost. This can be used to test different assumptions for future gas prices or the effects of increased gas taxes. A value of 1.5 multiplies base year operating costs by 1.5 and thus reflects a 50% increase. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;AutoCostGrowth&quot;, &quot;VALUE&quot;: &quot;1.5&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Auto Operating Surcharge Per VMT (VmtCharge): It is a cost in cents per mile that would be levied on auto users through the form of a VMT charge. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;VmtCharge&quot;, &quot;VALUE&quot;: &quot;0.05&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;USD/MI&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Work VMT Proportion (WorkVmtProp): The proportion of household VMT that takes place for commute to work purposes; used to differentiate between travel purposes for use in estimating overall VMT reductions that are targeted at the commute to work. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;WorkVmtProp&quot;, &quot;VALUE&quot;: &quot;0.25&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;proportion&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.17.3 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Unique household ID VESimHouseholds CreateHouseholds HhSize Number of persons VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds PredictIncome Income Total annual household (non-qroup &amp; group quarters) income in year 1999 dollars VELandUse CalculateFuturePlaceTypes HhPlaceTypes A place type as assigned to the households VELandUse CalculateFuturePlaceTypes UrbanPop Total population by place types VELandUse CalculateFuturePlaceTypes UrbanEmp Total employees by place types VELandUse CalculateFuturePlaceTypes UrbanIncome Total income by place types VETransportSupply CreateFutureAccessibility FwyLaneMiPCFuture Ratio of urbanized area freeway and expressway lane-miles to urbanized area population calculated using future (estimated) data VETransportSupply CreateFutureAccessibility ArtLaneMiPCFuture Ratio of urbanized area arterial lane-miles to urbanized area population calculated using future (estimated) data VETransportSupply CreateFutureAccessibility TranRevMiPCFuture Transit revenue miles per capita for the region calculated using future (estimated) data VETransportSupply CreateFutureAccessibility BusRevMiFuture Bus revenue miles for the region calculated using future (estimated) data VETransportSupply CreateFutureAccessibility RailRevMiFuture Rail revenue miles for the region calculated using future (estimated) data VEHouseholdVehicles AssignVehicleFeaturesFuture VehIdFuture Unique vehicle ID VEHouseholdVehicles AssignVehicleFeaturesFuture VehiclesFuture Number of automobiles and light trucks owned or leased by the household VEHouseholdVehicles AssignVehicleFeaturesFuture NumLtTrkFuture Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VEHouseholdVehicles AssignVehicleFeaturesFuture NumAutoFuture Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household VEHouseholdTravel CalculateTravelDemandFuture DvmtFuture (vehicles) Average daily vehicle miles traveled by each vehicle estimated using model estimations of future year data VEHouseholdTravel CalculateTravelDemandFuture FuelGallonsFuture Average daily fuel consumption in gallons by each household estimated using model estimations of future year data VEHouseholdTravel CalculateTravelDemandFuture FuelCo2eFuture Average daily Co2 equivalent greenhouse gas emissions by each household estimated using model estimations of future year data VEHouseholdTravel CalculateTravelDemandFuture FutureCostPerMileFuture Total cost per mile for future year for each household estimated using model estimations of future year data VETransportSupplyUse CalculateCongestionFuture MpgAdjLtVehFuture Average fuel efficiency adjustment for light vehicles in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture MpgAdjBusFuture Average fuel efficiency adjustment for buses in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture MpgAdjTruckFuture Average fuel efficiency adjustment for heavy trucks in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture VehHrLtVehFuture Total vehicle travel time for light vehicles in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture VehHrBusFuture Total vehicle travel time for buses in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture VehHrTruckFuture Total vehicle travel time for heavy trucks in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture AveSpeedLtVehFuture Average speed for light vehicles in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture AveSpeedBusFuture Average speed for buses in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture AveSpeedTruckFuture Average speed for heavy trucks in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture FfVehHrLtVehFuture Average free-flow travel time for light vehicles in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture FfVehHrBusFuture Average free-flow travel time for buses in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture FfVehHrTruckFuture Average free-flow travel time for heavy trucks in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture DelayVehHrLtVehFuture Total vehicle delay time for light vehicles in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture DelayVehHrBusFuture Total vehicle delay time for buses in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture DelayVehHrTruckFuture Total vehicle delay time for heavy trucks in the region calculated using model estimation of future data VETransportSupplyUse CalculateCongestionFuture MpgAdjHhFuture Average fuel efficiency adjustment for households in the region calculated using model estimation of future data VEHouseholdTravel CalculateInducedDemand DvmtFuture (households) Average daily vehicle miles traveled by household estimated using model estimations of future year data VEHouseholdTravel CalculateInducedDemand DvmtFuture (bzones) Average daily vehicle miles traveled by place types estimated using model estimations of future year data VEHouseholdTravel CalculateInducedDemand Access Growth in job access VEHouseholdTravel CalculateInducedDemand VehicleTrips Policy adjusted vehicle trips VEHouseholdTravel CalculateInducedDemand TransitTrips Policy adjusted transit trips VEHouseholdTravel CalculateInducedDemand Walking Growth in walking 5.3.17.4 Module Outputs DvmtPolicy (bzones): Average daily vehicle miles traveled by place types after policy adjustments DvmtPolicy (households): Average daily vehicle miles traveled by households after policy adjustments DvmtPolicy (vehicles): Average daily vehicle miles traveled by vehicles after policy adjustments LtVehiclesPolicy: Number of light vehicles by households after policy adjustments LtVehAdjFactorPolicy: Light vehicles adjustment factor for households TdmLtVehAdjFactorPolicy: TDM Light vehicles adjustment factor for households TdmAdjFactorPolicy: TDM adjustment factor for households LtVehDvmtPolicy: Average daily vehicle miles traveled by light vehicles by households after policy adjustments FutureCostPerMilePolicy: Total cost per mile for future year for each household estimated after making policy adjustments DailyParkingCostPolicy: Daily parking cost calculated after making policy adjustments CashOutIncAdjPolicy: Adjustment to income after cash out IncomePolicy: Income of the households after applying policy CostsPolicy: Various policy related energy costs Top Definitions Inputs/Outputs 5.3.18 CalculateCongestionPolicy This module is similar to CalculateCongestionBase module but uses model estimation of future transportation supply adjusted to policies as the basis of calculations. 5.3.18.1 User Input Files Percent road miles with ITS treatment (azone_its_prop.csv): This file is an estimate of the proportion of road miles that have improvements which reduce incidents through ITS treatments in both the base and future years. Values entered should be between 0 and 1, with 1 indicating that 100% of road miles are treated. The ITS policy measures the effects of incident management supported by ITS. The ITS table is used to inform the congestion model and the travel demand model. The model uses the mean speeds with and without incidents to compute an overall average speed by road type and congestion level providing a simple level of sensitivity to the potential effects of incident management programs on delay and emissions. The ITS treatments are evaluated only on freeways and arterials. The ITS treatments that can be evaluated are those that the analyst considers will reduce non-recurring congestion due to incidents. This policy does not deal with other operational improvements such as signal coordination, or temporary capacity increases such as allowing shoulder use in the peak. Here is a snapshot of the file: Geo Year ITS Multnomah 2005 0 Multnomah 2035 0 Truck and bus vmt (region_truck_bus_vmt.csv): This file contains the regions proportion of VMT by truck and bus as well as the distribution of that VMT across functional classes (freeway, arterial, other). The file includes one row for bus VMT data and one row for Truck VMT data. It should be noted that it is not necessary to enter values in the PropVmt column for BusVmt as this is calculated using the values in the transportation_supply.csv user input file. The truck VMT proportion (PropVMT column, TruckVMT row) can be obtained from Highway Performance Monitoring System data and local sources or the regional travel demand model if one exists. The proportions of VMT by functional class can be derived from the Federal Highway Cost Allocation Study and data from transit operators. The Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II is used to calculate the average proportion of truck VMT by functional class. Data from transit authorities are used to calculate the proportions of bus VMT by urban area functional class. Here is a snapshot of the file: Type PropVmt Fwy Art Other BusVmt 0 0.15 0.591854 0.258146 TruckVmt 0.08 0.452028 0.398645 0.149327 5.3.18.2 User Input Parameters Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT for the base year in thousands of miles. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. Light vehicle daily VMT can be estimated by subtracting truck and bus VMT from total VMT provided in the Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseLtVehDvmt&quot;, &quot;VALUE&quot;: &quot;27244&quot;, &quot;TYPE&quot; : &quot;compound&quot;, &quot;UNITS&quot; : &quot;MI/DAY&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Dvmt proportion by functional class (BaseFwyArtProp): The proportions of daily VMT for light vehicles that takes place on freeways and arterials (i.e., the remainder of VMT takes place on lower functional class roads for the base year. This data can be derived from a combination of Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, and regional data. The proportions of light vehicle daily VMT on freeways and arterials can be derived from the HPMS data. Regional travel demand model outputs can also be used to derive these data. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;BaseFwyArtProp&quot;, &quot;VALUE&quot;: &quot;0.77&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;proportion&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;, &#39;&gt; 1&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } Transit revenue adjustment factor (TranRevMiAdjFactor): Factor to convert transit revenue miles (i.e.Â miles run in service on routes) to total transit vehicle miles operated to account for vehicle miles run while deadheading from depots to route endpoints. It should be defined in model_parameters.json as follows: { &quot;NAME&quot; : &quot;TranRevMiAdjFactor&quot;, &quot;VALUE&quot;: &quot;1.12&quot;, &quot;TYPE&quot; : &quot;double&quot;, &quot;UNITS&quot; : &quot;multiplier&quot;, &quot;PROHIBIT&quot; : &quot;c(&#39;NA&#39;, &#39;&lt; 0&#39;)&quot;, &quot;ISELEMENTOF&quot; : &quot;&quot; } 5.3.18.3 Internal Module Inputs Package Module Outputs Description VELandUse CalculateBasePlaceTypes UrbanPop Total population by place types VELandUse CalculateFuturePlaceTypes UrbanPop Total population by place types VETransportSupply CreateFutureAccessibility FwyLaneMiPCFuture Ratio of urbanized area freeway and expressway lane-miles to urbanized area population calculated using future (estimated) data VETransportSupply CreateFutureAccessibility ArtLaneMiPCFuture Ratio of urbanized area arterial lane-miles to urbanized area population calculated using future (estimated) data VETransportSupply CreateFutureAccessibility TranRevMiPCFuture Transit revenue miles per capita for the region calculated using future (estimated) data VETransportSupply CreateFutureAccessibility BusRevMiFuture Bus revenue miles for the region calculated using future (estimated) data VETransportSupply CreateFutureAccessibility RailRevMiFuture Rail revenue miles for the region calculated using future (estimated) data VEHouseholdTravel CalculateTravelDemandFuture TruckDvmtFuture Average daily vehicle miles traveled by trucks estimated using model estimations of future year data VEHouseholdTravel CalculatePolicyVmt DvmtPolicy (bzones) Average daily vehicle miles traveled by place types estimated using model estimations of future year data VETransportSupplyUse CalculateCongestionFuture LtVehDvmtFactorFuture Light vehicle Dvmt factor adjustment factor 5.3.18.4 Module Outputs LtVehDvmtPolicy: Daily vehicle miles travelled by light vehicles in the region calculated using model estimation of future data after adjusting for policies BusDvmtPolicy: Daily vehicle miles travelled by bus in the region calculated using model estimation of future data after adjusting for policies MpgAdjLtVehPolicy: Average fuel efficiency adjustment for light vehicles in the region calculated using model estimation of future data after adjusting for policies MpgAdjBusPolicy: Average fuel efficiency adjustment for buses in the region calculated using model estimation of future data after adjusting for policies MpgAdjTruckPolicy: Average fuel efficiency adjustment for heavy trucks in the region calculated using model estimation of future data after adjusting for policies VehHrLtVehPolicy: Total vehicle travel time for light vehicles in the region calculated using model estimation of future data after adjusting for policies VehHrBusPolicy: Total vehicle travel time for buses in the region calculated using model estimation of future data after adjusting for policies VehHrTruckPolicy: Total vehicle travel time for heavy trucks in the region calculated using model estimation of future data after adjusting for policies AveSpeedLtVehPolicy: Average speed for light vehicles in the region calculated using model estimation of future data after adjusting for policies AveSpeedBusPolicy: Average speed for buses in the region calculated using model estimation of future data after adjusting for policies AveSpeedTruckPolicy: Average speed for heavy trucks in the region calculated using model estimation of future data after adjusting for policies FfVehHrLtVehPolicy: Average free-flow travel time for light vehicles in the region calculated using model estimation of future data after adjusting for policies FfVehHrBusPolicy: Average free-flow travel time for buses in the region calculated using model estimation of future data after adjusting for policies FfVehHrTruckPolicy: Average free-flow travel time for heavy trucks in the region calculated using model estimation of future data after adjusting for policies DelayVehHrLtVehPolicy: Total vehicle delay time for light vehicles in the region calculated using model estimation of future data after adjusting for policies DelayVehHrBusPolicy: Total vehicle delay time for buses in the region calculated using model estimation of future data after adjusting for policies DelayVehHrTruckPolicy: Total vehicle delay time for heavy trucks in the region calculated using model estimation of future data after adjusting for policies MpgAdjHhPolicy: Average fuel efficiency adjustment for households in the region calculated using model estimation of future data after adjusting for policies LtVehDvmtFactorPolicy: Light vehicle Dvmt factor adjustment factor calculated using model estimation of future data after adjusting for policies Top Definitions Inputs/Outputs 5.3.19 ReportRPATMetrics This module calculates performance metrics that are designed to address a variety of impacts that are helpful for decision-making. Following table summarizes various performance measures produced by this modules, details of which is discussed in VEReports. Performance Group Performance Metric Units Temporal Resolution Direct Travel Impacts Daily Vehicle Miles Traveled Miles Day Direct Travel Impacts Daily Vehicle Trips Trips Day Direct Travel Impacts Daily Transit Trips Trips Day Direct Travel Impacts Average Travel Speeds by Vehicle Type MPH Day Direct Travel Impacts Vehicle Hours of Travel Delay Hours Day Environment and Energy Impacts Fuel Consumption Gallons Day Environment and Energy Impacts Greenhouse Gas Emissions Metric Tons Day Financial and Economic Impacts Regional Highway Infrastructure Costs Dollars Year Financial and Economic Impacts Regional Transit Infrastructure Costs Dollars Year Financial and Economic Impacts Regional Transit Operating Costs Dollars Year Financial and Economic Impacts Annual Traveler Cost (Fuel + Charges) Dollars Year Location Impacts Regional Accessibility Percent Change From Base - Community Impacts Accident Rates Count Year Community Impacts Walking Percentage Increase Percent Change From Base - Community Impacts Job Accessibility by Income Group Percent Change From Base - 5.3.19.1 User Input Files Transportation Costs (model_transportation_costs.csv): This file contains unit cost rates for transportation infrastructure investments and operating costs and transit fare revenue. The parameters are used in the calculations of the transportation costs performance metrics. The source for transit capital, operating costs, and fare revenue is the NTD, and in particular the National Transit Profile which is available on the NTDB website. Costs are available in a variety of index formats, e.g.Â cost per revenue mile or hour; cost per passenger trip is used in VERPAT. The source for highway infrastructure costs is FHWAs Highway Economic Requirements System model, or HERS. Information was obtained from Chapter 6 of the 2005 Technical Report for all US states (FHWA, 2005). Table 8-1 in HERS provides unit costs (per lane mile) for both Rural and Urban highway systems, and distinguishes among three functional classes: interstates, freeways and expressways; other principal arterials; and minor arterials and collectors. Costs estimates are provided for the following improvements: Reconstruction and widening Reconstruct pavement Resurface and widen lanes Resurface pavement Improve shoulders Additional choices are offered to distinguish between adding a lane at normal vs.Â high cost, and also for pavement realignment, also under normal vs.Â high cost conditions. For practical reasons, it was decided to use only new construction (which also includes adding lanes) costs as the basis for the cost estimates, and to ignore the categories of reconstruction, resurfacing, and realignment. These construction costs include right of way, construction, and a small allowance for bridges and support facilities. The infrastructure costs focus only on the urban system, not rural, which also makes it possible to differentiate by three size classes: Small Urban, Small Urbanized, and Large Urbanized. The numbers from HERS are in 2002 dollars; FHWA advises escalation to current dollars using its NHCCI, which is available online at http://www.fhwa.dot.gov/policyinformation/nhcci.cfm); the report in VERPAT escalates uses this Index to escalate to 2010 values. The parameter values in this file are average values per lane mile, simplifying the calculations of highway costs to just differentiate investments in freeway vs.Â arterial functional class roads. Here is a snapshot of the file: SupplyClass CapCosts.2000 OpCosts.2000 Fare.2000 Freeway 17 0 0 Arterial 7 0 0 Bus 0.71 3.4 0.91 Rail 5.11 4.87 2.19 Accident Rates (model_accident_rates.csv): Road safety impacts are calculated by factoring the amount of VMT. The following national average rates, from the Fatality Analysis Reporting System General Estimates System (2009) by US Department of Transportation, are applied to calculate the number of fatal and injury accidents and the value of property damage: Fatal: 1.14 per 100 Million Miles Traveled Injury: 51.35 per 100 Million Miles Traveled Property damage: 133.95 per 100 Million Miles Traveled Here is a snapshot of the file: Accident Rate Fatal 1.14 Injury 51.35 Property 133.95 5.3.19.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Unique household ID VELandUse CalculateFuturePlaceTypes HhPlaceTypes A place type as assigned to the households VELandUse CalculateFuturePlaceTypes UrbanPop Total population by place types VETransportSupply CreateFutureAccessibility FwyLaneMiPCFuture Ratio of urbanized area freeway and expressway lane-miles to urbanized area population calculated using future (estimated) data VETransportSupply CreateFutureAccessibility ArtLaneMiPCFuture Ratio of urbanized area arterial lane-miles to urbanized area population calculated using future (estimated) data VETransportSupply CreateFutureAccessibility TranRevMiPCFuture Transit revenue miles per capita for the region calculated using future (estimated) data VETransportSupply CreateFutureAccessibility BusRevMiFuture Bus revenue miles for the region calculated using future (estimated) data VETransportSupply CreateFutureAccessibility RailRevMiFuture Rail revenue miles for the region calculated using future (estimated) data VEHouseholdVehicles AssignVehicleFeaturesFuture VehIdFuture Unique vehicle ID VEHouseholdVehicles AssignVehicleFeaturesFuture TypeFuture Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleFeaturesFuture MileageFuture Mileage of vehicles (automobiles and light truck) VEHouseholdVehicles AssignVehicleFeaturesFuture VehiclesFuture Number of automobiles and light trucks owned or leased by the household VEHouseholdTravel CalculateTravelDemandFuture TruckDvmtFuture Average daily vehicle miles traveled by trucks estimated using model estimations of future year data VEHouseholdTravel CalculateTravelDemandFuture FuelGallonsFuture Average daily fuel consumption in gallons by each household estimated using model estimations of future year data VEHouseholdTravel CalculateTravelDemandFuture FuelCo2eFuture Average daily Co2 equivalent greenhouse gas emissions by each household estimated using model estimations of future year data VEHouseholdTravel CalculateInducedDemand TransitTrips Policy adjusted transit trips VEHouseholdTravel CalculatePolicyVmt DvmtPolicy (bzones) Average daily vehicle miles traveled by place types after policy adjustments VEHouseholdTravel CalculatePolicyVmt DvmtPolicy (households) Average daily vehicle miles traveled by households after policy adjustments VEHouseholdTravel CalculatePolicyVmt DvmtPolicy (vehicles) Average daily vehicle miles traveled by vehicles after policy adjustments VEHouseholdTravel CalculatePolicyVmt LtVehDvmtPolicy Average daily vehicle miles traveled by light vehicles by households after policy adjustments VEHouseholdTravel CalculatePolicyVmt DailyParkingCostPolicy Daily parking cost calculated after making policy adjustments VETransportSupplyUse CalculateCongestionPolicy LtVehDvmtPolicy Daily vehicle miles travelled by light vehicles in the region calculated using model estimation of future data after adjusting for policies VETransportSupplyUse CalculateCongestionPolicy BusDvmtPolicy Daily vehicle miles travelled by bus in the region calculated using model estimation of future data after adjusting for policies VETransportSupplyUse CalculateCongestionPolicy MpgAdjLtVehPolicy Average fuel efficiency adjustment for light vehicles in the region calculated using model estimation of future data after adjusting for policies VETransportSupplyUse CalculateCongestionPolicy MpgAdjBusPolicy Average fuel efficiency adjustment for buses in the region calculated using model estimation of future data after adjusting for policies VETransportSupplyUse CalculateCongestionPolicy MpgAdjTruckPolicy Average fuel efficiency adjustment for heavy trucks in the region calculated using model estimation of future data after adjusting for policies VETransportSupplyUse CalculateCongestionPolicy MpgAdjHhPolicy Average fuel efficiency adjustment for households in the region calculated using model estimation of future data after adjusting for policies 5.3.19.3 Module Outputs EmissionsMetric: The amount of greenhouse gas emissions per day by place-types FuelMetric: The amount of fuel consumed per day by place-types CostsMetric: The annual traveler cost (fuel + charges) FuelGallonsMetric: Average daily fuel consumption in gallons after policy FuelCo2eMetric: Average daily Co2 equivalent greenhouse gas emissions after policy FutureCostPerMileMetric: Total fuel cost per mile after policy TotalCostMetric: Total fuel cost after policy RailPowerMetric: Annual power consumption by rail TruckFuelMetric: Annual truck fuel consumption BusFuelMetric: Annual bus fuel consumption TruckCo2eMetric: Annual greenhouse gas emissions by truck BusCo2eMetric: Annual greenhouse gas emissions by bus RailCo2eMetric: Annual greenhouse gas emissions by rail HighwayCostMetric: Regional highway infrastructure costs TransitCapCostMetric: Regional transit infrastructure costs TransitOpCostMetric: Regional transit operating costs TransitRevenueMetric: Annual fare revenue FatalIncidentMetric: Number of fatal incidents InjuryIncidentMetric: Number of incidents with injuries PropertyDamageMetric: Amount of incidents with property damage TruckConsumptionMetric: Annual truck fuel consumption by fuel type BusConsumptionMetric: Annual bus fuel consumption by fuel type Top Definitions Inputs/Outputs ## Development and Installation This section describes the installation and usage of VERPAT. 5.3.20 Installation of VisionEval and VERPAT VERPAT and the VisionEval framework are implemented in R, a statistical programming language and environment. Both R and VERPAT are open source and freely available. The installation of VERPAT is a two-step process. Install R Install VisionEval and VERPAT These are described in [[Getting Started: Installation and Setup | Getting-Started#installation-and-setup]]. 5.3.21 Running the VERPAT model Once VisionEval and VERPAT have been installed, a directory with sample data for Multnomah County, Oregon will be present at ../VisionEval/sources/models/VERPAT. (Note .. refers to the parent directory of the installation directory). The VERPAT directory serves the dual purposes of providing sample data and serving as a template for local modification to other locations. It contains two subdirectories and several files: The defs directory contains five [[model definition files | VERPAT-Inputs-and-Parameters#model-definition-files]], also described in the Model System Design document. These contain settings that define the model run. The inputs directory contains a number of CSV and JSON files that provide inputs for the modules. Each module specifies what input files it needs. These are described in [[Input Files | VERPAT-Inputs-and-Parameters#input-files]] and in the Model System Design document. To change the conditions in the model, these input files are modified (see Modifying the scenario). The run_model.R file is described in the Model System Design document and consists of calls to the modules that make up the model. To run this file in R, see instructions at [[Getting Started: Running VE Models | Getting-Started#running-ve-models]]. That page describes running VERPAT via both the R console and using VEGUI. The remaining files in the directory are README.md, a brief text file with a link to [Getting Started], and VERPAT.Rproj, a file for use with RStudio (a text editor and integrated development environment for R). 5.3.21.1 Modifying the scenario As described above, the VisionEval/sources/models/VERPAT directory contains sample input files for Multnomah County, Oregon. These can be modified or replaced to investigate the impacts of policy changes or to model a different region. To modify a scenario, the appropriate input files are edited. For example, to increase bicycle usage, the file inputs/region_light_vehicles.csv would be modified in Excel, LibreOffice, or a text editor to change the DataValue of TargetProp from 0.2 to 0.4: The required input files are described in detail in the Model System Design document. 5.3.21.2 Model output The output data are contained in a datastore, which can be either an HDF5 file or a directory of RData files. The datastore is described in detail in the Model System Design document. In this case (below), the datastore is a directory of RData files. It has a hierarchical structure, with directories for each year that the model is run, plus a Global folder for output that is not year specific. The year directories contain subdirectories for each geographic level, each containing RData files. The Global directory contains data that do not vary by model run year such as model parameters or geographic tables. Each of the Rda files contains a single R vector called Dataset with attributes describing the data. 5.3.21.3 Exporting Data to CSV At the end of the model run, a subset of the data are automatically exported from the Datastore to a set of CSV files. These files will be placed in the model directory in a subfolder called outputs. To export data manually, the script located in ../sources/models/export_output_to_csv.R can be modified to suit. "],["vestate.html", "Chapter 6 VE-State Tutorial 6.1 Overview 6.2 Required Bzone Attributes 6.3 Approach for Synthesizing Bzones and their Attributes 6.4 Inputs and Parameters 6.5 ## Modules and Outputs 6.6 Development and Installation 6.7 Installation of VisionEval and VE-State 6.8 In Brief: Running VE-State Base Scenario 6.9 In Detail: Running VE-State Base Scenario 6.10 Querying results 6.11 Development and Installation 6.12 Installation of VisionEval and VE-State 6.13 In Brief: Running VE-State Base Scenario 6.14 In Detail: Running VE-State Base Scenario 6.15 Querying results", " Chapter 6 VE-State Tutorial 6.1 Overview 6.1.1 VE-State Vs. VE-RSPM The main difference between VE-RSPM models and VE-State models is that a number of VE-RSPM inputs are specified at the Bzone level. The Bzones are sub-regional geographies, typically census tracts or block groups. Diagrams are available on the VisionEval wiki for a visual explanation of the VE-RSPM and VE-State geographies. Also, note that Azones are typically counties, and Mareas are metropolitan areas, typically defined by the boundaries of an MPO. The following diagrams show how these two model differ at the early stages. VE-State uses simulation methods to generate land use and housing input in Bzone level. 6.1.1.1 VE-RSPM Structure 6.1.1.2 VE-State Structure Bzone level attributes are required by a number of modules so methods need to be developed for synthesizing a representative set of Bzones and their characteristics from policies and attributes specified at the Azone and Marea levels. Something like this is done in the GreenSTEP model where a likely distribution of neighborhood population density is synthesized from the overall metropolitan area density. Azone level inputs are provided for base year population and area by development type (metropolitan, town, rural), population growth by development type, and the ratio of urban area growth to population growth. From these inputs, average density is calculated by Azone and development type and a model is applied to synthesize a distribution of neighborhood densities from the average density. All of the VE-RSPM modules which assign Bzone characteristics are contained in the VELandUse package. The modules that are developed to synthesize Bzones and their characteristics will be placed in a VESimLandUse package. When a VE-State model is run, the modules in the VESimLandUse package will be run instead of the modules in the VELandUse package. Otherwise the model setup is nearly the same for VE-State and VE-RSPM. The use of the VESimLandUse modules is not be limited to statewide applications however. Users could simulate Bzones in an VE-RSPM-type application that would enable metropolitan area planners to more easily define and model alternative land use scenarios as is done in VE-RPAT (Rapid Policy Analysis Tool) applications. 6.2 Required Bzone Attributes Land use modeling in VE-RSPM is the basis for the land use modeling in VE-State. These modules were designed to produce datasets needed to run the new multi-modal travel model. The multi-modal module requires several activity density, diversity (i.e., activity mixing), and destination accessibility measures that in turn require households and employment to be located at the Bzone level to calculate those measures. In addition, a few multi-modal network and service level measures need to be calculated. Second, locating jobs at the Bzone level allows for the travel demand management (TDM) and parking pricing modules to establish more realistic relationships between policies and the households they would affect. This also allows household workers to be assigned to job sites and that information can be used to translate job site TDM and parking policies back to households. Finally, simulated households are assigned to Bzones. In VE-RSPM a number of single family and multifamily dwelling units are assigned to Bzones as inputs along with the relative income distribution of households in each Bzone. VE-RSPM models the housing choice of each household based on the overall supply of housing of each type in the Azone and the household characteristics. Then the model assigns each household to a Bzone based on the households housing choice and income, and on the relative supplies of housing of the type and household income distribution in the Bzone. The Bzone attributes that need to be synthesized are: Destination accessibility (i.e., accessibility to jobs and housing) measured consistent as it is used in the multi-modal travel model  This information is one of the 5D measured used in the VE-RSPM multi-modal travel model. Since synthetic zones wont have physical locations, it cant be calculated simply from households and employment by zone. Number of households proportional split of dwelling units between single family and multifamily  Number of households and dwelling unit split by Bzone is needed in order to assign households to Bzones. Number of jobs by sector (retail, service, other) is used in calculating several diversity measures used in the RSPM multi-modal travel model. The number of jobs is also used to associate household workers with workplace Bzones Area type and development type  Some practical system of zonal development classification is needed for organizing policy inputs. Policies such as travel demand management policies will be specified by Azone and area type and/or development type. These designations will also be used in the calculation of the design and distance to transit 5D measure categories that are used in the VE-RSPM multi-modal travel model. 6.3 Approach for Synthesizing Bzones and their Attributes The user provides inputs on: Azone proportional split of dwelling units by location type (metropolitan, town and rural) Azone proportional split of workers by job site location types (for example, proportions of rural residents in the Azone who work in rural locations, town locations, or the metropolitan area) Marea proportional split of Marea employment among Azones Total activity  numbers of households and jobs  will determine the number of SimBzones in the Azone. SimBzones will have equal amounts of activity and unequal areas since activity density will vary among SimBzones. An appropriate average SimBzone activity value will be determined through evaluation of the EPA Smart Location Database (SLD). Models will be applied to select a destination accessibility value for each Bzone. For metropolitan type development, the model will create a distribution of destination accessibility values that is consistent with the overall activity density in the metropolitan area. Random sampling from the distribution will be used to assign destination accessibility values to metropolitan SimBzones. Models will also be developed for town and rural types, but more investigation is needed in order to determine their form. Activity density of each SimBzones will be determined as a function of the destination accessibility of each zone (because destination accessibility is a measure of activity density at a larger geographic scale). A model will be estimated from the SLD which creates a distribution of zone densities as a function of destination accessibility. An adjustment process, such as an iterative proportional fitting process (IPF), will be used to adjust densities and destination accessibilities so that the overall activity density of all the zones in a metropolitan area is equal to the input value Further subdivision of the metropolitan area into area types will be done as a function of the destination accessibility and activity density of each zone. Four such area types are proposed: urban core, close in community, and suburban/town, low density/rural. The final typology and the relationship of area types to destination accessibility and activity density will be developed through examination of the SLD dataset. It is envisioned that area types will be defined as fuzzy sets rather than crisp sets. Although some SimBzones may be wholly one type, many SimBzones will have degrees of membership in several types. Using fuzzy sets is a more realistic recognition of the nature of area types and avoids aberrations resulting from threshold effects. The total activity in each SimBzone is split into households and jobs using a model which relates zonal mixing to destination accessibility, activity density, and area type. This model will be specified and estimated based on investigations using the SLD data. It is anticipated that the model will produce distributions of activity splits from which values will be drawn. IPF or some other adjustment process will be used to adjust values so that the aggregation of the splits for all the SimBzones in an Azone is consistent with the Azone inputs. This model will also need to specify the split of land area between households and jobs. Once the number of households is determined for each SimBzone, the split of dwelling units by housing type (single family, multifamily) as a function of activity density. The SLD and census data will be used to develop this model. IPF is be used to fit the distribution of SimBzone values to Azone level control totals. This will allow users to specify Azone ratios as policy inputs. A variant of the VE-RSPM housing model is applied to assign households to housing types and to Bzones. One thing to be worked out is whether the allocation to SimBzones considers household income or not. In VE-RSPM, relative Bzone income distributions are input and these are used in the process of allocating households to Bzones. This enables VE-State users to model general relationships of income to parts of the metropolitan area (e.g., the effect of gentrification in the urban core). Jobs in each SimBzone will be split into numbers of retail, service, and other jobs. The approach for doing this is yet to be determined. SimBzone splits will be constrained so that they total to Azone splits that are inputs. The model will probably be a function of the destination accessibility, employment density, and mixing of households and employment in the SimBzone. The SLD data will be used to develop and estimate this model. Thought will be given as to whether there should be control totals on the mix for a metropolitan area. If so, IPF or some other adjustment process would need to be used to match the totals. Workers will be assigned to SimBzone job sites. How this is done is yet to be determined. It is proposed that an agile development approach be used where the first iteration of the model will be a random assignment of workers to job sites. Other extensions that could be considered if there is time/budget investigation could be done using LEHD data and SLD data to look for relationships between worker residence by area type and worker job site by area type. Relative income could also be considered. Once numbers of households and numbers of jobs by type are assigned to SimBzones, all the remaining density and diversity measures can be calculated. The distance to transit measure is modeled for metropolitan SimBzones as a function of the metropolitan-level transit supply measure and the SimBzone attributes for destination Development type (e.g., residential, employment, mixed, transit-oriented development, greenfield), are assigned to SimBzones based on the density, diversity, and distance to transit measures. These development types, like the area types may be fuzzy sets. The SLD is used to create the development type specifications. The design will enable model users to input Marea goals for the proportional split of development types. The model will adjust the allocation of development types consistent with the goals but constrained to plausible levels. Network design measures used by the VE-RSPM multi-modal travel model (e.g., multi-modal network density, pedestrian network density) will be applied based on inputs related to area and development type. The SLD will be used to identify ranges of values by area and development type. Users will specify in inputs goals relative to these ranges by Azone, development type and area type. The parking pricing, travel demand management, and car service inputs is specified by Azone, area type, and development type. These will then be translated to the SimBzone based on the SimBzone area type and development type. After that is done, the AssignDemandManagement, AssignParkingRestrictions, and AssignCarSvcAvailability modules can run as they currently do. Thought will be given as to how to simplify inputs so that users are not required to provide inputs for every combination of Azone, area type and development type. 6.4 Inputs and Parameters VE-State data inputs are classified into two categories: Inputs and Model Parameters. It includes five definition files and dozens of input files, some of which the user must change and others which typically remain unchanged. This page provides guidance of these files to the end user and which files must be updated to implement VE-State. 6.4.1 Model Definition Files The following five files need to be configured in the defs directory: run_parameters.json model_parameters.json deflators.csv geo.csv units.csv 6.4.1.1 run_parameters.json This file contains parameters that define key attributes of the model run and relationships to other model runs. A more detailed description of the file can be found here. The results of model run are stored in a directory with the name specified by \"DatastoreName\". This name should be changed when running different scenarios. For e.g.Â when running base scenario the output directory name can be set to BaseScenario by using \"DatastoreName\": \"BaseScenario\" in the file. The format of this file is as follows: { &quot;Model&quot;: &quot;VE-State&quot;, &quot;Scenario&quot;: &quot;Test&quot;, &quot;Description&quot;: &quot;Test of VE-State&quot;, &quot;Region&quot;: &quot;Oregon&quot;, &quot;BaseYear&quot;: &quot;2010&quot;, &quot;Years&quot;: [&quot;2010&quot;, &quot;2038&quot;], &quot;DatastoreName&quot;: &quot;Datastore&quot;, &quot;DatastoreType&quot;: &quot;RD&quot;, &quot;Seed&quot;: 1 , &quot;RequiredVEPackages&quot;: [ &quot;VESimHouseholds&quot;, &quot;VESimLandUseData&quot;, &quot;VESimLandUse&quot;, &quot;VESimTransportSupply&quot;, &quot;VEHouseholdVehicles&quot;, &quot;VEHouseholdTravel&quot;, &quot;VEPowertrainsAndFuels&quot;, &quot;VETravelPerformance&quot; ] } Top ___ 6.4.1.2 model_parameters.json This file contains global parameters for a particular model configuration that may be used by multiple modules. A more detailed description of the file and its structure can be found here. The source of the default $16/hr is per an ODOT Report, The Value of Travel-Time: Estimates of the Hourly Value of Time for Vehicles in Oregon 2015. The 2017 version is here. The format of this file is as follows: [ {&quot;NAME&quot;: &quot;ValueOfTime&quot;, &quot;VALUE&quot;: &quot;16&quot;, &quot;TYPE&quot;: &quot;double&quot;, &quot;UNITS&quot;: &quot;base cost year dollars per hour&quot; } ] Top ___ 6.4.1.3 deflators.csv This file defines the annual deflator values, such as the consumer price index, that are used to convert currency values between different years for currency denomination. This file does not need to be modified unless the years for which the dollar values used in the input dataset is not contained in this file. The format of the file is as follows: Year Value 1999 172.6 2000 178.0 2001 182.4   2010 218.344   2016 249.426 Top ___ 6.4.1.4 geo.csv This file describes all of the geographic relationships for the model and the names of geographic entities in a CSV formatted text file. Azone, Bzone, and Marea should remain consistent with the input data. The format of the file is as follows: Azone Bzone Czone Marea Baker NA NA None Benton NA NA Corvallis Clackamas NA NA Portland Clatsop NA NA None Columbia NA NA Portland Coos NA NA None Crook NA NA None Curry NA NA None Deschutes NA NA Bend Douglas NA NA None Gilliam NA NA None Grant NA NA None Harney NA NA None To learn more about VE-State model geographic relationships see here Top ___ 6.4.2 units.csv This file describes the default units to be used for storing complex data types in the model. This file should NOT be modified by the user. The format of the file is as follows: Type Units currency USD distance MI area SQMI mass KG volume GAL time DAY energy GGE people PRSN trips VEH area TRIP households HH employment JOB activity HHJOB The VisionEval model system keeps track of the types and units of measure of all data that is processed. More details about the file and structure can be found here. Top ___ 6.4.3 Input Files azone_carsvc_characteristics.csv This file specifies the different characteristics for high and low car service level and is used in the CreateVehicleTable and AssignVehicleAge modules. azone_charging_availability.csv This file has data on proportion of different household types who has EV charging available and is used in the AssignHHVehiclePowertrain module. azone_electricity_carbon_intensity.csv This file is used to specify the carbon intensity of electricity and is optional (only needed if user wants to modify the values). The file is used in Initialize (VEPowertrainsAndFuels) and CalculateCarbonIntensity modules. azone_fuel_power_cost.csv This file supplies data for retail cost of fuel and electricity and is used in the CalculateVehicleOperatingCost module. azone_gq_pop_by_age.csv This file contains group quarters population estimates/forecasts by age and is used in the CreateHouseholds module. azone_gq_pop-prop_by_area-type.csv This file provides the proportions for groupquarters in different area types and is used in the Initialize module. azone_hh_loc_type_prop.csv This file provides the proportions for households residing in the metropolitan, towns and rural part of the Azone and is used in the Initialize module. azone_hh_pop_by_age.csv This file contains population estimates/forecasts by age and is used in the CreateHouseholds module. azone_hh_veh_mean_age.csv This file provides inputs for mean auto age and mean light truck age and is used in the AssignVehicleAge module. azone_hh_veh_own_taxes.csv This file provides inputs for flat fees/taxes (i.e.Â annual cost per vehicle) and ad valorem taxes (i.e.Â percentage of vehicle value paid in taxes). The file is used in CalculateVehicleOwnCost module. azone_hhsize_targets.csv This file contains the household specific targets and is used in CreateHouseholds module. azone_loc_type_land_area.csv This file provides land area data for different area types and is used in Initialize module. azone_lttrk_prop.csv This file specifies the light truck proportion of the vehicle fleet and is used in AssignVehicleType module. azone_payd_insurance_prop.csv This file provides inputs on the proportion of households having PAYD (pay-as-you-drive) insurance and is used in the CalculateVehicleOwnCost module. azone_per_cap_inc.csv This file contains information on regional average per capita household and group quarters income in year 2010 dollars and is used in the PredictIncome module. azone_prop_sov_dvmt_diverted.csv This file provides inputs for a goal for diverting a portion of SOV travel within a 20-mile tour distance and is used in the DivertSovTravel module. azone_relative_employment.csv This file contains ratio of workers to persons by age and is used in the PredictWorkers module. azone_veh_use_taxes.csv This file supplies data for vehicle related taxes and is used in the CalculateVehicleOperatingCost module. azone_vehicle_access_times.csv This file supplies data for vehicle access and egress time and is used in the CalculateVehicleOperatingCost module. azone_wkr_loc_type_prop This file provides the proportions for workers residing in Azone who works in the metropolitan, towns and rural part of the Azone and is used in Initialize module. marea_base_year_dvmt.csv This file is used to specify to adjust the dvmt growth factors and is optional (only needed if user wants to modify the values). The file is used in the Initialize (VETravelPerformance), CalculateBaseRoadDvmt and CalculateFutureRoadDvmt modules. marea_carsvc_availability.csv This file has the data for activity proportions which are served by car services and is used in the Initialize (AssignCarSvcAvailability) marea_congestion_charges.csv This file is used to specify the charges of vehicle travel for different congestion levels and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateRoadPerformance modules. marea_dvmt_split_by_road_class.csv This file is used to specify the dvmt split for different road classes and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateBaseRoadDvmt modules. marea_d3bpo4_adj.csv This file provides the D3bpo4 value for urban, town and rural areas from the EPA 2010 Smart Location Database and is used in the Simulate4DMeasures marea_lane_miles.csv This file contains inputs on the numbers of freeway lane-miles and arterial lane-miles and is used in the AssignRoadMiles module. marea_mix_targets.csv This file represents Marea target for proportion of households located in mixed-use neighborhoods (or NA if no target) and is used in the SimulateUrbanMixMeasure module. marea_operations_deployment.csv This file is used to specify the proportion of dvmt affected by operations for different road classes and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateRoadPerformance modules. marea_parking-avail_by_area-type.csv This file has the data for average number of parking spots available to households and is used in the AssignParkingRestrictions marea_parking-cost_by_area-type.csv This file has the data related to parking costs and population proportions paying the parking costs and is used in the AssignParkingRestrictions marea_speed_smooth_ecodrive.csv This input file supplies information of deployment of speed smoothing and ecodriving by road class and vehicle type and is used in the CalculateMpgMpkwhAdjustments module. marea_transit_ave_fuel_carbon_intensity.csv This file is used to specify the average carbon intensity of fuel used by transit and is optional. The file is used in the Initialize (VETravelPerformance) module. marea_transit_biofuel_mix.csv This file is used to specify the biofuel used by transit and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateCarbonIntensity modules. marea_transit_fuel.csv This file is used to specify the transit fuel proportions and is optional. The file is used in the Initialize (VETravelPerformance) and CalculateCarbonIntensity modules. marea_transit_powertrain_prop.csv This file is used to specify the mixes of transit vehicle powertrains and is optional. The file is used in the Initialize (VETravelPerformance) and CalculatePtranEnergyAndEmissions modules. marea_transit_service.csv This file contains annual revenue-miles for different transit modes for metropolitan area and is used in the AssignTransitService module. marea_travel-demand-mgt_by_area-type.csv This file has the data for proportions participating in demand management programs and is used in the AssignDemandManagement module. marea_uza_profile_names.csv his file provides the name of a specific urbanized area for the urbanized area profile to use in SimBzone creation and is used in the Initialize module. other_ops_effectiveness.csv This file is used to specify the delay effects of operations in different road classes and is optional (only needed if user wants to modify the values). The file is used in the Initialize (VETravelPerformance) and CalculateRoadPerformance modules. region_ave_fuel_carbon_intensity.csv This file is used to specify the average carbon density for different vehicle types and is optional (only needed if user wants to modify the values). The file is used in the Initialize (VETravelPerformance) and CalculateCarbonIntensity modules. region_base_year_hvytrk_dvmt.csv This file is used to specify the heavy truck dvmt for base year and is optional. The file is used in the Initialize (VETravelPerformance), CalculateBaseRoadDvmt and CalculateFutureRoadDvmt modules. region_carsvc_powertrain_prop.csv This file is used to specify the powertrain proportion of car services and is optional. The file is used in the Initialize (VETravelPerformance), AssignHhVehiclePowertrain and AdjustHhVehicleMpgMpkwh modules. region_comsvc_lttrk_prop.csv This file supplies data for the light truck proportion of commercial vehicles and is used in the CalculateComEnergyAndEmissions module. region_comsvc_powertrain_prop.csv This file is used to specify the powertrain proportion of commercial vehicles and is optional. The file is used in the Initialize (VEPowertrainsAndFuels) and CalculateComEnergyAndEmissions modules. region_comsvc_veh_mean_age.csv This input file contains average age of commercial service vehicles and is used in the CalculateComEnergyAndEmissions module. region_hh_driver_adjust_prop.csv This file specifies the relative driver licensing rate relative to the model estimation data year and is used in the AssignDrivers module. region_hvytrk_powertrain_prop.csv This file is used to specify the powertrain proportion of heavy duty trucks and is optional. The file is used in the Initialize (VEPowertrainsAndFuels) and CalculateComEnergyAndEmissions modules. region_prop_externalities_paid.csv This file supplies data for climate change and other social costs and is used in the CalculateVehicleOperatingCost module. region_road_cost.csv This file supplies data for different types of road costs and is used in the BalanceRoadCostsAndRevenues module. Top ___ Return to Tutorial. 6.5 ## Modules and Outputs The VE-State model is a compilation of several modules, listed below: MODULE PACKAGE CreateHouseholds VESimHouseholds PredictWorkers VESimHouseholds AssignLifeCycle VESimHouseholds PredictIncome VESimHouseholds Initialize VESimLandUse CreateSimBzones VESimLandUse SimulateHousing VESimLandUse SimulateEmployment VESimLandUse Simulate4DMeasures VESimLandUse SimulateUrbanMixMeasure VESimLandUse AssignParkingRestrictions VESimLandUse AssignDemandManagement VESimLandUse AssignCarSvcAvailability VESimLandUse SimulateTransitService VESimTransportSupply SimulateRoadMiles VESimTransportSupply AssignDrivers VEHouseholdVehicles AssignVehicleOwnership VEHouseholdVehicles AssignVehicleType VEHouseholdVehicles CreateVehicleTable VEHouseholdVehicles AssignVehicleAge VEHouseholdVehicles CalculateVehicleOwnCost VEHouseholdVehicles AdjustVehicleOwnership VEHouseholdVehicles CalculateHouseholdDvmt VEHouseholdTravel CalculateAltModeTrips VEHouseholdTravel CalculateVehicleTrips VEHouseholdTravel DivertSovTravel VEHouseholdTravel Initialize VEPowertrainsAndFuels CalculateCarbonIntensity VEPowertrainsAndFuels AssignHhVehiclePowertrain VEPowertrainsAndFuels Initialize VETravelPerformance CalculateBaseRoadDvmt VETravelPerformance CalculateFutureRoadDvmt VETravelPerformance CalculateRoadPerformance VETravelPerformance CalculateMpgMpkwhAdjustments VETravelPerformance AdjustHhVehicleMpgMpkwh VETravelPerformance CalculateVehicleOperatingCost VETravelPerformance BudgetHouseholdDvmt VETravelPerformance BalanceRoadCostsAndRevenues VETravelPerformance CalculateComEnergyAndEmissions VETravelPerformance CalculatePtranEnergyAndEmission VETravelPerformance Each of these modules use different input data. Generally speaking, the VE-State inputs are classified into the five following categories: User input model parameters: These are input parameters (model or scenario specific), defined in model_parameters.json, that users should review and modify as needed. Fixed input model parameters: These are input parameters specific to the model, defined in model_parameters.json, that users should not typically modify. User input files: These are input files (model or scenario specific) that users should review and modify as needed. Fixed input files: These are input parameters specific to the model that are fixed. Internal module inputs: These are inputs created by other VE-RSPM modules. The following section decribes each module, its required inputs, and its generated outputs. 6.5.1 CreateHouseholds This module creates simulated households using inputs of population by age group by simulation year. 6.5.1.1 User Input Files Household population (azone_hh_pop_by_age.csv): This file contains population estimates/forecasts by age for each of the base and future years. The file format includes number of persons within six age groups: 0-14 15-19 20-29 30-54 55-64 65 Plus Here is a snapshot of the file: Household size (azone_hhsize_targets.csv): This file contains the household-specific targets for the population synthesizer. This file contains two attributes: AveHhSize: Average household size for non-group quarters households Prop1PerHh: Proportion of non-group quarters households having only one person Here is a snapshot of the file: Group quarter population (azone_gq_pop_by_age.csv): This file contains group quarters population estimates/forecasts by age for each of the base and future years. The file format includes number of persons within the following six age categories: 0-14 15-19 20-29 30-54 55-64 65 Plus Here is a snapshot of the file: 6.5.1.2 Module Outputs Households are created with the number of persons in each of six age categories (0-14, 15-19, 20-29, 30-54, 55-64, and 65+) and the total number of persons in the household. Two types of households are created: regular households (i.e.Â not persons living in group quarters) and group quarters households . HhId: Unique household ID HhSize: Number of persons Age0to14: Persons in 0 to 14 year old age group Age15to19: Persons in 15 to 19 year old age group Age20to29: Persons in 20 to 29 year old age group Age30to54: Persons in 30 to 54 year old age group Age55to64: Persons in 55 to 64 year old age group Age65Plus: Persons in 65 or older age group HhType: Coded household age composition (e.g., 2-1-0-2-0-0) or Grp for group quarters For more information see here Top ___ 6.5.2 PredictWorkers This module assigns workers by age to households and to non-institutional group quarters population. It is a simple model which predicts workers as a function of the household type and age composition. 6.5.2.1 User Input Files Relative employment (azone_relative_employment.csv): This file contains the ratio of workers to persons by age cohort in the model year relative to the model estimation data year. This file contains five age cohorts: RelEmp15to19: Ratio of workers to persons age 15 to 19 in model year versus in estimation data year RelEmp20to29: Ratio of workers to persons age 20 to 29 in model year versus in estimation data year RelEmp30to54: Ratio of workers to persons age 30 to 54 in model year versus in estimation data year RelEmp55to64: Ratio of workers to persons age 55 to 64 in model year versus in estimation data year RelEmp65Plus: Ratio of workers to persons age 65 or older in model year versus in estimation data year Here is a snapshot of the file: 6.5.2.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HHType Coded household age composition 6.5.2.3 Module Outputs Wkr15to19: Workers in 15 to 19 year old age group Wkr20to29: Workers in 20 to 29 year old age group Wkr30to54: Workers in 30 to 54 year old age group Wkr55to64: Workers in 55 to 64 year old age group Wkr65Plus: Workers in 65 or older age group Workers: Total workers NumWkr: Number of workers residing in the zone For more information see here Top ___ 6.5.3 AssignLifeCycle This module assigns a life cycle category to each household. The life cycle categories are similar, but not the same as, those established for the National Household Travel Survey (NHTS). The age categories used in VisionEval models are broader than those used by the NHTS to identify children of different ages. This is a simple model with set of rules that assigns age group categories based on the age of persons and workers in the household. 6.5.3.1 User Input Files This module has no user input requirements. 6.5.3.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HHType Coded household age composition VESimHouseholds PredictWorkers Wrk15to19 Workers in 15 to 19 year old age group VESimHouseholds PredictWorkers Wrk20to29 Workers in 20 to 29 year old age group VESimHouseholds PredictWorkers Wrk30to54 Workers in 30 to 54 year old age group VESimHouseholds PredictWorkers Wrk55to64 Workers in 55 to 64 year old age group VESimHouseholds PredictWorkers Wrk65Plus Workers in 65 or older age group 6.5.3.3 Module Outputs LifeCycle: Household life cycle as defined by 2009 NHTS LIF_CYC variable For more information see here Top ___ 6.5.4 PredictIncome This module predicts the income for each simulated household given the number of workers in each age group and the average per capita income for the Azone where the household resides. 6.5.4.1 User Input Files Regional income (azone_per_cap_inc.csv): This file contains information on regional average per capita household (HHIncomePC) and group quarters (GQIncomePC) income by forecast year in year 2010 dollars. The data can be obtained from the U.S. Department of Commerce Bureau of Economic Analysis for the current year or from regional or state sources for forecast years. In order to use current year dollars just replace 2010 in column labels with current year. For example, if the data is obtained in year 2015 dollars then the column labels in the file shown below will become HHIncomePC.2015 and GQIncomePC.2015. Here is a snapshot of the file: 6.5.4.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HHSize Number of persons in the household VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds HHType Coded household age composition VESimHouseholds PredictWorkers Wrk15to19 Workers in 15 to 19 year old age group VESimHouseholds PredictWorkers Wrk20to29 Workers in 20 to 29 year old age group VESimHouseholds PredictWorkers Wrk30to54 Workers in 30 to 54 year old age group VESimHouseholds PredictWorkers Wrk55to64 Workers in 55 to 64 year old age group 6.5.4.3 Module Outputs Income: Total annual household (non-group and group quarters) income For more information see here Top ___ 6.5.5 Initialize Modules in the VESimLandUse package synthesize Bzones and their land use attributes as a function of Azone characteristics as well as data derived from the US Environmental Protection Agencys Smart Location Database (SLD) augmented with US Census housing and household income data, and data from the National Transit Database. Details on these data are included in the VESimLandUseData package. The combined dataset contains a number of land use attributes at the US Census block group level. The goal of Bzone synthesis to generate a set of SimBzones in each Azone that reasonably represent block group land use characteristics given the characteristics of the Azone, the Marea that the Azone is a part of, and scenario inputs provided by the user. Many of the models and procedures used in Bzone synthesis pivot from profiles developed from these data sources for specific urbanized areas, as well as more general profiles for different urbanized area population size categories, towns, and rural areas. Using these specific and general profiles enables the simulated Bzones (SimBzones) to better represent the areas being modeled and the variety of conditions found in different states. Following is a listing of the urbanized areas for which profiles have been developed. Note that urbanized areas that cross state lines are split into the individual state components. This is done to facilitate the development of state models and to better reflect the characteristics of the urbanized area characteristics in each state. It is incumbent on the model user to identify the name of the urbanized area profile that will be used for each of the Mareas in the model. This module reads in the names assigned in the marea_uza_profile_names.csv file and checks their validity. If any are invalid, input processing will stop and error messages will be written to the log identifying the problem names. The following table identifies the names that may be used. 6.5.5.1 User Input Files hh location type proportions (marea_uza_profile_names.csv): This file provides the name of a specific urbanized area for the urbanized area profile to use in SimBzone creation UzaProfileName: Name of a specific urbanized area for the urbanized area profile to use in SimBzone creation or one of the following: small, medium-small, medium, medium-large, large, very-large Here is a snapshot of the file: hh location type proportions (azone_hh_loc_type_prop.csv): This file provides the proportions for households residing in the metropolitan, towns and rural part of the Azone PropMetroHh: Proportion of households residing in the metropolitan (i.e.Â urbanized) part of the Azone PropTownHh: Proportion of households residing in towns (i.e.Â urban-like but not urbanized) in the Azone PropRuralHh: Proportion of households residing in rural (i.e.Â not urbanized or town) parts of the Azone Here is a snapshot of the file: work location type proportions (azone_wkr_loc_type_prop.csv): This file provides the proportions for workers residing in Azone who works in the metropolitan, towns and rural part of the Azone PropWkrInMetroJobs: Proportion of workers residing in the Azone who work at jobs in the metropolitan (i.e.Â urbanized) area associated with the Azone PropWkrInTownJobs: Proportion of workers residing in the Azone who work at jobs in towns (i.e.Â urban-like but not urbanized) in the Azone PropWkrInRuralJobs: Proportion of workers residing in the Azone who work at jobs in rural (i.e.Â not urbanized or town) parts of the Azone PropMetroJobs: Proportion of the jobs of the metropolitan area that the Azone is associated with that are located in the metropolitan portion of the Azone Here is a snapshot of the file: work location type proportions (azone_gq_pop-prop_by_area-type.csv): This file provides the proportions for groupquarters in different area types. MetroLandArea: Land area (excluding large water bodies and large tracts of undevelopable land) in the metropolitan (i.e.Â urbanized) portion of the Azone TownLandArea: Land area (excluding large water bodies and large tracts of undevelopable land) in towns (i.e.Â urban-like but not urbanized) in the Azone RuralAveDensity: Proportion of workers residing in the Azone who work at jobs in the metropolitan (i.e.Â urbanized) area associated with the Azone Here is a snapshot of the file: work location type proportions (azone_gq_pop-prop_by_area-type.csv): This file provides the average activity density in rural areas PropGQPopCenter: Proportion of Azone non-institutional group quarters population located in center area type PropGQPopInner: Proportion of Azone non-institutional group quarters population located in inner area type PropGQPopOuter: Proportion of Azone non-institutional group quarters population located in outer area type PropGQPopFringe: Proportion of Azone non-institutional group quarters population located in fringe area type Here is a snapshot of the file: Land area for area types(azone_loc_type_land_area.csv): This file provides land area data for different area types MetroLandArea: Land area (excluding large water bodies and large tracts of undevelopable land) in the metropolitan (i.e.Â urbanized) portion of the Azone TownLandArea: Land area (excluding large water bodies and large tracts of undevelopable land) in towns (i.e.Â urban-like but not urbanized) in the Azone RuralAveDensity: Average activity density (households and jobs per acre) of rural (i.e.Â not metropolitan or town) portions of the Azone not including large waterbodies or large tracts of agricultural lands, forest lands, or otherwise protected lands Here is a snapshot of the file: For more information see here ) Top ___ ### CreateSimBzones This module synthesizes Bzones and their land use attributes as a function of Azone characteristics as well as data derived from the US Environmental Protection Agencys Smart Location Database (SLD) augmented with US Census housing and household income data, and data from the National Transit Database. Details on these data are included in the VESimLandUseData package. The combined dataset contains a number of land use attributes at the US Census block group level. The goal of Bzone synthesis to generate a set of SimBzones in each Azone that reasonably represent block group land use characteristics given the characteristics of the Azone, the Marea that the Azone is a part of, and scenario inputs provided by the user. Many of the models and procedures used in Bzone synthesis pivot from profiles developed from these data sources for specific urbanized areas, as well as more general profiles for different urbanized area population size categories, towns, and rural areas. Using these specific and general profiles enables the simulated Bzones (SimBzones) to better represent the areas being modeled and the variety of conditions found in different states. The documentation for the Initialize module has a listing of urbanized area profile names. The models and procedures in this module create SimBzones within each Azone that simulate the land use characteristics of neighborhoods likely to be found in the Azone. The SimBzones are assigned quantities of households and jobs and are attributed with several land use measures in the process. The characteristics are: Location Type: Identification of whether the SimBzone is located in an urbanized area, a town (i.e.Â an urban-type area that is not large enough to be urbanized), rural (i.e.Â dispersed low-density development) Households: Number of households in each SimBzone Employment: Number of jobs in each SimBzone Activity Density: Number of households and jobs per acre Land Use Diversity: Measures of the degree of mixing of households and jobs Destination Accessibility: Measures of proximity to households and jobs Area Type and Development Type: Categories which describe the relative urban nature of the SimBzone (area type) and the character of development in the SimBzone (development type). Employment Split: Number of retail, service, and other jobs in each SimBzone. 6.5.5.2 User Input Files 6.5.5.3 Internal Module Inputs Package Module Outputs Description VESimHouseholds PredictWorkers NumWkr see PredictWorkers VESimLandUse Initialize PropMetroHh see Initialize VESimLandUse Initialize PropTownHh see Initialize VESimLandUse Initialize PropRuralHh see Initialize VESimLandUse Initialize PropWkrInMetroJobs see Initialize VESimLandUse Initialize PropWkrInTownJobs see Initialize VESimLandUse Initialize PropWkrInRuralJobs see Initialize VESimLandUse Initialize PropMetroJobs see Initialize VESimLandUse Initialize MetroLandArea see Initialize VESimLandUse Initialize TownLandArea see Initialize VESimLandUse Initialize RuralAveDensity see Initialize 6.5.5.4 Module Outputs LocType: Location type (Urban, Town, Rural) of the place where the household resides NumHh: Number of households allocated to the SimBzone TotEmp: Total number of jobs in zone RetEmp: Number of jobs in retail sector in zone SvcEmp: Number of jobs in service sector in zone OthEmp: Number of jobs in other than the retail and service sectors in zone AreaType: Area type (center, inner, outer, fringe) of the Bzone DevType: Location type (Urban, Town, Rural) of the Bzone D1D: Gross activity density (employment + households) on unprotected land in zone (Ref: EPA 2010 Smart Location Database) D5: Destination accessibility of zone calculated as harmonic mean of jobs within 2 miles and population within 5 miles UrbanArea: Area that is Urban and unprotected (i.e.Â developable) within the zone TownArea: Area that is Town and unprotected (i.e.Â developable) within the zone RuralArea: Area that is Rural and unprotected (i.e.Â developable) within the zone SFDU: Number of single family dwelling units (PUMS codes 01 - 03) in zone MFDU: Number of multi-family dwelling units (PUMS codes 04 - 09) in zone For more information see here Top ___ 6.5.6 SimulateHousing his module assigns a housing type, either single-family (SF) or multifamily (MF) to regular households based on the respective supplies of SF and MF dwelling units in the housing market to which the household is assigned (i.e.Â the Azone the household is assigned to) and on household characteristics. It then assigns each household to a SimBzone based on the households housing type as well as the supply of housing by type and SimBzone. The module assigns non-institutional group quarters households to SimBzones randomly. #### User Input Files 6.5.6.1 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds PredictWorkers Workers Total workers in the household VESimLandUse Initialize PropGQPopCenter see Initialize VESimLandUse Initialize PropGQPopInner see Initialize VESimLandUse Initialize PropGQPopOuter see Initialize VESimLandUse Initialize PropGQPopFringe see Initialize VESimLandUse CreateSimBzones SFDU see CreateSimBzones VESimLandUse CreateSimBzones MFDU see CreateSimBzones VESimLandUse CreateSimBzones LocType see CreateSimBzones VESimLandUse CreateSimBzones AreaType see CreateSimBzones VESimHouseholds CreateHouseholds HhSize Total workers in the household VESimHouseholds CreateHouseholds Age15to19 Number of workers residing in the zone VESimHouseholds CreateHouseholds Age20to29 Household id VESimHouseholds CreateHouseholds Age30to54 Total workers in the household VESimHouseholds CreateHouseholds Age55to64 Number of workers residing in the zone VESimHouseholds CreateHouseholds Age65Plus Total workers in the household VESimHouseholds CreateHouseholds HhType Number of workers residing in the zone 6.5.6.2 Module Outputs HouseType: Type of dwelling unit in which the household resides (SF = single family, MF = multi-family, GQ = group quarters LocType: Location type (Urban, Town, Rural) of the place where the household resides Pop: Total population residing in Bzone UrbanPop: Urbanized area population in the Marea TownPop: Town (i.e.Â urban but non-urbanized area) in the Marea RuralPop: Rural (i.e.Â not urbanized and not town) population in the Marea NumWkr: Number of jobs in retail sector in zone UrbanIncome: Total household income of the urbanized area population in the Marea TownIncome: Total household income of the town (i.e.Â urban but non-urbanized area) population in the Marea RuralIncome: Total household income of the rural (i.e.Â not urbanized and not town) population in the Marea For more information see here Top ___ ### SimulateEmployment This module assign workers SimBzone work locations. A worker table is created which identifies a unique worker ID, the household ID the worker is a part of, and the SimBzone, Azone, and Marea of the worker job location. #### User Input Files 6.5.6.3 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds PredictWorkers Workers Total workers in the household VESimLandUse CreateSimBzones TotEmp see CreateSimBzones VESimLandUse CreateSimBzones LocType see CreateSimBzones 6.5.6.4 Module Outputs WkrId: Unique worker ID Bzone: Bzone ID of worker job location Azone: Azone ID of worker job location Marea: Marea ID of worker job location For more information see here Top ___ 6.5.7 Simulate4DMeasures This module calculates several 4D measures by SimBzone including density, diversity (i.e.Â mixing of land uses), and pedestrian-orientedn transportation network design. These measures are the same as or are similar to measures included in the Environmental Protection Agencys (EPA) #### User Input Files 1. D3bpo4 value or different location types (marea_d3bpo4_adj): This file provides the D3bpo4 value for urban, town and rural areas from the EPA 2010 Smart Location Database * UrbanD3bpo4Adj: Proportion of base urban D3bpo4 value as tabulated from the EPA 2010 Smart Location Database for the urbanized portion of the marea * TownD3bpo4Adj: Proportion of base town D3bpo4 value as tabulated from the EPA 2010 Smart Location Database for towns * RuralD3bpo4Adj: Proportion of base town D3bpo4 value as tabulated from the EPA 2010 Smart Location Database for rural areas Here is a snapshot of the file: 6.5.7.1 Internal Module Inputs Package Module Outputs Description VESimLandUse CreateSimBzones TotEmp see CreateSimBzones VESimLandUse CreateSimBzones RetEmp see CreateSimBzones VESimLandUse CreateSimBzones SvcEmp see CreateSimBzones VESimLandUse SimulateHousing Pop see SimulateHousing VESimLandUse CreateSimBzones NumHh see CreateSimBzones VESimLandUse SimulateHousing NumWkr see SimulateHousing VESimLandUse CreateSimBzones UrbanArea see CreateSimBzones VESimLandUse CreateSimBzones TownArea see CreateSimBzones VESimLandUse CreateSimBzones RuralArea see CreateSimBzones VESimLandUse CreateSimBzones AreaType see CreateSimBzones VESimLandUse CreateSimBzones DevType see CreateSimBzones VESimLandUse CreateSimBzones LocType see CreateSimBzones 6.5.7.2 Module Outputs D1B: Gross population density (people/acre) on unprotected D1C: Gross employment density (jobs/acre) on unprotected land D2A_JPHH: Ratio of jobs to households in zone D2A_WRKEMP: Ratio of workers to jobs in zone D2A_EPHHM: Employment and household entropy measure for zone considering numbers of households, retail jobs, service jobs, and other jobs D3bpo4: Intersection density in terms of pedestrian-oriented intersections having four or more legs per square mile For more information see here Top 6.5.8 SimulateUrbanMixMeasure This module simulates an urban mixed-use measure based on the 2001 National Household Travel Survey measure of the tract level urban/rural indicator 6.5.8.1 User Input Files Target for proportion of households (marea_mix_targets): This file represents Marea target for proportion of households located in mixed-use neighborhoods (or NA if no target) UrbanMixProp: Marea target for proportion of households located in mixed-use neighborhoods (or NA if no target) Here is a snapshot of the file: 6.5.8.2 Internal Module Inputs Package Module Outputs Description VESimLandUse SimulateHousing Pop see SimulateHousing VESimLandUse SimulateHousing UrbanPop see SimulateHousing VESimLandUse SimulateHousing TownPop see SimulateHousing VESimLandUse SimulateHousing RuralPop see SimulateHousing VESimLandUse CreateSimBzones NumHh see CreateSimBzones VESimLandUse CreateSimBzones UrbanArea see CreateSimBzones VESimLandUse CreateSimBzones TownArea see CreateSimBzones VESimLandUse CreateSimBzones RuralArea see CreateSimBzones VESimLandUse CreateSimBzones SFDU see CreateSimBzones VESimLandUse CreateSimBzones MFDU see CreateSimBzones 6.5.8.3 Module Outputs IsUrbanMixNbrhd: Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood For more information see here Top 6.5.9 AssignParkingRestrictions This module identifies parking restrictions and prices affecting households at their residences, workplaces, and other places they are likely to visit in the urban area. The module takes user inputs on parking restrictions and prices by Bzone and calculates for each household the number of free parking spaces available at the households residence, which workers pay for parking and whether their payment is part of a cash-out-buy-back program, the cost of residential parking for household vehicles that cant be parked in a free space, the cost for workplace parking, and the cost of parking for other activities such as shopping. The parking restriction/cost information is used by other modules in calculating the cost of vehicle ownership and the cost of vehicle use. #### User Input Files 1. Parking availability (marea_parking-avail_by_area-type): This file has the data for avereage number of parkings available to households * CenterPkgSpacesPerSFDU: Average number of free parking spaces available to residents of single-family dwelling units in center area type * InnerPkgSpacesPerSFDU: Average number of free parking spaces available to residents of single-family dwelling units in inner area type * OuterPkgSpacesPerSFDU: Average number of free parking spaces available to residents of single-family dwelling units in outer area type * CenterPkgSpacesPerMFDU: Average number of free parking spaces available to residents of multifamily dwelling units in center area type * InnerPkgSpacesPerMFDU: Average number of free parking spaces available to residents of multifamily dwelling units in inner area type * OuterPkgSpacesPerMFDU: Average number of free parking spaces available to residents of multifamily dwelling units in outer area type * CenterPkgSpacesPerGQ: Average number of free parking spaces available to group quarters residents in center area type * InnerPkgSpacesPerGQ: Average number of free parking spaces available to group quarters residents in inner area type * OuterPkgSpacesPerGQ: Average number of free parking spaces available to group quarters residents in outer area type Here is a snapshot of the file: Parking cost (marea_parking-cost_by_area-type): This file has the data related to parking costs and population proportions paying the parking costs CenterPropWkrPay: Proportion of workers who pay for parking in center area type InnerPropWkrPay: Proportion of workers who pay for parking in inner area type OuterPropWkrPay: Proportion of workers who pay for parking in outer area type CenterPropCashOut: Proportions of workers paying for parking in a cash-out-buy-back program in center area type InnerPropCashOut: Proportions of workers paying for parking in a cash-out-buy-back program in inner area type OuterPropCashOut: Proportions of workers paying for parking in a cash-out-buy-back program in outer area type CenterPkgCost: Average daily cost for long-term parking (e.g.Â paid on monthly basis) in center area type InnerPkgCost: Average daily cost for long-term parking (e.g.Â paid on monthly basis) in inner area type OuterPkgCost: Average daily cost for long-term parking (e.g.Â paid on monthly basis) in outer area type Here is a snapshot of the file: 6.5.9.1 Internal Module Inputs Package Module Outputs Description VESimLandUse CreateSimBzones RetEmp see CreateSimBzones VESimLandUse CreateSimBzones SvcEmp see CreateSimBzones VESimLandUse CreateSimBzones NumHh see CreateSimBzones VESimLandUse CreateSimBzones UrbanArea see CreateSimBzones VESimLandUse CreateSimBzones AreaType see CreateSimBzones VESimLandUse CreateSimBzones LocType see CreateSimBzones VESimLandUse SimulateHousing HouseType see SimulateHousing 6.5.9.2 Module Outputs FreeParkingSpaces: Number of free parking spaces available to the household ParkingUnitCost: Daily cost for long-term parking (e.g.Â paid on monthly basis) OtherParkingCost: Daily cost for parking at shopping locations or other locations of paid parking not including work (not adjusted for number of vehicle trips) PaysForParking: Does worker pay for parking: 1 = yes, 0 = no IsCashOut: Is worker paid parking in cash-out-buy-back program: 1 = yes, 0 = no ParkingCost: Daily cost for long-term parking (e.g.Â paid on monthly basis) For more information see here Top 6.5.10 AssignDemandManagement This module assigns demand management program participation to households and to workers. Households are assigned to individualized marketing program participation. Workers are assigned to employee commute options participation. The module computes the net proportional reduction in household DVMT based on the participation in travel demand management programs. #### User Input Files 1. travel demand management (marea_travel-demand-mgt_by_area-type): This file has the data for proportions participating in demand management programs * CenterEcoProp: Proportion of workers working in center area type in Marea who participate in strong employee commute options program * InnerEcoProp: Proportion of workers working in inner area type in Marea who participate in strong employee commute options program * OuterEcoProp: Proportion of workers working in outer area type in Marea who participate in strong employee commute options program * FringeEcoProp: Proportion of workers working in fringe area type in Marea who participate in strong employee commute options program * CenterImpProp: Proportion of households residing in center area type in Marea who participate in strong individualized marketing program * InnerImpProp: Proportion of households residing in inner area type in Marea who participate in strong individualized marketing program * OuterImpProp: Proportion of households residing in outer area type in Marea who participate in strong individualized marketing program * FringeImpProp: Proportion of households residing in fringe area type in Marea who participate in strong individualized marketing program Here is a snapshot of the file: 6.5.10.1 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhSize see CreateHouseholds VESimHouseholds PredictWorkers workers see PredictWorkers 6.5.10.2 Module Outputs IsIMP: dentifies whether household is participant in travel demand management individualized marketing program (IMP): 1 = yes, 0 = n PropTdmDvmtReduction: Proportional reduction in household DVMT due to participation in travel demand management programs IsECO: Identifies whether worker is a participant in travel demand management employee commute options program: 1 = yes, 0 = no For more information see here Top __ 6.5.11 AssignCarSvcAvailability This module assigns car service availability levels (Low, High) to Bzones and households. Car services include taxis, car sharing services (e.g.Â Car-To-Go, Zipcar), and future automated taxi services #### User Input Files 1. Car service availability (marea_carsvc_availability): This file has the data for acitivity proportions which are served by car services * CenterPropHighCarSvc: Proportion of activity in center area type that is served by high level car service (i.e.Â service competitive with household owned car) * InnerPropHighCarSvc: Proportion of activity in inner area type that is served by high level car service (i.e.Â service competitive with household owned car) * OuterPropHighCarSvc: Proportion of activity in outer area type that is served by high level car service (i.e.Â service competitive with household owned car) * FringePropHighCarSvc: Proportion of activity in fringe area type that is served by high level car service (i.e.Â service competitive with household owned car) Here is a snapshot of the file: 6.5.11.1 Internal Module Inputs Package Module Outputs Description VESimLandUse CreateSimBzones NumHh see CreateSimBzones VESimLandUse CreateSimBzones AreaType see CreateSimBzones VESimLandUse CreateSimBzones TotEmp see CreateSimBzones VESimLandUse Calculate4DMeasures D1D see Calculate4DMeasures 6.5.11.2 Module Outputs IsIMP: dentifies whether household is participant in travel demand management individualized marketing program (IMP): 1 = yes, 0 = n PropTdmDvmtReduction: Proportional reduction in household DVMT due to participation in travel demand management programs IsECO: Identifies whether worker is a participant in travel demand management employee commute options program: 1 = yes, 0 = no For more information see here Top __ 6.5.12 SimulateTransitService This module assigns transit service level to the urbanized portion of each Marea and to neighborhoods (SimBzones) within the urbanized area. Annual revenue-miles (i.e.Â transit miles in revenue service) by transit mode type are read from an input file #### User Input Files 1. Transit service for Marea (marea_transit_service.csv): This file contains annual revenue-miles for different transit modes for metropolitan area. * DRRevMi: Annual revenue-miles of demand-responsive public transit service * VPRevMi: Annual revenue-miles of van-pool and similar public transit service * MBRevMi: Annual revenue-miles of standard bus public transit service * RBRevMi: Annual revenue-miles of rapid-bus and commuter bus public transit service * MGRevMi: Annual revenue-miles of monorail and automated guideway public transit service * SRRevMi: Annual revenue-miles of streetcar and trolleybus public transit service * HRRevMi: Annual revenue-miles of light rail and heavy rail public transit service * CRRevMi: Annual revenue-miles of commuter rail, hybrid rail, cable car, and aerial tramway public transit service Here is a snapshot of the file: 6.5.12.1 Internal Module Inputs Package Module Outputs Description VESimLandUse CreateSimBzones NumHh see CreateSimBzones VESimLandUse CreateSimBzones AreaType see CreateSimBzones VESimLandUse CreateSimBzones TotEmp see CreateSimBzones VESimLandUse CreateSimBzones UrbanArea see CreateSimBzones VESimLandUse CreateSimBzones DevType see CreateSimBzones VESimLandUse SimulateHousing UrbanPop see SimulateHousing 6.5.12.2 Module Outputs TranRevMiPC: Ratio of annual bus-equivalent revenue-miles (i.e.Â revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population VanDvmt: Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services. BusDvmt: Total daily miles traveled by buses of various sizes to provide bus service of various types. RailDvmt: Total daily miles traveled by light rail, heavy rail, commuter rail, and similar types of vehicles. D4c: Aggregate frequency of transit service within 0.25 miles of block group boundary per hour during evening peak period (Ref: EPA 2010 Smart Location Database) For more information see here Top __ 6.5.13 SimulateRoadMiles This module assigns freeway and arterial lane-miles to metropolitan areas (Marea) and calculates freeway lane-miles per capita. #### User Input Files 1. Lane-Miles for Marea (marea_lane_miles.csv): This file contains inputs on the numbers of freeway lane-miles and arterial lane-miles by Marea and year. * FwyLaneMi: Lane-miles of roadways functionally classified as freeways or expressways in the urbanized portion of the metropolitan area * ArtLaneMi: Lane-miles of roadways functionally classified as arterials (but not freeways or expressways) in the urbanized portion of the metropolitan area Here is a snapshot of the file: 6.5.13.1 Internal Module Inputs Package Module Outputs Description VESimLandUse SimulateHousing UrbanPop see SimulateHousing 6.5.13.2 Module Outputs FwyLaneMiPC: Ratio of urbanized area freeway and expressway lane-miles to urbanized area population For more information see here Top 6.5.14 AssignDrivers This module assigns drivers by age group to each household as a function of the numbers of persons and workers by age group, the household income, land use characteristics, and public transit availability. 6.5.14.1 User Input Files Adjustment proportion for household drivers by age group for the region (region_hh_driver_adjust_prop.csv): This file specifies the relative driver licensing rate relative to the model estimation data year in order to account for observed or projected changes in licensing rates. Drv15to19AdjProp: Target proportion of unadjusted model number of drivers 15 to 19 years old (1 = no adjustment) Drv20to29AdjProp: Target proportion of unadjusted model number of drivers 20 to 29 years old (1 = no adjustment) Drv30to54AdjProp: Target proportion of unadjusted model number of drivers 30 to 54 years old (1 = no adjustment) Drv55to64AdjProp: Target proportion of unadjusted model number of drivers 55 to 64 years old (1 = no adjustment) Drv65PlusAdjProp: Target proportion of unadjusted model number of drivers 65 or older (1 = no adjustment) Here is a snapshot of the file: 6.5.14.2 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService TranRevMiPC Ratio of annual bus-equivalent revenue-miles (i.e.Â revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds PredictIncome Income Total annual income of household VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides 6.5.14.3 Module Outputs Drv15to19: Number of drivers 15 to 19 years old Drv20to29: Number of drivers 20 to 29 years old Drv30to54: Number of drivers 30 to 54 years old Drv55to64: Number of drivers 55 to 64 years old Drv65Plus: Number of drivers 65 or older Drivers: Number of drivers in household DrvAgePersons: Number of people 15 year old or older in the household For more information see here Top 6.5.15 AssignVehicleOwnership This module determines the number of vehicles owned or leased by each household as a function of household characteristics, land use characteristics, and transportation system characteristics. 6.5.15.1 User Input Files This module has no user input requirements. 6.5.15.2 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService TranRevMiPC Ratio of annual bus-equivalent revenue-miles to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds PredictWorkers Workers Total workers in the household VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VELandUse PredictHousing HouseType Type of dwelling unit of the household VESimHouseholds PredictIncome Income Total annual income of household VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides 6.5.15.3 Module Outputs Vehicles: Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons For more information see here Top 6.5.16 AssignVehicleType This module identifies how many household vehicles are light trucks and how many are automobiles. Light trucks include pickup trucks, sport utility vehicles, vans, and any other vehicle not classified as a passenger car. Automobiles are vehicles classified as passenger cars. 6.5.16.1 User Input Files Light truck proportion for Azone (azone_lttrk_prop.csv): This file specifies the light truck proportion of the vehicle fleet. LtTrkProp: Proportion of household vehicles that are light trucks (pickup, SUV, van). Here is a snapshot of the file: 6.5.16.2 Internal Module Inputs Package Module Outputs Description VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VELandUse PredictHousing HouseType Type of dwelling unit of the household VESimHouseholds PredictIncome Income Total annual income of household VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood 6.5.16.3 Module Outputs NumLtTrk: Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household NumAuto: Number of automobiles (i.e., four-tire passenger vehicles that are not light trucks) owned or leased by household For more information see here Top 6.5.17 CreateVehicleTable This module creates a vehicle table and populates it with household ID and geography fields. 6.5.17.1 User Input Files Car service characteristics for Azone (azone_carsvc_characteristics.csv): This file specifies the different characteristics for high and low car service levels HighCarSvcCost: Average cost in dollars per mile for travel by high service level car service LowCarSvcCost: Average cost in dollars per mile for travel by low service level car service AveCarSvcVehicleAge: Average age of car service vehicles in years LtTrkCarSvcSubProp: The proportion of light-truck owners who would substitute a less-costly car service option for owning their light truck AutoCarSvcSubProp: The proportion of automobile owners who would substitute a less-costly car service option for owning their automobile Here is a snapshot of the file: 6.5.17.2 Internal Module Inputs Package Module Outputs Description VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignDrivers DrvAgePersons Number of people 15 year old or older in the household VELandUse AssignCarSvcAvailability CarSvcLevel Level of car service availability for household. High means access is competitive with household owned car. Low is not competitive. 6.5.17.3 Module Outputs VehId: Unique vehicle ID VehicleAccess: Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) For more information see here Top 6.5.18 AssignVehicleAge This module assigns vehicle ages to each household vehicle. Vehicle age is assigned as a function of the vehicle type (auto or light truck), household income, and assumed mean vehicle age by vehicle type and Azone. Car service vehicles are assigned an age based on input assumptions with no distinction between vehicle type. 6.5.18.1 User Input Files Vehicles mean age for Azone (azone_hh_veh_mean_age.csv): This file provides inputs for mean auto age and mean light truck age in azone. AutoMeanAge: Mean age of automobiles owned or leased by households. LtTrkMeanAge: Mean age of light trucks owned or leased by households. Here is a snapshot of the file: Car service characteristics for Azone (azone_carsvc_characteristics.csv): This file specifies the different characteristics for high and low car service levels AveCarSvcVehicleAge: Average age of car service vehicles in years Here is a snapshot of the file: 6.5.18.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VESimHouseholds PredictIncome Income Total annual income of household VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) 6.5.18.3 Module Outputs Type: Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) Age: Vehicle age in years For more information see here Top 6.5.19 CalculateVehicleOwnCost This module calculates average vehicle ownership cost for each vehicle based on the vehicle type and age using data from the American Automobile Association (AAA). To this are added the cost of parking at the vehicle residence if free parking is not available for all household vehicles. The ownership cost is converted into an average ownership cost per mile by predicting the household DVMT, given the number of owned vehicles and splitting the miles equally among each vehicle. #### User Input Files 1. Vehicle ownership taxes for Azone (azone_hh_veh_own_taxes.csv): This file provides inputs for flat fees/taxes (i.e.Â annual cost per vehicle) and ad valorem taxes (i.e.Â percentage of vehicle value paid in taxes). * VehOwnFlatRateFee: Annual flat rate tax per vehicle in dollars * VehOwnAdValoremTax: Annual proportion of vehicle value paid in taxes Here is a snapshot of the file: Proportion of pay-as-you-drive (PAYD) insurance users for Azone (azone_payd_insurance_prop.csv): This file provides inputs on the proportion of households having PAYD insurance. PaydHhProp: Proportion of households in the Azone who have pay-as-you-drive insurance for their vehicles Here is a snapshot of the file: 6.5.19.1 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleAge Age Vehicle age in years VELandUse AssignParkingRestrictions FreeParkingSpaces Number of free parking spaces available to the household VELandUse AssignParkingRestrictions ParkingUnitCost Daily cost for long-term parking (e.g.Â paid on monthly basis) VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VEHouseholdVehicles AssignDrivers Drv15to19 Number of drivers 15 to 19 years old VEHouseholdVehicles AssignDrivers Drv20to29 Number of drivers 20 to 29 years old VEHouseholdVehicles AssignDrivers Drv30to54 Number of drivers 30 to 54 years old VEHouseholdVehicles AssignDrivers Drv55to64 Number of drivers 55 to 64 years old VEHouseholdVehicles AssignDrivers Drv65Plus Number of drivers 65 and older VESimHouseholds PredictIncome Income Total annual income of household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household 6.5.19.2 Module Outputs OwnCost: Annual cost of vehicle ownership including depreciation, financing, insurance, taxes, and residential parking in dollars OwnCostPerMile: Annual cost of vehicle ownership per mile of vehicle travel (dollars per mile) InsCost: Annual vehicle insurance cost in dollars HasPaydIns: Identifies whether household has pay-as-you-drive insurance for vehicles: 1 = Yes, 0 = no For more information see here Top 6.5.20 AdjustVehicleOwnership This module adjusts household vehicle ownership based on a comparison of the cost of owning a vehicle per mile of travel compared to the cost per mile of using a car service in locations where the level of car service quality is high. The determination of whether car services are substituted for ownership also depends on input assumptions regarding the average likelihood that an owner would substitute car services for a household vehicle. 6.5.20.1 User Input Files Car service characteristics for Azone (azone_carsvc_characteristics.csv): This file specifies the different characteristics for high and low car service levels HighCarSvcCost: Average cost in dollars per mile for travel by high service level car service LowCarSvcCost: Average cost in dollars per mile for travel by low service level car service AveCarSvcVehicleAge: Average age of car service vehicles in years LtTrkCarSvcSubProp: The proportion of light-truck owners who would substitute a less-costly car service option for owning their light truck AutoCarSvcSubProp: The proportion of automobile owners who would substitute a less-costly car service option for owning their automobile Here is a snapshot of the file: 6.5.20.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household VELandUse AssignCarSvcAvailability CarSvcLevel Level of car service availability for household. High means access is competitive with household owned car. Low is not competitive. VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleAge Age Vehicle age in years ouseholdVehicles CalculateVehicleOwnCost OwnCost Annual cost of vehicle ownership including depreciation, financing, insurance, taxes, and residential parking in dollars VEHouseholdVehicles CalculateVehicleOwnCost OwnCostPerMile Annual cost of vehicle ownership per mile of vehicle travel (dollars per mile) VEHouseholdVehicles CalculateVehicleOwnCost InsCost Annual vehicle insurance cost in dollars 6.5.20.3 Module Outputs VehicleAccess: Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) OwnCost: Annual cost of vehicle ownership per mile of vehicle travel (dollars per mile) OwnCostPerMile:Annual cost of vehicle ownership per mile of vehicle travel (dollars per mile) InsCost: Annual vehicle insurance cost in dollars SwitchToCarSvc: Identifies whether a vehicle was switched from owned to car service OwnCostSavings: Annual vehicle ownership cost (depreciation, finance, insurance, taxes) savings in dollars resulting from substituting the use of car services for a household vehicle OwnCost:Annual household vehicle ownership cost (depreciation, finance, insurance, taxes) savings in dollars Vehicles:Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons NumLtTrk:Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household NumAuto:Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household NumHighCarSvc:Number of high level service car service vehicles available to the household (difference between number of vehicles owned by the household and number of driving age persons for households having availability of high level car services For more information see here Top 6.5.21 CalculateHouseholdDvmt This module models household average daily vehicle miles traveled as a function of household characteristics, vehicle ownership, and attributes of the neighborhood and metropolitan area where the household resides. #### User Input Files This module has no user input requirements. 6.5.21.1 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService TranRevMiPC Ratio of annual bus-equivalent revenue-miles (i.e.Â revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population VETransportSupply AssignRoadMiles FwyLaneMiPC Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e., developable) land in zone VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VESimHouseholds PredictWorkers Workers Total workers in the household VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VESimHouseholds PredictIncome Income Total annual income of household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood 6.5.21.2 Module Outputs Dvmt: Average daily vehicle miles traveled by the household in autos or light trucks UrbanHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the urbanized portion of the Marea TownHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in town (urban but not urbanized) portion of the Marea RuralHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the rural (non-urban) portion of the Marea For more information see here Top 6.5.22 CalculateAltModeTrips This module calculates household transit trips, walk trips, and bike trips. The models are sensitive to household DVMT so they are run after all household DVMT adjustments (e.g.Â to account for cost on household DVMT) are made. #### User Input Files This module has no user input requirements. 6.5.22.1 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService TranRevMiPC Ratio of annual bus-equivalent revenue-miles (i.e.Â revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VESimHouseholds CreateHouseholds Age20to29 Persons in 20 to 29 year old age group VESimHouseholds CreateHouseholds Age30to54 Persons in 30 to 54 year old age group VESimHouseholds CreateHouseholds Age55to64 Persons in 55 to 64 year old age group VESimHouseholds CreateHouseholds Age65Plus Persons in 65 or older age group VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VESimHouseholds PredictIncome Income Total annual income of household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks 6.5.22.2 Module Outputs WalkTrips: Average number of walk trips per year by household members BikeTrips: Average number of bicycle trips per year by household members TransitTrips:Average number of public transit trips per year by household members For more information see here Top 6.5.23 CalculateVehicleTrips This module calculates average daily vehicle trips for households consistent with the household DVMT. An average trip length model is applied to estimate average length of household trips reflecting the characteristics of the household and the place where they live. The average trip length is divided into the average household DVMT to get an estimate of average number of daily vehicle trips. #### User Input Files This module has no user input requirements. 6.5.23.1 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignRoadMiles FwyLaneMiPC Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VESimHouseholds PredictIncome Income Total annual income of household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks 6.5.23.2 Module Outputs VehicleTrips: Average number of vehicle trips per day by household members AveVehTripLen: Average household vehicle trip length in miles For more information see here Top 6.5.24 DivertSovTravel This module reduces household single-occupant vehicle (SOV) travel to achieve goals that are inputs to the model. The purpose of this module is to enable users to do what if analysis of the potential of light-weight vehicles (e.g.Â bicycles, electric bikes, electric scooters) and infrastructure to support their use to reduce SOV travel. #### User Input Files 1. Proportion of diverted SOVs for Azone (azone_prop_sov_dvmt_diverted.csv): This file provides inputs for a goal for diverting a portion of SOV travel within a 20-mile tour distance (round trip distance). * PropSovDvmtDiverted: Goals for the proportion of household DVMT in single occupant vehicle tours with round-trip distances of 20 miles or less be diverted to bicycling or other slow speed modes of travel Here is a snapshot of the file: 6.5.24.1 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignRoadMiles FwyLaneMiPC Ratio of urbanized area freeway and expressway lane-miles to urbanized area population VELandUse Calculate4DMeasures D1B Gross population density (people/acre) on unprotected (i.e.Â developable) land in zone VESimHouseholds CreateHouseholds HHSize Number of persons in the household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignDrivers Drivers Number of drivers in household VESimHouseholds PredictIncome Income Total annual income of household VELandUse CalculateUrbanMixMeasure IsUrbanMixNbrhd Flag identifying whether household is (1) or is not (0) in urban mixed-use neighborhood VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks VESimHouseholds CreateHouseholds Age0to14 Persons in 0 to 14 year old age group VESimHouseholds CreateHouseholds Age15to19 Persons in 15 to 19 year old age group VELandUse PredictHousing HouseType Type of dwelling unit of the household 6.5.24.2 Module Outputs PropDvmtDiverted: Proportion of household DVMT diverted to bicycling, electric bikes, or other low-speed travel modes AveTrpLenDiverted: Average length in miles of vehicle trips diverted to bicycling, electric bikes, or other low-speed travel modes For more information see here Top 6.5.25 Initialize-vepowertrainsandfuels This module processes vehicle and fuel characteristics files that model users may optionally supply. When these files are supplied, modules in the package that compute carbon intensities of vehicle travel will use the user-supplied data instead of the datasets that are part of the package (see the LoadDefaultValues.R script). #### User Input Files 1. Carbon intensity of electricity for Azone (azone_electricity_carbon_intensity.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the carbon intensity of electricity. ElectricityCI: Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) Here is a snapshot of the file: Average fuel carbon intensity of transit for Marea (marea_transit_ave_fuel_carbon_intensity.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the average carbon intensity of fuel used by transit. TransitVanFuelCI: Average carbon intensity of fuel used by transit vans (grams CO2e per megajoule) TransitBusFuelCI: Average carbon intensity of fuel used by transit buses (grams CO2e per megajoule) TransitRailFuelCI: Average carbon intensity of fuel used by transit rail vehicles (grams CO2e per megajoule) Here is a snapshot of the file: Biofuels proportions of transit fuels by Marea (marea_transit_biofuel_mix.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the biofuel used by transit services. TransitEthanolPropGasoline: Ethanol proportion of gasoline used by transit vehicles TransitBiodieselPropDiesel: Biodiesel proportion of diesel used by transit vehicles TransitRngPropCng: Renewable natural gas proportion of compressed natural gas used by transit vehicles Here is a snapshot of the file: Transit fuels proportions by transit vehicle type and Marea (marea_transit_fuel.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the transit fuels proportions. VanPropDiesel: Proportion of non-electric transit van travel powered by diesel VanPropGasoline: Proportion of non-electric transit van travel powered by gasoline VanPropCng: Proportion of non-electric transit van travel powered by compressed natural gas BusPropDiesel: Proportion of non-electric transit bus travel powered by diesel BusPropGasoline: Proportion of non-electric transit bus travel powered by gasoline BusPropCng: Proportion of non-electric transit bus travel powered by compressed natural gas RailPropDiesel: Proportion of non-electric transit rail travel powered by diesel RailPropGasoline: Proportion of non-electric transit rail travel powered by gasoline Here is a snapshot of the file: Transit powertrain proportions by transit vehicle type and Marea (marea_transit_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the mixes of transit vehicle powertrains. VanPropIcev: Proportion of transit van travel using internal combustion engine powertrains VanPropHev: Proportion of transit van travel using hybrid electric powertrains VanPropBev: Proportion of transit van travel using battery electric powertrains BusPropIcev: Proportion of transit bus travel using internal combustion engine powertrains BusPropHev: Proportion of transit bus travel using hybrid electric powertrains BusPropBev: Proportion of transit bus travel using battery electric powertrains RailPropIcev: Proportion of transit rail travel using internal combustion engine powertrains RailPropHev: Proportion of transit rail travel using hybrid electric powertrains RailPropEv: Proportion of transit rail travel using electric powertrains Here is a snapshot of the file: Average carbon intensities of fuels by vehicle category for the model region (region_ave_fuel_carbon_intensity.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the average carbon density for different vehicle types. HhFuelCI: Average carbon intensity of fuels used by household vehicles (grams CO2e per megajoule) CarSvcFuelCI: Average carbon intensity of fuels used by car service vehicles (grams CO2e per megajoule) ComSvcFuelCI: Average carbon intensity of fuels used by commercial service vehicles (grams CO2e per megajoule) HvyTrkFuelCI: Average carbon intensity of fuels used by heavy trucks (grams CO2e per megajoule) TransitVanFuelCI: Average carbon intensity of fuels used by transit vans (grams CO2e per megajoule) TransitBusFuelCI: Average carbon intensity of fuels used by transit buses (grams CO2e per megajoule) TransitRailFuelCI: Average carbon intensity of fuels used by transit rail vehicles (grams CO2e per megajoule) Here is a snapshot of the file: Car service vehicle powertrain proportions by vehicle type for the model region (region_carsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of car services. CarSvcAutoPropIcev: Proportion of car service automobile travel powered by internal combustion engine powertrains CarSvcAutoPropHev: Proportion of car service automobile travel powered by hybrid electric powertrains CarSvcAutoPropBev: Proportion of car service automobile travel powered by battery electric powertrains CarSvcLtTrkPropIcev: Proportion of car service light truck travel powered by internal combustion engine powertrains CarSvcLtTrkPropHev: Proportion of car service light truck travel powered by hybrid electric powertrains CarSvcLtTrkPropBev: Proportion of car service light truck travel powered by battery electric powertrains Here is a snapshot of the file: Commercial service vehicle powertrain proportions by vehicle type (region_comsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of commercial vehicles. ComSvcAutoPropIcev: Proportion of commercial service automobile travel powered by internal combustion engine powertrains ComSvcAutoPropHev: Proportion of commercial service automobile travel powered by hybrid electric powertrains ComSvcAutoPropBev: Proportion of commercial service automobile travel powered by battery electric powertrains ComSvcLtTrkPropIcev: Proportion of commercial service light truck travel powered by internal combustion engine powertrains ComSvcLtTrkPropHev: Proportion of commercial service light truck travel powered by hybrid electric powertrains ComSvcLtTrkPropBev: Proportion of commercial service light truck travel powered by battery electric powertrainss Here is a snapshot of the file: Heavy duty truck powertrain proportions (region_hvytrk_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of heavy duty trucks. HvyTrkPropIcev: Proportion of heavy truck travel powered by internal combustion engine powertrains HvyTrkPropHev: Proportion of heavy truck travel powered by hybrid electric powertrains HvyTrkPropBev: Proportion of heavy truck travel powered by battery electric powertrains Here is a snapshot of the file: 6.5.25.1 Internal Module Inputs This module uses no datasets that are in the datastore. 6.5.25.2 Module Outputs This module produces no datasets to store in the datastore. For more information see here Top 6.5.26 CalculateCarbonIntensity This module calculates the average carbon intensity of fuels (grams CO2e per megajoule) by transportation mode and vehicle type. The transportation modes and vehicle types are: Mode Vehicle Types Household automobile, light truck Car Service automobile, light truck Commercial Service automobile, light truck Heavy Truck heavy truck Public Transit van, bus, rail Average fuel carbon intensities for public transit vehicles are calculated by Marea. The average fuel carbon intensities for the other mode vehicles are calculated for the entire model region. The module also calculates the average carbon intensity of electricity at the Azone level. Note that this module uses the user input files only if the user runs Initialize module. Otherwise the module uses default inputs in the instfolder. 6.5.26.1 User Input Files Carbon intensity of electricity for Azone (azone_electricity_carbon_intensity.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the carbon intensity of electricity. ElectricityCI: Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) Here is a snapshot of the file: Biofuels proportions of transit fuels by Marea (marea_transit_biofuel_mix.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the biofuel used by transit services. TransitEthanolPropGasoline: Ethanol proportion of gasoline used by transit vehicles TransitBiodieselPropDiesel: Biodiesel proportion of diesel used by transit vehicles TransitRngPropCng: Renewable natural gas proportion of compressed natural gas used by transit vehicles Here is a snapshot of the file: Transit fuels proportions by transit vehicle type and Marea (marea_transit_fuel.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the transit fuels proportions. VanPropDiesel: Proportion of non-electric transit van travel powered by diesel VanPropGasoline: Proportion of non-electric transit van travel powered by gasoline VanPropCng: Proportion of non-electric transit van travel powered by compressed natural gas BusPropDiesel: Proportion of non-electric transit bus travel powered by diesel BusPropGasoline: Proportion of non-electric transit bus travel powered by gasoline BusPropCng: Proportion of non-electric transit bus travel powered by compressed natural gas RailPropDiesel: Proportion of non-electric transit rail travel powered by diesel RailPropGasoline: Proportion of non-electric transit rail travel powered by gasoline Here is a snapshot of the file: Average carbon intensities of fuels by vehicle category for the model region (region_ave_fuel_carbon_intensity.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the average carbon density for different vehicle types. HhFuelCI: Average carbon intensity of fuels used by household vehicles (grams CO2e per megajoule) CarSvcFuelCI: Average carbon intensity of fuels used by car service vehicles (grams CO2e per megajoule) ComSvcFuelCI: Average carbon intensity of fuels used by commercial service vehicles (grams CO2e per megajoule) HvyTrkFuelCI: Average carbon intensity of fuels used by heavy trucks (grams CO2e per megajoule) TransitVanFuelCI: Average carbon intensity of fuels used by transit vans (grams CO2e per megajoule) TransitBusFuelCI: Average carbon intensity of fuels used by transit buses (grams CO2e per megajoule) TransitRailFuelCI: Average carbon intensity of fuels used by transit rail vehicles (grams CO2e per megajoule) Here is a snapshot of the file: 6.5.26.2 Internal Module Inputs This module does not have any internal module inputs 6.5.26.3 Module Outputs ElectricityCI: Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) HhAutoFuelCI: Average carbon intensity of fuels used by household automobiles (grams CO2e per megajoule) HhLtTrkFuelCI: Average carbon intensity of fuels used by household light trucks (grams CO2e per megajoule) CarSvcAutoFuelCI: Average carbon intensity of fuels used by car service automobiles (grams CO2e per megajoule) CarSvcLtTrkFuelCI: Average carbon intensity of fuels used by car service light trucks (grams CO2e per megajoule) ComSvcAutoFuelCI: Average carbon intensity of fuels used by commercial service automobiles (grams CO2e per megajoule) ComSvcLtTrkFuelCI: Average carbon intensity of fuels used by commercial service light trucks (grams CO2e per megajoule) HvyTrkFuelCI: Average carbon intensity of fuels used by heavy trucks (grams CO2e per megajoule) TransitVanFuelCI: Average carbon intensity of fuel used by transit vans (grams CO2e per megajoule) TransitBusFuelCI: Average carbon intensity of fuel used by transit buses (grams CO2e per megajoule) TransitRailFuelCI: Average carbon intensity of fuel used by transit rail vehicles (grams CO2e per megajoule) For more information see here Top 6.5.27 AssignHhVehiclePowertrain This module assigns a powertrain type to each household vehicle. The powertrain types are internal combustion engine vehicle (ICEV), hybrid electric vehicle (HEV), plug-in hybrid electric vehicle (PHEV), and battery electric vehicles (BEV). The module also assigns related characteristics to household vehicles including: Battery range (for PHEV and BEV) Miles per gallon (MPG) and gallons per mile (GPM) Miles per kilowatt-hour (MPKWH) and kilowatt-hours per mile (KWHPM) Miles per gasoline gallon equivalent (MPGe) The proportion of DVMT powered by electricity Carbon dioxide equivalent emissions per mile powered by hydrocarbon fuel Carbon dioxide equivalent emissions per mile powered by electricity 6.5.27.1 User Input Files Charging availability for Azone (azone_charging_availability.csv): This input file supplies data on proportion of different household types who has available charging PropSFChargingAvail: Proportion of single-family dwellings in Azone that have PEV charging facilties installed or able to be installed PropMFChargingAvail: Proportion of multi-family dwelling units in Azone that have PEV charging facilities available PropGQChargingAvail: Proportion of group quarters dwelling units in Azone that have PEV charging facilities available Here is a snapshot of the file: Car service vehicle powertrain proportions by vehicle type for the model region (region_carsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of car services. CarSvcAutoPropIcev: Proportion of car service automobile travel powered by internal combustion engine powertrains CarSvcAutoPropHev: Proportion of car service automobile travel powered by hybrid electric powertrains CarSvcAutoPropBev: Proportion of car service automobile travel powered by battery electric powertrains CarSvcLtTrkPropIcev: Proportion of car service light truck travel powered by internal combustion engine powertrains CarSvcLtTrkPropHev: Proportion of car service light truck travel powered by hybrid electric powertrains CarSvcLtTrkPropBev: Proportion of car service light truck travel powered by battery electric powertrains Here is a snapshot of the file: 6.5.27.2 Internal Module Inputs Package Module Outputs Description VEPowertrainsAndFuels CalculateCarbonIntensity ElectricityCI Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity HhAutoFuelCI Average carbon intensity of fuels used by household automobiles (grams CO2e per megajoule)) VEPowertrainsAndFuels CalculateCarbonIntensity HhLtTrkFuelCI Average carbon intensity of fuels used by household light trucks (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity CarSvcAutoFuelCI Average carbon intensity of fuels used by car service automobiles (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity CarSvcLtTrkFuelCI Average carbon intensity of fuels used by car service light trucks (grams CO2e per megajoule) ESimHouseholds CreateHouseholds HhId Household id VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VELandUse PredictHousing HouseType Type of dwelling unit of the household VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleAge Age Vehicle age in years VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) 6.5.27.3 Module Outputs Powertrain: Vehicle powertrain type: ICEV = internal combustion engine vehicle, HEV = hybrid electric vehicle, PHEV = plug-in hybrid electric vehicle, BEV = battery electric vehicle, NA = not applicable because is a car service vehicle BatRng: Miles of travel possible on fully charged battery MPG: Average miles of vehicle travel powered by fuel per gasoline equivalent gallon GPM: Average gasoline equivalent gallons per mile of vehicle travel powered by fuel MPKWH: Average miles of vehicle travel powered by electricity per kilowatt-hour KWHPM: Average kilowatt-hours per mile of vehicle travel powered by electricity MPGe: Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) ElecDvmtProp: Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) FuelCO2ePM: Average grams of carbon-dioxide equivalents produced per mile of travel powered by fuel ElecCO2ePM: Average grams of carbon-dioxide equivalents produced per mile of travel powered by electricity For more information see here Top 6.5.28 Initialize-vetravelperformance This module reads and processes roadway DVMT and operations inputs. The following input files are optional. If these data are not provided, the model calculates values based on default data included with the package and processed by the LoadDefaultRoadDvmtValues.R script. 6.5.28.1 User Input Files Base year highway truck dvmt for region (region_base_year_hvytrk_dvmt.csv): This input file is OPTIONAL. It is only needed if the user wants to adjust heavy truck dvmt for base year HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value HvyTrkDvmt: Average daily vehicle miles of travel on roadways in the region by heavy trucks during he base year HvyTrkDvmtUrbanProp: Proportion of Region heavy truck daily vehicle miles of travel occurring on urbanized area roadways Here is a snapshot of the file: Base year dvmt for Marea (marea_base_year_dvmt.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the adjust dvmt growth factors from base year in by Marea ComSvcDvmtGrowthBasis: Factor used to grow commercial service vehicle DVMT in Marea from base year value HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value UrbanLdvDvmt: Average daily vehicle miles of travel on roadways in the urbanized portion of the Marea by light-duty vehicles during the base year UrbanHvyTrkDvmt: Average daily vehicle miles of travel on roadways in the urbanized portion of the Marea by heavy trucks during he base year Here is a snapshot of the file: DVMT split by road class by Marea (marea_dvmt_split_by_road_class.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the dvmt split for different road classes. LdvFwyArtDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways Here is a snapshot of the file: Operations deployment effects on dvmt for Marea (marea_operations_deployment.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the proportion of dvmt affected by operations for different road classes. RampMeterDeployProp: Proportion of freeway DVMT affected by ramp metering deployment IncidentMgtDeployProp: Proportion of freeway DVMT affected by incident management deployment SignalCoordDeployProp: Proportion of arterial DVMT affected by signal coordination deployment AccessMgtDeployProp: Proportion of arterial DVMT affected by access management deployment OtherFwyOpsDeployProp: Proportion of freeway DVMT affected by deployment of other user-defined freeway operations measures OtherArtOpsDeployProp: Proportion of arterial DVMT affected by deployment of other user-defined arterial operations measures Here is a snapshot of the file: Other operations effects (other_ops_effectiveness.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the other delay effects of operations in different road classes Level: Congestion levels: None = none, Mod = moderate, Hvy = heavy, Sev = severe, Ext = extreme Art_Rcr: Percentage reduction of recurring arterial delay that would occur with full deployment of other user-defined arterial operations measures Art_NonRcr: Percentage reduction of non-recurring arterial delay that would occur with full deployment of other user-defined arterial operations measures Fwy_Rcr: Percentage reduction of recurring freeway delay that would occur with full deployment of other user-defined freeway operations measures Fwy_NonRcr: Percentage reduction of non-recurring freeway delay that would occur with full deployment of other user-defined freeway operations measures Here is a snapshot of the file: Charges by congestion levels by road class for Marea (marea_congestion_charges.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the charges of vehicle travel for different congestion levels FwyNoneCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of no congestion FwyModCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of moderate congestion FwyHvyCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of heavy congestion FwySevCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of severe congestion FwyExtCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of extreme congestion ArtNoneCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of no congestion ArtModCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of moderate congestion ArtHvyCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of heavy congestion ArtSevCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of severe congestion ArtExtCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of extreme congestion Here is a snapshot of the file: 6.5.28.2 Internal Module Inputs This module uses no datasets that are in the datastore. 6.5.28.3 Module Outputs This module produces no datasets to store in the datastore. Top 6.5.29 CalculateBaseRoadDvmt This module calculates base year roadway DVMT by vehicle type (light-duty, heavy truck, bus) and the distribution of roadway DVMT by vehicle type to roadway classes (freeway, arterial, other) This module uses optional user inputs if Initialize module is run. Otherwise, it uses default data in instfolder 6.5.29.1 User Input Files Base year highway truck dvmt for region (region_base_year_hvytrk_dvmt.csv): This input file is OPTIONAL. It is only needed if the user wants to adjust heavy truck dvmt for base year HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value HvyTrkDvmt: Average daily vehicle miles of travel on roadways in the region by heavy trucks during he base year HvyTrkDvmtUrbanProp: Proportion of Region heavy truck daily vehicle miles of travel occurring on urbanized area roadways Here is a snapshot of the file: Base year dvmt for Marea (*marea_base_year_dvmt.csv**): This input file is OPTIONAL. It is only needed if the user wants to modify the adjust dvmt growth factors from base year in by Marea ComSvcDvmtGrowthBasis: Factor used to grow commercial service vehicle DVMT in Marea from base year value HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value UrbanLdvDvmt: Average daily vehicle miles of travel on roadways in the urbanized portion of the Marea by light-duty vehicles during the base year UrbanHvyTrkDvmt: Average daily vehicle miles of travel on roadways in the urbanized portion of the Marea by heavy trucks during he base year Here is a snapshot of the file: DVMT split by road class by Marea (marea_dvmt_split_by_road_class.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the dvmt split for different road classes. LdvFwyArtDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways 6.5.29.2 Internal Module Inputs Package Module Outputs Description VETransportSupply AssignTransitService VanDvmt Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services VETransportSupply AssignTransitService BusDvmt Total daily miles traveled by buses of various sizes to provide bus service of various types VETransportSupply AssignTransitService RailDvmt Total daily miles traveled by light rail, heavy rail, commuter rail, and similar types of vehicles VELandUse AssignLocTypes UrbanPop Urbanized area population VELandUse AssignLocTypes RuralPop Rural (i.e.Â non-urbanized area) population VELandUse AssignLocTypes RuralIncome Total household income of the rural (i.e.Â non-urbanized area) population VELandUse AssignLocTypes UrbanIncome Total household income of the rural (i.e.Â non-urbanized area) population VEHouseholdTravel CalculateHouseholdDvmt UrbanHhDvmt Average daily vehicle miles traveled in autos or light trucks by households residing in the urbanized portion of the Marea VEHouseholdTravel CalculateHouseholdDvmt RuralHhDvmt Average daily vehicle miles traveled in autos or light trucks by households residing in the rural (non-urban) portion of the Marea 6.5.29.3 Module Outputs HvyTrkDvmtUrbanProp: Proportion of Region heavy truck daily vehicle miles of travel occurring on urbanized area roadways HvyTrkDvmtIncomeFactor: Ratio of Region base year heavy truck DVMT to household income HvyTrkDvmtPopulationFactor: Ratio of Region base year heavy truck DVMT to population HvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles of travel in urbanized areas HvyTrkRuralDvmt: Base year Region heavy truck daily vehicle miles of travel in rural (i.e.Â non-urbanized) areas ComSvcDvmtHhDvmtFactor: Ratio of Marea base year commercial service DVMT to household DVMT ComSvcDvmtIncomeFactor: Ratio of base year commercial service vehicle DVMT to household income ComSvcDvmtPopulationFactor: Ratio of base year commercial service vehicle DVMT to population HvyTrkDvmtPopulationFactor: Ratio of base year heavy truck DVMT to population LdvRoadDvmtLdvDemandRatio: Ratio between light-duty vehicle (LDV) daily vehicle miles of travel (DVMT) on urbanized area roadways in the Marea to the total LDV DVMT of households residing in the urbanized area, the commercial service vehicle travel related to household demand, and LDV public transit DVMT. ComSvcUrbanDvmt: Commercial service daily vehicle miles of travel associated with Marea urbanized household activity ComSvcRuralDvmt: Commercial service daily vehicle miles of travel associated with Marea rural household activity LdvFwyArtDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmtProp: Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmtProp: Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmtProp: Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways LdvFwyArtDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmt:Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways Top 6.5.30 CalculateFutureRoadDvmt This module calculates future year roadway DVMT by vehicle type (light-duty, heavy truck, bus) and the distribution of roadway DVMT by vehicle type to roadway classes (freeway, arterial, other) This module uses optional user inputs if Initialize module is run. Otherwise, it uses default data in instfolder 6.5.30.1 User Input Files Base year highway truck dvmt for region (region_base_year_hvytrk_dvmt.csv): This input file is OPTIONAL. It is only needed if the user wants to adjust heavy truck dvmt for base year HvyTrkDvmtGrowthBasis: Factor used to grow heavy truck DVMT from base year value Base year dvmt for Marea (*marea_base_year_dvmt.csv**): This input file is OPTIONAL. It is only needed if the user wants to modify the adjust dvmt growth factors from base year in by Marea ComSvcDvmtGrowthBasis: Factor used to grow commercial service vehicle DVMT in Marea from base year value Here is a snapshot of the file: Here is a snapshot of the file: 6.5.30.2 Internal Module Inputs Package Module Outputs Description VETravelPerformance CalculateBaseRoadDvmt HvyTrkDvmtIncomeFactor Ratio of Region base year heavy truck DVMT to household income vetravelperformance CalculateBaseRoadDvmt HvyTrkDvmtUrbanProp proportion of region heavy truck daily vehicle miles of travel occurring on urbanized area roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkDvmtPopulationFactor Ratio of Region base year heavy truck DVMT to population VETravelPerformance CalculateBaseRoadDvmt LdvFwyArtDvmtProp Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways VETravelPerformance CalculateBaseRoadDvmt LdvOthDvmtProp Proportion of light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkFwyDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt LdvOthDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt HvyTrkFwyDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkArtDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkOthDvmtProp Proportion of heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateBaseRoadDvmt BusFwyDvmtProp Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt BusArtDvmtProp Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt BusOthDvmtProp Proportion of bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways VETravelPerformance CalculateBaseRoadDvmt ComSvcDvmtHhDvmtFactor Ratio of Marea base year commercial service DVMT to household DVMT VETravelPerformance CalculateBaseRoadDvmt ComSvcDvmtIncomeFactor Ratio of base year commercial service vehicle DVMT to household income VELandUse CalculateBaseRoadDvmt ComSvcDvmtPopulationFactor Ratio of base year commercial service vehicle DVMT to population VELandUse CalculateBaseRoadDvmt HvyTrkDvmtPopulationFactor Ratio of base year heavy truck DVMT to population VELandUse CalculateBaseRoadDvmt LdvRoadDvmtLdvDemandRatio Ratio between light-duty vehicle (LDV) daily vehicle miles of travel (DVMT) on urbanized area roadways in the Marea to the total LDV DVMT of households residing in the urbanized area, the commercial service vehicle travel related to household demand, and LDV public transit DVMT VETransportSupply AssignTransitService VanDvmt Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services VETransportSupply AssignTransitService BusDvmt Total daily miles traveled by buses of various sizes to provide bus service of various types VELandUse AssignLocTypes UrbanPop Urbanized area population VELandUse AssignLocTypes RuralPop Rural (i.e.Â non-urbanized area) population VELandUse AssignLocTypes RuralIncome Total household income of the rural (i.e.Â non-urbanized area) population VELandUse AssignLocTypes UrbanIncome Total household income of the rural (i.e.Â non-urbanized area) population VEHouseholdTravel CalculateHouseholdDvmt UrbanHhDvmt Average daily vehicle miles traveled in autos or light trucks by households residing in the urbanized portion of the Marea VEHouseholdTravel CalculateHouseholdDvmt RuralHhDvmt Average daily vehicle miles traveled in autos or light trucks by households residing in the rural (non-urban) portion of the Marea 6.5.30.3 Module Outputs HvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles of travel in urbanized areas HvyTrkRuralDvmt: Base year Region heavy truck daily vehicle miles of travel in rural (i.e.Â non-urbanized) areas ComSvcUrbanDvmt: Commercial service daily vehicle miles of travel associated with Marea urbanized household activity ComSvcRuralDvmt: Commercial service daily vehicle miles of travel associated with Marea rural household activity LdvFwyArtDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways LdvOthDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways HvyTrkFwyDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways HvyTrkArtDvmt:Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways HvyTrkOthDvmt: Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways BusFwyDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways BusArtDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways BusOthDvmt: Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways Top 6.5.31 CalculateRoadPerformance This module splits light-duty vehicle (LDV) daily vehicle miles of travel DVHT between freeways and arterials as a function of relative speeds and congestion prices. Speeds and prices are combined to calculate an average effective speed for freeways and for arterials. The ratio of freeway and arterial effective speeds and a split factor calculated for the metropolitan area are used to split the LDV DVMT. Iteration is used to find an equilibrium split value. In addition to the LDV freeway DVMT and arterial DVMT, the following performance measures are saved to the datastore: Average freeway speed by congestion level; Average arterial speed by congestion level; Average freeway delay by congestion level; Average arterial delay by congestion level; Freeway DVMT proportions by congestion level; Arterial DVMT proportions by congestion level; Average amount paid per mile in congestion pricing fees; and, Vehicle hours of delay by vehicle type. 6.5.31.1 User Input Files Operations deployment effects on dvmt for Marea (marea_operations_deployment.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the proportion of dvmt affected by operations for different road classes. RampMeterDeployProp: Proportion of freeway DVMT affected by ramp metering deployment IncidentMgtDeployProp: Proportion of freeway DVMT affected by incident management deployment SignalCoordDeployProp: Proportion of arterial DVMT affected by signal coordination deployment AccessMgtDeployProp: Proportion of arterial DVMT affected by access management deployment OtherFwyOpsDeployProp: Proportion of freeway DVMT affected by deployment of other user-defined freeway operations measures OtherArtOpsDeployProp: Proportion of arterial DVMT affected by deployment of other user-defined arterial operations measures Here is a snapshot of the file: Other operations effects (other_ops_effectiveness.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the other delay effects of operations in different road classes Level: Congestion levels: None = none, Mod = moderate, Hvy = heavy, Sev = severe, Ext = extreme Art_Rcr: Percentage reduction of recurring arterial delay that would occur with full deployment of other user-defined arterial operations measures Art_NonRcr: Percentage reduction of non-recurring arterial delay that would occur with full deployment of other user-defined arterial operations measures Fwy_Rcr: Percentage reduction of recurring freeway delay that would occur with full deployment of other user-defined freeway operations measures Fwy_NonRcr: Percentage reduction of non-recurring freeway delay that would occur with full deployment of other user-defined freeway operations measures Here is a snapshot of the file: Charges by congestion levels by road class for Marea (marea_congestion_charges.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the charges of vehicle travel for different congestion levels FwyNoneCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of no congestion FwyModCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of moderate congestion FwyHvyCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of heavy congestion FwySevCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of severe congestion FwyExtCongChg: Charge per mile (U.S. dollars) of vehicle travel on freeways during periods of extreme congestion ArtNoneCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of no congestion ArtModCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of moderate congestion ArtHvyCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of heavy congestion ArtSevCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of severe congestion ArtExtCongChg: Charge per mile (U.S. dollars) of vehicle travel on arterials during periods of extreme congestion Here is a snapshot of the file: 6.5.31.2 User Input Parameters Value of time (valueoftime) : This parameter set the value of time (base cost year dollars per hour). It should be defined in model_parameters.json {&quot;NAME&quot;: &quot;ValueOfTime&quot;, &quot;VALUE&quot;: &quot;16&quot;, &quot;TYPE&quot;: &quot;double&quot;, &quot;UNITS&quot;: &quot;base cost year dollars per hour&quot; } 6.5.31.3 Internal Module Inputs Package Module Outputs Description VELandUse AssignLocTypes UrbanPop Urbanized area population VETransportSupply AssignRoadMiles FwyLaneMi Lane-miles of roadways functionally classified as freeways or expressways in the urbanized portion of the metropolitan area VETravelPerformance CalculateBaseRoadDvmt LdvFwyArtDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways VETravelPerformance CalculateBaseRoadDvmt LdvOthDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkFwyDvmt Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt HvyTrkArtDvmt Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkOthDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateBaseRoadDvmt BusFwyDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt BusArtDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt BusOthDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways VELandUse Calculate4DMeasures UrbanArea Area that is Urban and unprotected (i.e.Â developable) within the zone 6.5.31.4 Module Outputs LdvFwyDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways LdvArtDvmt: Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways FwyNoneCongSpeed: Average freeway speed (miles per hour) when there is no congestion FwyModCongSpeed: Average freeway speed (miles per hour) when congestion is moderate FwyHvyCongSpeed: Average freeway speed (miles per hour) when congestion is heavy FwySevCongSpeed: Average freeway speed (miles per hour) when congestion is severe FwyExtCongSpeed: Average freeway speed (miles per hour) when congestion is extreme ArtNoneCongSpeed: Average arterial speed (miles per hour) when there is no congestion ArtModCongSpeed: Average arterial speed (miles per hour) when congestion is moderate ArtHvyCongSpeed: Average arterial speed (miles per hour) when congestion is heavy ArtSevCongSpeed: Average arterial speed (miles per hour) when congestion is severe ArtExtCongSpeed: Average arterial speed (miles per hour) when congestion is extreme OthSpd: Average speed (miles per hour) on other roadways AveLdvSpd: Average light-duty vehicle speed (miles per hour) on all roadways weighted by the proportions of light-duty vehicle travel FwyNoneCongDelay: Average freeway delay (hours per mile) occurring when there is no congestion FwyModCongDelay: Average freeway delay (hours per mile) occurring when congestion is moderate FwyHvyCongDelay: Average freeway delay (hours per mile) occurring when congestion is heavy FwySevCongDelay: Average freeway delay (hours per mile) occurring when congestion is severe FwyExtCongDelay: Average freeway delay (hours per mile) occurring when congestion is extreme ArtNoneCongDelay: Average arterial delay (hours per mile) occurring when there is no congestion ArtModCongDelay: Average arterial delay (hours per mile) occurring when congestion is moderate ArtHvyCongDelay: Average arterial delay (hours per mile) occurring when congestion is heavy ArtSevCongDelay: Average arterial delay (hours per mile) occurring when congestion is severe ArtExtCongDelay: Average arterial delay (hours per mile) occurring when congestion is extreme FwyDvmtPropNoneCong: Proportion of freeway DVMT occurring when there is no congestion FwyDvmtPropModCong: Proportion of freeway DVMT occurring when congestion is moderate FwyDvmtPropHvyCong: Proportion of freeway DVMT occurring when congestion is heavy FwyDvmtPropSevCong: Proportion of freeway DVMT occurring when congestion is severe FwyDvmtPropExtCong: Proportion of freeway DVMT occurring when congestion is extreme ArtDvmtPropNoneCong: Proportion of arterial DVMT occurring when there is no congestion ArtDvmtPropModCong: Proportion of arterial DVMT occurring when congestion is moderate ArtDvmtPropHvyCong: Proportion of arterial DVMT occurring when congestion is heavy ArtDvmtPropSevCong: Proportion of arterial DVMT occurring when congestion is severe ArtDvmtPropExtCong: Proportion of arterial DVMT occurring when congestion is extreme AveCongPrice: Average price paid (dollars per mile) in congestion fees For more information see here Top 6.5.32 CalculateMpgMpkwhAdjustments This module calculates adjustments to fuel economy and electric energy economy for plug-in vehicles) resulting from traffic congestion, speed smoothing(i.e.Â active traffic management which reduces speed variation), and ecodriving practices. 6.5.32.1 User Input Files Speed smoothing and ecodriving for Marea (marea_speed_smooth_ecodrive.csv): This input file supplies information of deployment of speed smoothing and ecodriving by road class and vehicle type FwySmooth:Fractional deployment of speed smoothing traffic management on freeways, where 0 is no deployment and 1 is the full potential fuel savings ArtSmooth: Fractional deployment of speed smoothing traffic management on arterials, where 0 is no deployment and 1 is the full potential fuel savings LdvEcoDrive: Eco-driving penetration for light-duty vehicles; the fraction of vehicles from 0 to 1 HvyTrkEcoDrive: Eco-driving penetration for heavy-duty vehicles; the fraction of vehicles from 0 to 1 Here is a snapshot of the file: 6.5.32.2 Internal Module Inputs Package Module Outputs Description VETravelPerformance CalculateRoadPerformance LdvFwyDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateRoadPerformance LdvArtDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt LdvOthDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeway or arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkFwyDvmt Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt HvyTrkArtDvmt Heavy truck daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt HvyTrkOthDvmt Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateBaseRoadDvmt BusFwyDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateBaseRoadDvmt BusArtDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateBaseRoadDvmt BusOthDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways VETravelPerformance CalculateRoadPerformance FwyNoneCongSpeed Average freeway speed (miles per hour) when there is no congestion VETravelPerformance CalculateRoadPerformance FwyModCongSpeed Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateRoadPerformance FwyHvyCongSpeed Average freeway speed (miles per hour) when congestion is heavy VETravelPerformance CalculateRoadPerformance FwySevCongSpeed Average freeway speed (miles per hour) when congestion is severe VETravelPerformance CalculateRoadPerformance FwyExtCongSpeed Light-duty daily vehicle miles of travel in the urbanized portion of the Marea occurring on other roadways VETravelPerformance CalculateRoadPerformance BusFwyDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on freeways VETravelPerformance CalculateRoadPerformance BusArtDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occurring on arterial roadways VETravelPerformance CalculateRoadPerformance BusOthDvmt Bus daily vehicle miles of travel in the urbanized portion of the Marea occuring on other roadways VETravelPerformance CalculateRoadPerformance FwyDvmtPropNoneCong Proportion of freeway DVMT occurring when there is no congestion VETravelPerformance CalculateRoadPerformance FwyDvmtPropModCong Proportion of freeway DVMT occurring when congestion is moderate VETravelPerformance CalculateRoadPerformance FwyDvmtPropHvyCong Proportion of freeway DVMT occurring when congestion is heavy VETravelPerformance CalculateRoadPerformance FwyDvmtPropSevCong Proportion of freeway DVMT occurring when congestion is severe VETravelPerformance CalculateRoadPerformance FwyDvmtPropExtCong Proportion of freeway DVMT occurring when congestion is extreme VETravelPerformance CalculateRoadPerformance ArtDvmtPropNoneCong Proportion of arterial DVMT occurring when there is no congestion VETravelPerformance CalculateRoadPerformance ArtDvmtPropModCong Proportion of arterial DVMT occurring when congestion is moderate VETravelPerformance CalculateRoadPerformance ArtDvmtPropHvyCong Proportion of arterial DVMT occurring when congestion is heavy VETravelPerformance CalculateRoadPerformance ArtDvmtPropSevCong Proportion of arterial DVMT occurring when congestion is severe VETravelPerformance CalculateRoadPerformance ArtDvmtPropExtCong Proportion of arterial DVMT occurring when congestion is extereme 6.5.32.3 Module Outputs LdvSpdSmoothFactor: Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to speed smoothing HvyTrkSpdSmoothFactor: Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to speed smoothing BusSpdSmoothFactor: Proportional adjustment of bus internal combustion engine (ICE) vehicle MPG due to speed smoothing LdvEcoDriveFactor: Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to eco-driving HvyTrkEcoDriveFactor: Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to eco-driving BusEcoDriveFactor: Proportional adjustment of bus internal combustion engine (ICE) vehicle MPG due to eco-driving LdIceFactor: Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to congestion LdHevFactor: Proportional adjustment of light-duty hybrid-electric vehicle (HEV) MPG due to congestion LdEvFactor: Proportional adjustment of light-duty battery electric vehicle (EV) MPkWh due to congestion LdFcvFactor: Proportional adjustment of light-duty fuel cell vehicle (FCV) MPkWh due to congestion HdIceFactor: Proportional adjustment of heavy-duty internal combustion engine (ICE) vehicle MPG due to congestion Top 6.5.33 AdjustHhVehicleMpgMpkwh This module adjusts the fuel economy and power efficiency of household vehicles to reflect roadway congestion. #### User Input Files 1. Car service vehicle powertrain proportions by vehicle type for the model region (region_carsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of car services. CarSvcAutoPropIcev: Proportion of car service automobile travel powered by internal combustion engine powertrains CarSvcAutoPropHev: Proportion of car service automobile travel powered by hybrid electric powertrains CarSvcAutoPropBev: Proportion of car service automobile travel powered by battery electric powertrains CarSvcLtTrkPropIcev: Proportion of car service light truck travel powered by internal combustion engine powertrains CarSvcLtTrkPropHev: Proportion of car service light truck travel powered by hybrid electric powertrains CarSvcLtTrkPropBev: Proportion of car service light truck travel powered by battery electric powertrains Here is a snapshot of the file: 6.5.33.1 Internal Module Inputs Package Module Outputs Description VETravelPerformance CalculateMpgMpkwhAdjustments LdvEcoDrive Eco-driving penetration for light-duty vehicles; the fraction of vehicles from 0 to 1 VETravelPerformance CalculateMpgMpkwhAdjustments LdvSpdSmoothFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to speed smoothing VETravelPerformance CalculateMpgMpkwhAdjustments LdvEcoDriveFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to eco-driving VETravelPerformance CalculateMpgMpkwhAdjustments LdIceFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments LdHevFactor Proportional adjustment of light-duty hybrid-electric vehicle (HEV) MPG due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments LdFcvFactor Proportional adjustment of light-duty fuel cell vehicle (FCV) MPkWh due to congestion VESimHouseholds CreateHouseholds HhId Household id VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VEHouseholdVehicles AssignVehicleOwnership Vehicles Number of automobiles and light trucks owned or leased by the household including high level car service vehicles available to driving-age persons VEHouseholdVehicles AssignVehicleType NumLtTrk Number of light trucks (pickup, sport-utility vehicle, and van) owned or leased by household VEHouseholdVehicles AssignVehicleType NumAuto Number of automobiles (i.e.Â 4-tire passenger vehicles that are not light trucks) owned or leased by household VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEPowertrainsAndFuels AssignHhVehiclePowertrain Powertrain Vehicle powertrain type: ICEV = internal combustion engine vehicle, HEV = hybrid electric vehicle, PHEV = plug-in hybrid electric vehicle, BEV = battery electric vehicle, NA = not applicable because is a car service vehicle VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) VEPowertrainsAndFuels AssignHhVehiclePowertrain MPG Average miles of vehicle travel powered by fuel per gasoline equivalent gallon VEPowertrainsAndFuels AssignHhVehiclePowertrain GPM Average gasoline equivalent gallons per mile of vehicle travel powered by fuel VEPowertrainsAndFuels AssignHhVehiclePowertrain MPKWH Average miles of vehicle travel powered by electricity per kilowatt-hour VEPowertrainsAndFuels AssignHhVehiclePowertrain KWHPM Average kilowatt-hours per mile of vehicle travel powered by electricity VEPowertrainsAndFuels AssignHhVehiclePowertrain MPGe Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) VEPowertrainsAndFuels AssignHhVehiclePowertrain ElecDvmtProp Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) VEPowertrainsAndFuels AssignHhVehiclePowertrain FuelCO2ePM Average grams of carbon-dioxide equivalents produced per mile of travel powered by fuel VEPowertrainsAndFuels AssignHhVehiclePowertrain ElecCO2ePM Average grams of carbon-dioxide equivalents produced per mile of travel powered by electricity 6.5.33.2 Module Outputs MPG: Average miles of vehicle travel powered by fuel per gasoline equivalent gallon GPM: Average gasoline equivalent gallons per mile of vehicle travel powered by fuel MPKWH: Average miles of vehicle travel powered by electricity per kilowatt-hour KWHPM: Average kilowatt-hours per mile of vehicle travel powered by electricity MPGe: Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) ElecDvmtProp: Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) FuelCO2ePM: Average grams of carbon-dioxide equivalents produced per mile of travel powered by fuel IsEcoDrive: Flag identifying whether drivers in household are eco-drivers Top 6.5.34 CalculateVehicleOperatingCost This module calculates vehicle operating costs per mile of travel and uses those costs to determine the proportional split of DVMT among household vehicles. The module also calculates the average out-of-pocket costs per mile of vehicle by household, as well as the cost of social and environmental impacts, and road use taxes per mile of vehicle travel. 6.5.34.1 User Input Files Vehicle access time for Azone (azone_vehicle_access_times.csv): This file supplies data for vehicle access and eagress time. OwnedVehAccessTime:Average amount of time in minutes required for access to and egress from a household-owned vehicle for a trip HighCarSvcAccessTime: Average amount of time in minutes required for access to and egress from a high service level car service for a trip LowCarSvcAccessTime: Average amount of time in minutes required for access to and egress from a low service level car service for a trip Here is a snapshot of the file: Fuel and electricity cost for Azone (azone_fuel_power_cost.csv): This file supplies data for retail cost of fuel and electricity FuelCost:Retail cost of fuel per gas gallon equivalent in dollars PowerCost: Retail cost of electric power per kilowatt-hour in dollars Here is a snapshot of the file: Vehicle taxes for Azone (azone_veh_use_taxes.csv): This file supplies data for vehicle related taxes FuelTax:Tax per gas gallon equivalent of fuel in dollars VmtTax: Tax per gas gallon equivalent of fuel in dollars PevSurchgTaxProp: Proportion of equivalent gas tax per mile paid by hydrocarbon fuel consuming vehicles to be charged to plug-in electric vehicles per mile of travel powered by electricity Here is a snapshot of the file: Proportional external costs for the ragion (region_prop_externalities_paid.csv): This file supplies data for climate change and other social costs. PropClimateCostPaid: Proportion of climate change costs paid by users (i.e.Â ratio of carbon taxes to climate change costs PropOtherExtCostPaid: Proportion of other social costs paid by users Here is a snapshot of the file: 6.5.34.2 User Input Parameters Value of time (valueoftime) : This parameter set the value of time (base cost year dollars per hour). It should be defined in model_parameters.json {&quot;NAME&quot;: &quot;ValueOfTime&quot;, &quot;VALUE&quot;: &quot;16&quot;, &quot;TYPE&quot;: &quot;double&quot;, &quot;UNITS&quot;: &quot;base cost year dollars per hour&quot; } 6.5.34.3 Internal Module Inputs Package Module Outputs Description VETravelPerformance CalculateRoadPerformance AveLdvSpd Average light-duty vehicle speed (miles per hour) on all roadways weighted by the proportions of light-duty vehicle travel VETravelPerformance CalculateRoadPerformance AveCongPrice Average price paid (dollars per mile) in congestion fees VEHouseholdVehicles CreateVehicleTable HighCarSvcCost Average cost in dollars per mile for travel by high service level car service VEHouseholdVehicles CreateVehicleTable LowCarSvcCost Average cost in dollars per mile for travel by low service level car service VESimHouseholds CreateHouseholds HhId Household id VEHouseholdVehicles CreateVehicleTable VehId Unique vehicle ID VESimHouseholds PredictIncome Income Total annual income of household VEHouseholdTravel CalculateHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks VEHouseholdVehicles CalculateVehicleOwnCost HasPaydIns Identifies whether household has pay-as-you-drive insurance for vehicles: 1 = Yes, 0 = no VEHouseholdTravel CalculateVehicleTrips VehicleTrips Average number of vehicle trips per day by household members VELandUse AssignParkingRestrictions OtherParkingCost Daily cost for parking at shopping locations or other locations of paid parking not including work VEHouseholdVehicles AssignVehicleAge Type Vehicle body type: Auto = automobile, LtTrk = light trucks (i.e.Â pickup, SUV, Van) VEHouseholdVehicles AssignVehicleAge Age Vehicle age in years VEHouseholdVehicles CreateVehicleTable VehicleAccess Identifier whether vehicle is owned by household (Own), if vehicle is low level car service (LowCarSvc), or if vehicle is high level car service (HighCarSvc) VEPowertrainsAndFuels AssignHhVehiclePowertrain Powertrain Vehicle powertrain type: ICEV = internal combustion engine vehicle, HEV = hybrid electric vehicle, PHEV = plug-in hybrid electric vehicle, BEV = battery electric vehicle, NA = not applicable because is a car service vehicle VEPowertrainsAndFuels AssignHhVehiclePowertrain GPM Average gasoline equivalent gallons per mile of vehicle travel powered by fuel VEPowertrainsAndFuels AssignHhVehiclePowertrain KWHPM Average kilowatt-hours per mile of vehicle travel powered by electricity VEPowertrainsAndFuels AssignHhVehiclePowertrain ElecDvmtProp Average miles of vehicle travel per gasoline equivalent gallon (fuel and electric powered) VEPowertrainsAndFuels AssignHhVehiclePowertrain FuelCO2ePM Average grams of carbon-dioxide equivalents produced per mile of travel powered by fuel VEPowertrainsAndFuels AssignHhVehiclePowertrain ElecCO2ePM Average grams of carbon-dioxide equivalents produced per mile of travel powered by electricity VEHouseholdVehicles CalculateVehicleOwnCost InsCost Annual vehicle insurance cost in dollars VELandUse AssignParkingRestrictions ParkingCost Daily cost for long-term parking (e.g.Â paid on monthly basis) VELandUse AssignParkingRestrictions IsCashOut Is worker paid parking in cash-out-buy-back program: 1 = yes, 0 = no VELandUse AssignParkingRestrictions PaysForParking Does worker pay for parking: 1 = yes, 0 = no 6.5.34.4 Module Outputs AveVehCostPM: Average out-of-pocket cost in dollars per mile of vehicle travel AveSocEnvCostPM: Average cost in dollars of the social and environmental impacts per mile of vehicle travel AveRoadUseTaxPM: Average road use taxes in dollars collected per mile of vehicle travel DvmtProp: Proportion of household DVMT allocated to vehicle AveGPM: Average gasoline equivalent gallons per mile of household vehicle travel AveKWHPM: Average kilowatt-hours per mile of household vehicle travel AveCO2ePM: Average grams of carbon-dioxide equivalents produced per mile of household vehicle travel Top 6.5.35 BudgetHouseholdDvmt This module adjusts average household DVMT to keep the quantity within household operating cost limits. The limit for each household is calculated in several steps. First, the proportion of the households income that may be spent on vehicle operating costs is calculated using a model that is explained below. This is called the budget proportion. Then an adjusted household income for budget calculation purposes is calculated by adding the annual cost of insurance for households subscribing to payd-as-you-drive (PAYD) insurance, cash-out parking payments for workers who work at an employer that has cash-out-buy-back parking, and any vehicle ownership cost savings for households that substitute high level car service for one or more household vehicles. The adjusted household income is muliplied by the budget proportion and divided by the average vehicle operating cost per mile for the household to determine the maximum household DVMT that fits within the household budget. The household DVMT is then set at the lesser of this budget maximum or the modeled household DVMT. The budget proportion model is estimated using data from the Bureau of Labors consumer expenditure survey for the years from 2003 to 2015. The data used are the nominal dollar expenditures by household income category and year by transportation category. The values for the operating cost categories (gas and oil, and maintenance and repair) are summed and then divided by the midpoint value for each income category to calculate the budget proportion for each income group and each year. From this the mean value is computed for each income group. The budget proportions for each income group and year are divided by the mean values by income group to normalize values. The standard deviation for the combined normalized values is computed and value of 3 deviations above the mean is set as the maximum normalized value. The mean values by income group are multiplied by this normalized maximum to derive a budget proportion maximum by income group. A smoothed splines model of the budget proportion as a function of income is then estimated from the calculated budget proportion maximums. This model is used to calculate the budget proportion for a household based on the household income. The minimum and maximum values of the calculated budget proportion maximums are used as constraints to avoid unreasonable results for very low incomes and very high incomes. 6.5.35.1 User Input Files This module does not have user-supplied input files 6.5.35.2 Internal Module Inputs Package Module Outputs Description VESimHouseholds CreateHouseholds HhId Household id VESimHouseholds CreateHouseholds HHSize Number of persons in the household VESimHouseholds PredictIncome Income Total annual income of household VELandUse AssignLocTypes LocType Location type (Urban, Town, Rural) of the place where the household resides VETravelPerformance CalculateVehicleOperatingCost AveVehCostPM Average out-of-pocket cost in dollars per mile of vehicle travel VEHouseholdVehicles AdjustVehicleOwnership OwnCostSavings Annual vehicle ownership cost (depreciation, finance, insurance, taxes) savings in dollars resulting from substituting the use of car services for a household vehicle VEHouseholdVehicles CalculateVehicleOwnCost HasPaydIns Identifies whether household has pay-as-you-drive insurance for vehicles: 1 = Yes, 0 = no VETravelPerformance CalculateVehicleOperatingCost AveGPM Average gasoline equivalent gallons per mile of household vehicle travel VETravelPerformance CalculateVehicleOperatingCost AveKWHPM Average kilowatt-hours per mile of household vehicle travel VETravelPerformance CalculateVehicleOperatingCost AveCO2ePM Average grams of carbon-dioxide equivalents produced per mile of household vehicle travel VELandUse AssignParkingRestrictions ParkingCost Daily cost for long-term parking (e.g.Â paid on monthly basis) VELandUse AssignParkingRestrictions IsCashOut Is worker paid parking in cash-out-buy-back program: 1 = yes, 0 = no VELandUse AssignParkingRestrictions PaysForParking Does worker pay for parking: 1 = yes, 0 = no VEHouseholdVehicles CalculateVehicleOwnCost InsCost Annual vehicle insurance cost in dollars 6.5.35.3 Module Outputs Dvmt: Average daily vehicle miles traveled by the household in autos or light trucks UrbanHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the urbanized portion of the Marea RuralHhDvmt: Average daily vehicle miles traveled in autos or light trucks by households residing in the non-urbanized portion of the Marea DailyGGE: Gasoline equivalent gallons consumed per day by household vehicle travel DailyKWH: Kilowatt-hours consumed per day by household vehicle travel DailyCO2e: Grams of carbon-dioxide equivalents produced per day by household vehicle travel WalkTrips: Average number of walk trips per year by household members BikeTrips: Average number of bicycle trips per year by household members TransitTrips: Average number of public transit trips per year by household members VehicleTrips: Average number of vehicle trips per day by household members Top ___ 6.5.36 BalanceRoadCostsAndRevenues This module calculates an extra mileage tax ($ per vehicle mile traveled) for household vehicles needed to make up any difference in the cost of constructing, maintaining, and operating roadways and the revenues from fuel, VMT, and congestion taxes. #### User Input Files 1. Road cost for the region (region_road_cost.csv): This file supplies data for different types of road costs RoadBaseModCost: Average base modernization cost per light-duty vehicle mile traveled (dollars per vehicle mile). Base modernization includes roadway improvements exclusive of addition of lanes. RoadPresOpMaintCost: Average road preservation, operations, and maintenance cost per light-duty vehicle mile traveled (dollars per vehicle mile). RoadOtherCost: Average other road cost (e.g.Â administration, planning, project development, safety) per light-duty vehicle mile traveled (dollars per vehicle mile). FwyLnMiCost: Average cost to build one freeway lane-mile (dollars per lane-mile) ArtLnMiCost: Average cost to build one arterial lane-mile (dollars per lane-mile) HvyTrkPCE: Passenger car equivalent (PCE) for heavy trucks. PCE indicates the number of light-duty vehicles a heavy truck is equivalent to in calculating road capacity. Here is a snapshot of the file: 6.5.36.1 Internal Module Inputs Package Module Outputs Description VETravelPerformance CalculateBaseRoadDvmt HvyTrkUrbanDvmt Base year Region heavy truck daily vehicle miles of travel in urbanized areas VETravelPerformance CalculateBaseRoadDvmt ComSvcUrbanDvmt Commercial service daily vehicle miles of travel associated with Marea urbanized household activity VETravelPerformance CalculateBaseRoadDvmt ComSvcRuralDvmt Commercial service daily vehicle miles of travel associated with Marea rural household activity VETravelPerformance CalculateBaseRoadDvmt ComSvcTownDvmt Commercial service daily vehicle miles of travel associated with Marea town household activity VETransportSupply AssignRoadMiles FwyLaneMi Lane-miles of roadways functionally classified as freeways or expressways in the urbanized portion of the metropolitan area VETransportSupply AssignRoadMiles ArtLaneMi Lane-miles of roadways functionally classified as arterials (but not freeways or expressways) in the urbanized portion of the metropolitan area VETravelPerformance CalculateVehicleOperatingCost AveRoadUseTaxPM Average road use taxes in dollars collected per mile of vehicle travel VETravelPerformance BudgetHouseholdDvmt Dvmt Average daily vehicle miles traveled by the household in autos or light trucks 6.5.36.2 Module Outputs ExtraVmtTax: Added vehicle mile tax for household vehicle use to pay for any deficit between road costs and road revenues (dollars per vehicle mile) Top ___ 6.5.37 CalculateComEnergyAndEmissions This module calculates the energy consumption and carbon emissions of heavy trucks and light-duty commercial service vehicles. It does not calculate the values for car service vehicles which are calculated as part of the household emissions. It also does not calculate public transit emissions which are calculated in the CalculateTransitEnergyAndEmissions module. #### User Input Files 1. Light trucks proportion for the region (region_comsvc_lttrk_prop.csv): This file supplies data for the light truck proportion og commercial vehicles ComSvcLtTrkProp: Regional proportion of commercial service vehicles that are light trucks Here is a snapshot of the file: Commercial service vehicle powertrain proportions by vehicle type (region_comsvc_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of commercial vehicles. ComSvcAutoPropIcev: Proportion of commercial service automobile travel powered by internal combustion engine powertrains ComSvcAutoPropHev: Proportion of commercial service automobile travel powered by hybrid electric powertrains ComSvcAutoPropBev: Proportion of commercial service automobile travel powered by battery electric powertrains ComSvcLtTrkPropIcev: Proportion of commercial service light truck travel powered by internal combustion engine powertrains ComSvcLtTrkPropHev: Proportion of commercial service light truck travel powered by hybrid electric powertrains ComSvcLtTrkPropBev: Proportion of commercial service light truck travel powered by battery electric powertrainss Here is a snapshot of the file: Heavy duty truck powertrain proportions (region_hvytrk_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the powertrain proportion of heavy duty trucks. HvyTrkPropIcev: Proportion of heavy truck travel powered by internal combustion engine powertrains HvyTrkPropHev: Proportion of heavy truck travel powered by hybrid electric powertrains HvyTrkPropBev: Proportion of heavy truck travel powered by battery electric powertrains Here is a snapshot of the file: Heavy duty truck maean ages (region_comsvc_veh_mean_age.csv): This input file contains average age of commercial service vehicles AveComSvcVehicleAge: average age of commercial service vehicles Here is a snapshot of the file: 6.5.37.1 Internal Module Inputs Package Module Outputs Description VEPowertrainsAndFuels CalculateCarbonIntensity ElectricityCI Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity HhAutoFuelCI Average carbon intensity of fuels used by household automobiles (grams CO2e per megajoule)) VEPowertrainsAndFuels CalculateCarbonIntensity HhLtTrkFuelCI Average carbon intensity of fuels used by household light trucks (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity HvyTrkFuelCI Average carbon intensity of fuels used by heavy trucks (grams CO2e per megajoule) VETravelPerformance CalculateMpgMpkwhAdjustments LdvEcoDrive Eco-driving penetration for light-duty vehicles; the fraction of vehicles from 0 to 1 VETravelPerformance CalculateMpgMpkwhAdjustments HvyTrkEcoDrive Eco-driving penetration for heavy-duty vehicles; the fraction of vehicles from 0 to 1 VETravelPerformance CalculateMpgMpkwhAdjustments LdvSpdSmoothFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to speed smoothing VETravelPerformance CalculateMpgMpkwhAdjustments LdvEcoDriveFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to eco-driving VETravelPerformance CalculateMpgMpkwhAdjustments HvyTrkSpdSmoothFactor Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to speed smoothing VETravelPerformance CalculateMpgMpkwhAdjustments LdIceFactor Proportional adjustment of light-duty internal combustion engine (ICE) vehicle MPG due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments LdHevFactor Proportional adjustment of light-duty hybrid-electric vehicle (HEV) MPG due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments HvyTrkEcoDriveFactor Proportional adjustment of heavy truck internal combustion engine (ICE) vehicle MPG due to eco-driving VETravelPerformance CalculateMpgMpkwhAdjustments LdEvFactor Proportional adjustment of light-duty battery electric vehicle (EV) MPkWh due to congestion VETravelPerformance CalculateMpgMpkwhAdjustments HdIceFactor Proportional adjustment of heavy-duty internal combustion engine (ICE) vehicle MPG due to congestion VETravelPerformance CalculateBaseRoadDvmt HvyTrkUrbanDvmt Base year Region heavy truck daily vehicle miles of travel in urbanized areas VETravelPerformance CalculateBaseRoadDvmt HvyTrkRuralDvmt Base year Region heavy truck daily vehicle miles of travel in rural (i.e.Â non-urbanized) areas VETravelPerformance CalculateBaseRoadDvmt ComSvcUrbanDvmt Commercial service daily vehicle miles of travel associated with Marea urbanized household activity VETravelPerformance CalculateBaseRoadDvmt ComSvcRuralDvmt Commercial service daily vehicle miles of travel associated with Marea rural household activity 6.5.37.2 Module Outputs ComSvcUrbanGGE: Average daily amount of hydrocarbon fuels consumed by commercial service vehicles associated with urban household activity in gas gallon equivalents ComSvcRuralGGE: Average daily amount of hydrocarbon fuels consumed by commercial service vehicles associated with rural household activity in gas gallon equivalents HvyTrkUrbanGGE: Average daily amount of hydrocarbon fuels consumed by heavy trucks on urbanized area roadways in the Marea in gas gallon equivalents ComSvcUrbanKWH: Average daily amount of electricity consumed by commercial service vehicles associated with urban household activity in kilowatt-hours ComSvcRuralKWH: Average daily amount of electricity consumed by commercial service vehicles associated with rural household activity in kilowatt-hours ComSvcUrbanCO2e: Average daily amount of carbon-dioxide equivalents produced by commercial service vehicles associated with urban household activity in grams ComSvcRuralCO2e: Average daily amount of carbon-dioxide equivalents produced by commercial service vehicles associated with rural household activity in grams HvyTrkUrbanCO2e: Average daily amount of carbon-dioxide equivalents produced by heavy trucks on urbanized area roadways in the Marea in grams ComSvcAveUrbanAutoCO2eRate: Average amount of carbon-dioxide equivalents produced by commercial service automobiles per mile of travel on urbanized area roadways in grams per mile ComSvcAveUrbanLtTrkCO2eRate: Average amount of carbon-dioxide equivalents produced by commercial service light trucks per mile of travel on urbanized area roadways in grams per mile HvyTrkAveUrbanCO2eRate: Average amount of carbon-dioxide equivalents produced by heavy trucks per mile of travel on urbanized area roadways in grams per mile HvyTrkRuralGGE: Average daily amount of hydrocarbon fuels consumed by heavy trucks on rural roadways in the Region in gas gallon equivalents HvyTrkUrbanGGE: Average daily amount of hydrocarbon fuels consumed by heavy trucks on urbanized area roadways in the Region in gas gallon equivalents HvyTrkRuralKWH: Average daily amount of electricity consumed by heavy trucks on rural roadways in the Region in kilowatt-hours HvyTrkUrbanKWH: Average daily amount of electricity consumed by heavy trucks on urbanized area roadways in the Region in kilowatt-hours HvyTrkRuralCO2e: Average daily amount of carbon-dioxide equivalents produced by heavy trucks on rural roadways in the Region in grams HvyTrkUrbanCO2e: Average daily amount of carbon-dioxide equivalents produced by heavy trucks on urbanized area roadways in the Region in grams Top 6.5.38 CalculatePtranEnergyAndEmissions This module calculates the energy consumption and carbon emissions of public transit vehicle emissions in urbanized areas. 6.5.38.1 User Input Files Transit powertrain proportions by transit vehicle type and Marea (marea_transit_powertrain_prop.csv): This input file is OPTIONAL. It is only needed if the user wants to modify the mixes of transit vehicle powertrains. VanPropIcev: Proportion of transit van travel using internal combustion engine powertrains VanPropHev: Proportion of transit van travel using hybrid electric powertrains VanPropBev: Proportion of transit van travel using battery electric powertrains BusPropIcev: Proportion of transit bus travel using internal combustion engine powertrains BusPropHev: Proportion of transit bus travel using hybrid electric powertrains BusPropBev: Proportion of transit bus travel using battery electric powertrains RailPropIcev: Proportion of transit rail travel using internal combustion engine powertrains RailPropHev: Proportion of transit rail travel using hybrid electric powertrains RailPropEv: Proportion of transit rail travel using electric powertrains Here is a snapshot of the file: 6.5.38.2 Internal Module Inputs Package Module Outputs Description VEPowertrainsAndFuels CalculateCarbonIntensity ElectricityCI Carbon intensity of electricity at point of consumption (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity TransitVanFuelCI Average carbon intensity of fuel used by transit vans (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity TransitBusFuelCI Average carbon intensity of fuel used by transit buses (grams CO2e per megajoule) VEPowertrainsAndFuels CalculateCarbonIntensity TransitRailFuelCI Average carbon intensity of fuel used by transit rail vehicles (grams CO2e per megajoule) VETransportSupply AssignTransitService VanDvmt Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services VETransportSupply AssignTransitService BusDvmt Total daily miles traveled by buses of various sizes to provide bus service of various types VETransportSupply AssignTransitService RailDvmt Total daily miles traveled by light rail, heavy rail, commuter rail, and similar types of vehicles 6.5.38.3 Module Outputs BusGGE: Average daily amount of hydrocarbon fuels consumed by bus transit vehicles in urbanized area in gas gallon equivalents RailGGE: Average daily amount of hydrocarbon fuels consumed by rail transit vehicles in urbanized area in gas gallon equivalents VanGGE: Average daily amount of hydrocarbon fuels consumed by van transit vehicles in urbanized area in gas gallon equivalents BusKWH: Average daily amount of electricity consumed by bus transit vehicles in urbanized area in kilowatt-hours RailKWH: Average daily amount of electricity consumed by rail transit vehicles in urbanized area in kilowatt-hours VanKWH:Average daily amount of electricity consumed by van transit vehicles in urbanized area in kilowatt-hours BusCO2e: Average daily amount of carbon-dioxide equivalents produced by bus transit vehicles in urbanized area in grams RailCO2e: Average daily amount of carbon-dioxide equivalents produced by rail transit vehicles in urbanized area in grams VanCO2e: Average daily amount of carbon-dioxide equivalents produced by van transit vehicles in urbanized area in grams BusCO2eRate: Average amount of carbon-dioxide equivalents produced by bus transit vehicles per mile of travel in urbanized area in grams per mile RailCO2eRate: Average amount of carbon-dioxide equivalents produced by rail transit vehicles per mile of travel in urbanized area in grams per mile VanCO2eRate: Average amount of carbon-dioxide equivalents produced by van transit vehicles per mile of travel in urbanized area in grams per mile Top 6.6 Development and Installation This section describes the installation and use of VE-State. 6.7 Installation of VisionEval and VE-State VE-State and VisionEval framework are implemented in R, a statistical programming language and environment. Both R and VisionEval are open source and freely available. For running VE-State you need to follow these steps: Install R (users are encouraged to also install RStudio, a free and open-source integrated development environment for R) Install VisionEval Run VE-State The VisionEval installer is available here. Follow the instructions on this page carefully to install the VisionEval on your system. 6.8 In Brief: Running VE-State Base Scenario See the VisionEval Getting Started documentation for an overview of the framework methods for running models and querying results. Double-click VisionEval.Rproj in the location where you installed VisionEval. This will launch RStudio. Enter statemod &lt;- openModel('VE-State') Enter statemod$run() 6.9 In Detail: Running VE-State Base Scenario 6.9.1 Preparing inputs Once VisionEval and VE-State have been installed, a directory with sample data will be available at ../models/VE-State/. (Note .. refers to the parent directory of the unzipped installer file). The VE-State directory serves the dual purposes of providing sample data and serving as a template for local modification to other locations. The ../models/VE-State/ directory contains sample input files for Oregon. These inputs can be modified or replaced to investigate the impacts of policy changes or to model a different state. The folder contains multiple files and subfolders: run_model.R is the core script for running the model. It consists of calls to the modules that make up the model. The user may modify the script to call the desired modules. The defs directory contains five model definition files which is introduced in Model Definition Files The inputs directory contains a number of CSV and JSON files that provide inputs for the modules. Each module specifies what input files it needs. If you would like to know the description of each input file and how you can change those files for your desired testing see Inputs_and_Parameters The ../models/VE-State directory contains sample input files for state of Oregon. These can be modified or replaced to investigate the impacts of policy changes or to model a different state. 6.9.2 Running the Model There are multiple ways to run VisionEval models. VisionEval models can be run via the command line directly or using openModel, and can be run for one scenario or multiple scenarios in parallel. Results can be viewed in tabular form or with the interactive VEScenarioViewer. Start R (or RStudio) and make sure your directory is set to the installer folder. The easiest way to do this is to double-click VisionEval.Rproj, which will be associated with RStudio if that is installed correctly. You should see Welcome to VisionEval! on the RStudio console. Then run the following commands: statemod &lt;- openModel(&#39;VE-State&#39;) statemod$run() By default this will run the model in ../models/VE-State/ directory. The default model is for Oregon, for 2010 and 2040. After running the script you will see how the modules will be running in order. The model run will take approximately 45 minutes. Once complete, the output are exported to ../models/VE-State/outputs in 3 different zone levels. 6.10 Querying results To extract all results to .csv files, run: statemod$extract() On the R console, you will see messages about what tables are being extracted and where the files are being saved, e.g.: Extracting data for Table Azone in Group 2010 Extracting data for Table Bzone in Group 2010 Extracting data for Table Household in Group 2010 [...] Write output file: /models/VE-State/output/Azone_2010_1_2021-03-02_153010.csv Write output file: /models/VE-State/output/Bzone_2010_1_2021-03-02_153010.csv [...] For a state-wide model, the Household and Vehicle tables in particular can be quite large, and this full result extraction might take several minutes. To extract just one field, for example DVMT at the household level for 2010 and 2040, first select just the Household table using the tablesSelected method: statemod$tablesSelected &lt;- &#39;Household&#39; Then select the Dvmt field: statemod$fieldsSelected &lt;- &#39;Dvmt&#39; Extract the result to a list of data frames for plotting, rather than to a .csv file. Some manipulation of the list can be done to put the fields in one data frame for plotting, for example: hh_dvmt &lt;- statemod$extract(saveTo = F) hh_dvmt &lt;- unlist(hh_dvmt) year &lt;- names(hh_dvmt) year &lt;- ifelse(grepl(&#39;2010&#39;, year), &#39;2010&#39;, &#39;2040&#39;) hh_dvmt &lt;- data.frame(year, Dvmt = hh_dvmt) Plot using the ggplot2 library, for example: ggplot(hh_dvmt, aes(x = Dvmt, fill = year)) + geom_histogram() + ylab(&#39;Number of Households&#39;) + ggtitle(&#39;Distribution of DVMT by VE-State for Oregon&#39;) Other query methods are described in the Getting Started documentation. 6.10.1 Scenarios To modify a scenario, the appropriate input files are edited. For example, to change the flat rate tax of vehicles for future azone_hh_veh_own_taxes.csv would be modified in Excel, LibreOffice, OpenOffice, or a text editor to change the VehOwnFlatRateFee of year 2038. Create scenarios using the same steps as for VE-RSPM Return to Tutorial. 6.11 Development and Installation This section describes the installation and use of VE-State. 6.12 Installation of VisionEval and VE-State VE-State and VisionEval framework are implemented in R, a statistical programming language and environment. Both R and VisionEval are open source and freely available. For running VE-State you need to follow these steps: Install R (users are encouraged to also install RStudio, a free and open-source integrated development environment for R) Install VisionEval Run VE-State The VisionEval installer is available here. Follow the instructions on this page carefully to install the VisionEval on your system. 6.13 In Brief: Running VE-State Base Scenario See the VisionEval Getting Started documentation for an overview of the framework methods for running models and querying results. Double-click VisionEval.Rproj in the location where you installed VisionEval. This will launch RStudio. Enter statemod &lt;- openModel('VE-State') Enter statemod$run() 6.14 In Detail: Running VE-State Base Scenario 6.14.1 Preparing inputs Once VisionEval and VE-State have been installed, a directory with sample data will be available at ../models/VE-State/. (Note .. refers to the parent directory of the unzipped installer file). The VE-State directory serves the dual purposes of providing sample data and serving as a template for local modification to other locations. The ../models/VE-State/ directory contains sample input files for Oregon. These inputs can be modified or replaced to investigate the impacts of policy changes or to model a different state. The folder contains multiple files and subfolders: run_model.R is the core script for running the model. It consists of calls to the modules that make up the model. The user may modify the script to call the desired modules. The defs directory contains five model definition files which is introduced in Model Definition Files The inputs directory contains a number of CSV and JSON files that provide inputs for the modules. Each module specifies what input files it needs. If you would like to know the description of each input file and how you can change those files for your desired testing see Inputs_and_Parameters The ../models/VE-State directory contains sample input files for state of Oregon. These can be modified or replaced to investigate the impacts of policy changes or to model a different state. 6.14.2 Running the Model There are multiple ways to run VisionEval models. VisionEval models can be run via the command line directly or using openModel, and can be run for one scenario or multiple scenarios in parallel. Results can be viewed in tabular form or with the interactive VEScenarioViewer. Start R (or RStudio) and make sure your directory is set to the installer folder. The easiest way to do this is to double-click VisionEval.Rproj, which will be associated with RStudio if that is installed correctly. You should see Welcome to VisionEval! on the RStudio console. Then run the following commands: statemod &lt;- openModel(&#39;VE-State&#39;) statemod$run() By default this will run the model in ../models/VE-State/ directory. The default model is for Oregon, for 2010 and 2040. After running the script you will see how the modules will be running in order. The model run will take approximately 45 minutes. Once complete, the output are exported to ../models/VE-State/outputs in 3 different zone levels. 6.15 Querying results To extract all results to .csv files, run: statemod$extract() On the R console, you will see messages about what tables are being extracted and where the files are being saved, e.g.: Extracting data for Table Azone in Group 2010 Extracting data for Table Bzone in Group 2010 Extracting data for Table Household in Group 2010 [...] Write output file: /models/VE-State/output/Azone_2010_1_2021-03-02_153010.csv Write output file: /models/VE-State/output/Bzone_2010_1_2021-03-02_153010.csv [...] For a state-wide model, the Household and Vehicle tables in particular can be quite large, and this full result extraction might take several minutes. To extract just one field, for example DVMT at the household level for 2010 and 2040, first select just the Household table using the tablesSelected method: statemod$tablesSelected &lt;- &#39;Household&#39; Then select the Dvmt field: statemod$fieldsSelected &lt;- &#39;Dvmt&#39; Extract the result to a list of data frames for plotting, rather than to a .csv file. Some manipulation of the list can be done to put the fields in one data frame for plotting, for example: hh_dvmt &lt;- statemod$extract(saveTo = F) hh_dvmt &lt;- unlist(hh_dvmt) year &lt;- names(hh_dvmt) year &lt;- ifelse(grepl(&#39;2010&#39;, year), &#39;2010&#39;, &#39;2040&#39;) hh_dvmt &lt;- data.frame(year, Dvmt = hh_dvmt) Plot using the ggplot2 library, for example: ggplot(hh_dvmt, aes(x = Dvmt, fill = year)) + geom_histogram() + ylab(&#39;Number of Households&#39;) + ggtitle(&#39;Distribution of DVMT by VE-State for Oregon&#39;) Other query methods are described in the Getting Started documentation. 6.15.1 Scenarios To modify a scenario, the appropriate input files are edited. For example, to change the flat rate tax of vehicles for future azone_hh_veh_own_taxes.csv would be modified in Excel, LibreOffice, OpenOffice, or a text editor to change the VehOwnFlatRateFee of year 2038. Create scenarios using the same steps as for VE-RSPM Return to Tutorial. "],["developer.html", "Chapter 7 Developer Documentation 7.1 Contribution Guidelines 7.2 Testing Strategies 7.3 Add or Modify a Package", " Chapter 7 Developer Documentation 7.1 Contribution Guidelines No content yet, placeholder 7.2 Testing Strategies No content yet, placeholder 7.3 Add or Modify a Package "],["api-documentation.html", "Chapter 8 API Documentation", " Chapter 8 API Documentation This chapter is a placeholder for module docs built from the latest source code. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
